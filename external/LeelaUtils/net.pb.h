// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_net_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_net_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_net_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_2eproto;
namespace pblczero {
class EngineVersion;
struct EngineVersionDefaultTypeInternal;
extern EngineVersionDefaultTypeInternal _EngineVersion_default_instance_;
class Format;
struct FormatDefaultTypeInternal;
extern FormatDefaultTypeInternal _Format_default_instance_;
class Net;
struct NetDefaultTypeInternal;
extern NetDefaultTypeInternal _Net_default_instance_;
class NetworkFormat;
struct NetworkFormatDefaultTypeInternal;
extern NetworkFormatDefaultTypeInternal _NetworkFormat_default_instance_;
class OnnxModel;
struct OnnxModelDefaultTypeInternal;
extern OnnxModelDefaultTypeInternal _OnnxModel_default_instance_;
class TrainingParams;
struct TrainingParamsDefaultTypeInternal;
extern TrainingParamsDefaultTypeInternal _TrainingParams_default_instance_;
class Weights;
struct WeightsDefaultTypeInternal;
extern WeightsDefaultTypeInternal _Weights_default_instance_;
class Weights_ConvBlock;
struct Weights_ConvBlockDefaultTypeInternal;
extern Weights_ConvBlockDefaultTypeInternal _Weights_ConvBlock_default_instance_;
class Weights_Layer;
struct Weights_LayerDefaultTypeInternal;
extern Weights_LayerDefaultTypeInternal _Weights_Layer_default_instance_;
class Weights_Residual;
struct Weights_ResidualDefaultTypeInternal;
extern Weights_ResidualDefaultTypeInternal _Weights_Residual_default_instance_;
class Weights_SEunit;
struct Weights_SEunitDefaultTypeInternal;
extern Weights_SEunitDefaultTypeInternal _Weights_SEunit_default_instance_;
}  // namespace pblczero
PROTOBUF_NAMESPACE_OPEN
template<> ::pblczero::EngineVersion* Arena::CreateMaybeMessage<::pblczero::EngineVersion>(Arena*);
template<> ::pblczero::Format* Arena::CreateMaybeMessage<::pblczero::Format>(Arena*);
template<> ::pblczero::Net* Arena::CreateMaybeMessage<::pblczero::Net>(Arena*);
template<> ::pblczero::NetworkFormat* Arena::CreateMaybeMessage<::pblczero::NetworkFormat>(Arena*);
template<> ::pblczero::OnnxModel* Arena::CreateMaybeMessage<::pblczero::OnnxModel>(Arena*);
template<> ::pblczero::TrainingParams* Arena::CreateMaybeMessage<::pblczero::TrainingParams>(Arena*);
template<> ::pblczero::Weights* Arena::CreateMaybeMessage<::pblczero::Weights>(Arena*);
template<> ::pblczero::Weights_ConvBlock* Arena::CreateMaybeMessage<::pblczero::Weights_ConvBlock>(Arena*);
template<> ::pblczero::Weights_Layer* Arena::CreateMaybeMessage<::pblczero::Weights_Layer>(Arena*);
template<> ::pblczero::Weights_Residual* Arena::CreateMaybeMessage<::pblczero::Weights_Residual>(Arena*);
template<> ::pblczero::Weights_SEunit* Arena::CreateMaybeMessage<::pblczero::Weights_SEunit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pblczero {

enum NetworkFormat_InputFormat : int {
  NetworkFormat_InputFormat_INPUT_UNKNOWN = 0,
  NetworkFormat_InputFormat_INPUT_CLASSICAL_112_PLANE = 1,
  NetworkFormat_InputFormat_INPUT_112_WITH_CASTLING_PLANE = 2,
  NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION = 3,
  NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION_HECTOPLIES = 4,
  NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION_HECTOPLIES_ARMAGEDDON = 132,
  NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION_V2 = 5,
  NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION_V2_ARMAGEDDON = 133
};
bool NetworkFormat_InputFormat_IsValid(int value);
constexpr NetworkFormat_InputFormat NetworkFormat_InputFormat_InputFormat_MIN = NetworkFormat_InputFormat_INPUT_UNKNOWN;
constexpr NetworkFormat_InputFormat NetworkFormat_InputFormat_InputFormat_MAX = NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION_V2_ARMAGEDDON;
constexpr int NetworkFormat_InputFormat_InputFormat_ARRAYSIZE = NetworkFormat_InputFormat_InputFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_InputFormat_descriptor();
template<typename T>
inline const std::string& NetworkFormat_InputFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkFormat_InputFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkFormat_InputFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkFormat_InputFormat_descriptor(), enum_t_value);
}
inline bool NetworkFormat_InputFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkFormat_InputFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkFormat_InputFormat>(
    NetworkFormat_InputFormat_descriptor(), name, value);
}
enum NetworkFormat_OutputFormat : int {
  NetworkFormat_OutputFormat_OUTPUT_UNKNOWN = 0,
  NetworkFormat_OutputFormat_OUTPUT_CLASSICAL = 1,
  NetworkFormat_OutputFormat_OUTPUT_WDL = 2
};
bool NetworkFormat_OutputFormat_IsValid(int value);
constexpr NetworkFormat_OutputFormat NetworkFormat_OutputFormat_OutputFormat_MIN = NetworkFormat_OutputFormat_OUTPUT_UNKNOWN;
constexpr NetworkFormat_OutputFormat NetworkFormat_OutputFormat_OutputFormat_MAX = NetworkFormat_OutputFormat_OUTPUT_WDL;
constexpr int NetworkFormat_OutputFormat_OutputFormat_ARRAYSIZE = NetworkFormat_OutputFormat_OutputFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_OutputFormat_descriptor();
template<typename T>
inline const std::string& NetworkFormat_OutputFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkFormat_OutputFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkFormat_OutputFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkFormat_OutputFormat_descriptor(), enum_t_value);
}
inline bool NetworkFormat_OutputFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkFormat_OutputFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkFormat_OutputFormat>(
    NetworkFormat_OutputFormat_descriptor(), name, value);
}
enum NetworkFormat_NetworkStructure : int {
  NetworkFormat_NetworkStructure_NETWORK_UNKNOWN = 0,
  NetworkFormat_NetworkStructure_NETWORK_CLASSICAL = 1,
  NetworkFormat_NetworkStructure_NETWORK_SE = 2,
  NetworkFormat_NetworkStructure_NETWORK_CLASSICAL_WITH_HEADFORMAT = 3,
  NetworkFormat_NetworkStructure_NETWORK_SE_WITH_HEADFORMAT = 4,
  NetworkFormat_NetworkStructure_NETWORK_ONNX = 5
};
bool NetworkFormat_NetworkStructure_IsValid(int value);
constexpr NetworkFormat_NetworkStructure NetworkFormat_NetworkStructure_NetworkStructure_MIN = NetworkFormat_NetworkStructure_NETWORK_UNKNOWN;
constexpr NetworkFormat_NetworkStructure NetworkFormat_NetworkStructure_NetworkStructure_MAX = NetworkFormat_NetworkStructure_NETWORK_ONNX;
constexpr int NetworkFormat_NetworkStructure_NetworkStructure_ARRAYSIZE = NetworkFormat_NetworkStructure_NetworkStructure_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_NetworkStructure_descriptor();
template<typename T>
inline const std::string& NetworkFormat_NetworkStructure_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkFormat_NetworkStructure>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkFormat_NetworkStructure_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkFormat_NetworkStructure_descriptor(), enum_t_value);
}
inline bool NetworkFormat_NetworkStructure_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkFormat_NetworkStructure* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkFormat_NetworkStructure>(
    NetworkFormat_NetworkStructure_descriptor(), name, value);
}
enum NetworkFormat_PolicyFormat : int {
  NetworkFormat_PolicyFormat_POLICY_UNKNOWN = 0,
  NetworkFormat_PolicyFormat_POLICY_CLASSICAL = 1,
  NetworkFormat_PolicyFormat_POLICY_CONVOLUTION = 2
};
bool NetworkFormat_PolicyFormat_IsValid(int value);
constexpr NetworkFormat_PolicyFormat NetworkFormat_PolicyFormat_PolicyFormat_MIN = NetworkFormat_PolicyFormat_POLICY_UNKNOWN;
constexpr NetworkFormat_PolicyFormat NetworkFormat_PolicyFormat_PolicyFormat_MAX = NetworkFormat_PolicyFormat_POLICY_CONVOLUTION;
constexpr int NetworkFormat_PolicyFormat_PolicyFormat_ARRAYSIZE = NetworkFormat_PolicyFormat_PolicyFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_PolicyFormat_descriptor();
template<typename T>
inline const std::string& NetworkFormat_PolicyFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkFormat_PolicyFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkFormat_PolicyFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkFormat_PolicyFormat_descriptor(), enum_t_value);
}
inline bool NetworkFormat_PolicyFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkFormat_PolicyFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkFormat_PolicyFormat>(
    NetworkFormat_PolicyFormat_descriptor(), name, value);
}
enum NetworkFormat_ValueFormat : int {
  NetworkFormat_ValueFormat_VALUE_UNKNOWN = 0,
  NetworkFormat_ValueFormat_VALUE_CLASSICAL = 1,
  NetworkFormat_ValueFormat_VALUE_WDL = 2,
  NetworkFormat_ValueFormat_VALUE_PARAM = 3
};
bool NetworkFormat_ValueFormat_IsValid(int value);
constexpr NetworkFormat_ValueFormat NetworkFormat_ValueFormat_ValueFormat_MIN = NetworkFormat_ValueFormat_VALUE_UNKNOWN;
constexpr NetworkFormat_ValueFormat NetworkFormat_ValueFormat_ValueFormat_MAX = NetworkFormat_ValueFormat_VALUE_PARAM;
constexpr int NetworkFormat_ValueFormat_ValueFormat_ARRAYSIZE = NetworkFormat_ValueFormat_ValueFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_ValueFormat_descriptor();
template<typename T>
inline const std::string& NetworkFormat_ValueFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkFormat_ValueFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkFormat_ValueFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkFormat_ValueFormat_descriptor(), enum_t_value);
}
inline bool NetworkFormat_ValueFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkFormat_ValueFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkFormat_ValueFormat>(
    NetworkFormat_ValueFormat_descriptor(), name, value);
}
enum NetworkFormat_MovesLeftFormat : int {
  NetworkFormat_MovesLeftFormat_MOVES_LEFT_NONE = 0,
  NetworkFormat_MovesLeftFormat_MOVES_LEFT_V1 = 1
};
bool NetworkFormat_MovesLeftFormat_IsValid(int value);
constexpr NetworkFormat_MovesLeftFormat NetworkFormat_MovesLeftFormat_MovesLeftFormat_MIN = NetworkFormat_MovesLeftFormat_MOVES_LEFT_NONE;
constexpr NetworkFormat_MovesLeftFormat NetworkFormat_MovesLeftFormat_MovesLeftFormat_MAX = NetworkFormat_MovesLeftFormat_MOVES_LEFT_V1;
constexpr int NetworkFormat_MovesLeftFormat_MovesLeftFormat_ARRAYSIZE = NetworkFormat_MovesLeftFormat_MovesLeftFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_MovesLeftFormat_descriptor();
template<typename T>
inline const std::string& NetworkFormat_MovesLeftFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkFormat_MovesLeftFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkFormat_MovesLeftFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkFormat_MovesLeftFormat_descriptor(), enum_t_value);
}
inline bool NetworkFormat_MovesLeftFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkFormat_MovesLeftFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkFormat_MovesLeftFormat>(
    NetworkFormat_MovesLeftFormat_descriptor(), name, value);
}
enum Format_Encoding : int {
  Format_Encoding_UNKNOWN = 0,
  Format_Encoding_LINEAR16 = 1
};
bool Format_Encoding_IsValid(int value);
constexpr Format_Encoding Format_Encoding_Encoding_MIN = Format_Encoding_UNKNOWN;
constexpr Format_Encoding Format_Encoding_Encoding_MAX = Format_Encoding_LINEAR16;
constexpr int Format_Encoding_Encoding_ARRAYSIZE = Format_Encoding_Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Format_Encoding_descriptor();
template<typename T>
inline const std::string& Format_Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Format_Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Format_Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Format_Encoding_descriptor(), enum_t_value);
}
inline bool Format_Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Format_Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Format_Encoding>(
    Format_Encoding_descriptor(), name, value);
}
enum OnnxModel_DataType : int {
  OnnxModel_DataType_UNKNOWN_DATATYPE = 0,
  OnnxModel_DataType_FLOAT = 1,
  OnnxModel_DataType_FLOAT16 = 10,
  OnnxModel_DataType_BFLOAT16 = 16
};
bool OnnxModel_DataType_IsValid(int value);
constexpr OnnxModel_DataType OnnxModel_DataType_DataType_MIN = OnnxModel_DataType_UNKNOWN_DATATYPE;
constexpr OnnxModel_DataType OnnxModel_DataType_DataType_MAX = OnnxModel_DataType_BFLOAT16;
constexpr int OnnxModel_DataType_DataType_ARRAYSIZE = OnnxModel_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OnnxModel_DataType_descriptor();
template<typename T>
inline const std::string& OnnxModel_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OnnxModel_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OnnxModel_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OnnxModel_DataType_descriptor(), enum_t_value);
}
inline bool OnnxModel_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OnnxModel_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OnnxModel_DataType>(
    OnnxModel_DataType_descriptor(), name, value);
}
// ===================================================================

class EngineVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.EngineVersion) */ {
 public:
  inline EngineVersion() : EngineVersion(nullptr) {}
  ~EngineVersion() override;
  explicit constexpr EngineVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EngineVersion(const EngineVersion& from);
  EngineVersion(EngineVersion&& from) noexcept
    : EngineVersion() {
    *this = ::std::move(from);
  }

  inline EngineVersion& operator=(const EngineVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineVersion& operator=(EngineVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EngineVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const EngineVersion* internal_default_instance() {
    return reinterpret_cast<const EngineVersion*>(
               &_EngineVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EngineVersion& a, EngineVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EngineVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EngineVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EngineVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EngineVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.EngineVersion";
  }
  protected:
  explicit EngineVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // optional uint32 major = 1;
  bool has_major() const;
  private:
  bool _internal_has_major() const;
  public:
  void clear_major();
  uint32_t major() const;
  void set_major(uint32_t value);
  private:
  uint32_t _internal_major() const;
  void _internal_set_major(uint32_t value);
  public:

  // optional uint32 minor = 2;
  bool has_minor() const;
  private:
  bool _internal_has_minor() const;
  public:
  void clear_minor();
  uint32_t minor() const;
  void set_minor(uint32_t value);
  private:
  uint32_t _internal_minor() const;
  void _internal_set_minor(uint32_t value);
  public:

  // optional uint32 patch = 3;
  bool has_patch() const;
  private:
  bool _internal_has_patch() const;
  public:
  void clear_patch();
  uint32_t patch() const;
  void set_patch(uint32_t value);
  private:
  uint32_t _internal_patch() const;
  void _internal_set_patch(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pblczero.EngineVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t major_;
  uint32_t minor_;
  uint32_t patch_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class Weights_Layer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.Weights.Layer) */ {
 public:
  inline Weights_Layer() : Weights_Layer(nullptr) {}
  ~Weights_Layer() override;
  explicit constexpr Weights_Layer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Weights_Layer(const Weights_Layer& from);
  Weights_Layer(Weights_Layer&& from) noexcept
    : Weights_Layer() {
    *this = ::std::move(from);
  }

  inline Weights_Layer& operator=(const Weights_Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weights_Layer& operator=(Weights_Layer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weights_Layer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weights_Layer* internal_default_instance() {
    return reinterpret_cast<const Weights_Layer*>(
               &_Weights_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Weights_Layer& a, Weights_Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(Weights_Layer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weights_Layer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weights_Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weights_Layer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Weights_Layer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Weights_Layer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weights_Layer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.Weights.Layer";
  }
  protected:
  explicit Weights_Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kMinValFieldNumber = 1,
    kMaxValFieldNumber = 2,
  };
  // optional bytes params = 3;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const std::string& params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_params(ArgT0&& arg0, ArgT... args);
  std::string* mutable_params();
  PROTOBUF_NODISCARD std::string* release_params();
  void set_allocated_params(std::string* params);
  private:
  const std::string& _internal_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_params(const std::string& value);
  std::string* _internal_mutable_params();
  public:

  // optional float min_val = 1;
  bool has_min_val() const;
  private:
  bool _internal_has_min_val() const;
  public:
  void clear_min_val();
  float min_val() const;
  void set_min_val(float value);
  private:
  float _internal_min_val() const;
  void _internal_set_min_val(float value);
  public:

  // optional float max_val = 2;
  bool has_max_val() const;
  private:
  bool _internal_has_max_val() const;
  public:
  void clear_max_val();
  float max_val() const;
  void set_max_val(float value);
  private:
  float _internal_max_val() const;
  void _internal_set_max_val(float value);
  public:

  // @@protoc_insertion_point(class_scope:pblczero.Weights.Layer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr params_;
  float min_val_;
  float max_val_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class Weights_ConvBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.Weights.ConvBlock) */ {
 public:
  inline Weights_ConvBlock() : Weights_ConvBlock(nullptr) {}
  ~Weights_ConvBlock() override;
  explicit constexpr Weights_ConvBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Weights_ConvBlock(const Weights_ConvBlock& from);
  Weights_ConvBlock(Weights_ConvBlock&& from) noexcept
    : Weights_ConvBlock() {
    *this = ::std::move(from);
  }

  inline Weights_ConvBlock& operator=(const Weights_ConvBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weights_ConvBlock& operator=(Weights_ConvBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weights_ConvBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weights_ConvBlock* internal_default_instance() {
    return reinterpret_cast<const Weights_ConvBlock*>(
               &_Weights_ConvBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Weights_ConvBlock& a, Weights_ConvBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(Weights_ConvBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weights_ConvBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weights_ConvBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weights_ConvBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Weights_ConvBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Weights_ConvBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weights_ConvBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.Weights.ConvBlock";
  }
  protected:
  explicit Weights_ConvBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 1,
    kBiasesFieldNumber = 2,
    kBnMeansFieldNumber = 3,
    kBnStddivsFieldNumber = 4,
    kBnGammasFieldNumber = 5,
    kBnBetasFieldNumber = 6,
  };
  // optional .pblczero.Weights.Layer weights = 1;
  bool has_weights() const;
  private:
  bool _internal_has_weights() const;
  public:
  void clear_weights();
  const ::pblczero::Weights_Layer& weights() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_weights();
  ::pblczero::Weights_Layer* mutable_weights();
  void set_allocated_weights(::pblczero::Weights_Layer* weights);
  private:
  const ::pblczero::Weights_Layer& _internal_weights() const;
  ::pblczero::Weights_Layer* _internal_mutable_weights();
  public:
  void unsafe_arena_set_allocated_weights(
      ::pblczero::Weights_Layer* weights);
  ::pblczero::Weights_Layer* unsafe_arena_release_weights();

  // optional .pblczero.Weights.Layer biases = 2;
  bool has_biases() const;
  private:
  bool _internal_has_biases() const;
  public:
  void clear_biases();
  const ::pblczero::Weights_Layer& biases() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_biases();
  ::pblczero::Weights_Layer* mutable_biases();
  void set_allocated_biases(::pblczero::Weights_Layer* biases);
  private:
  const ::pblczero::Weights_Layer& _internal_biases() const;
  ::pblczero::Weights_Layer* _internal_mutable_biases();
  public:
  void unsafe_arena_set_allocated_biases(
      ::pblczero::Weights_Layer* biases);
  ::pblczero::Weights_Layer* unsafe_arena_release_biases();

  // optional .pblczero.Weights.Layer bn_means = 3;
  bool has_bn_means() const;
  private:
  bool _internal_has_bn_means() const;
  public:
  void clear_bn_means();
  const ::pblczero::Weights_Layer& bn_means() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_bn_means();
  ::pblczero::Weights_Layer* mutable_bn_means();
  void set_allocated_bn_means(::pblczero::Weights_Layer* bn_means);
  private:
  const ::pblczero::Weights_Layer& _internal_bn_means() const;
  ::pblczero::Weights_Layer* _internal_mutable_bn_means();
  public:
  void unsafe_arena_set_allocated_bn_means(
      ::pblczero::Weights_Layer* bn_means);
  ::pblczero::Weights_Layer* unsafe_arena_release_bn_means();

  // optional .pblczero.Weights.Layer bn_stddivs = 4;
  bool has_bn_stddivs() const;
  private:
  bool _internal_has_bn_stddivs() const;
  public:
  void clear_bn_stddivs();
  const ::pblczero::Weights_Layer& bn_stddivs() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_bn_stddivs();
  ::pblczero::Weights_Layer* mutable_bn_stddivs();
  void set_allocated_bn_stddivs(::pblczero::Weights_Layer* bn_stddivs);
  private:
  const ::pblczero::Weights_Layer& _internal_bn_stddivs() const;
  ::pblczero::Weights_Layer* _internal_mutable_bn_stddivs();
  public:
  void unsafe_arena_set_allocated_bn_stddivs(
      ::pblczero::Weights_Layer* bn_stddivs);
  ::pblczero::Weights_Layer* unsafe_arena_release_bn_stddivs();

  // optional .pblczero.Weights.Layer bn_gammas = 5;
  bool has_bn_gammas() const;
  private:
  bool _internal_has_bn_gammas() const;
  public:
  void clear_bn_gammas();
  const ::pblczero::Weights_Layer& bn_gammas() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_bn_gammas();
  ::pblczero::Weights_Layer* mutable_bn_gammas();
  void set_allocated_bn_gammas(::pblczero::Weights_Layer* bn_gammas);
  private:
  const ::pblczero::Weights_Layer& _internal_bn_gammas() const;
  ::pblczero::Weights_Layer* _internal_mutable_bn_gammas();
  public:
  void unsafe_arena_set_allocated_bn_gammas(
      ::pblczero::Weights_Layer* bn_gammas);
  ::pblczero::Weights_Layer* unsafe_arena_release_bn_gammas();

  // optional .pblczero.Weights.Layer bn_betas = 6;
  bool has_bn_betas() const;
  private:
  bool _internal_has_bn_betas() const;
  public:
  void clear_bn_betas();
  const ::pblczero::Weights_Layer& bn_betas() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_bn_betas();
  ::pblczero::Weights_Layer* mutable_bn_betas();
  void set_allocated_bn_betas(::pblczero::Weights_Layer* bn_betas);
  private:
  const ::pblczero::Weights_Layer& _internal_bn_betas() const;
  ::pblczero::Weights_Layer* _internal_mutable_bn_betas();
  public:
  void unsafe_arena_set_allocated_bn_betas(
      ::pblczero::Weights_Layer* bn_betas);
  ::pblczero::Weights_Layer* unsafe_arena_release_bn_betas();

  // @@protoc_insertion_point(class_scope:pblczero.Weights.ConvBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pblczero::Weights_Layer* weights_;
  ::pblczero::Weights_Layer* biases_;
  ::pblczero::Weights_Layer* bn_means_;
  ::pblczero::Weights_Layer* bn_stddivs_;
  ::pblczero::Weights_Layer* bn_gammas_;
  ::pblczero::Weights_Layer* bn_betas_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class Weights_SEunit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.Weights.SEunit) */ {
 public:
  inline Weights_SEunit() : Weights_SEunit(nullptr) {}
  ~Weights_SEunit() override;
  explicit constexpr Weights_SEunit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Weights_SEunit(const Weights_SEunit& from);
  Weights_SEunit(Weights_SEunit&& from) noexcept
    : Weights_SEunit() {
    *this = ::std::move(from);
  }

  inline Weights_SEunit& operator=(const Weights_SEunit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weights_SEunit& operator=(Weights_SEunit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weights_SEunit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weights_SEunit* internal_default_instance() {
    return reinterpret_cast<const Weights_SEunit*>(
               &_Weights_SEunit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Weights_SEunit& a, Weights_SEunit& b) {
    a.Swap(&b);
  }
  inline void Swap(Weights_SEunit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weights_SEunit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weights_SEunit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weights_SEunit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Weights_SEunit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Weights_SEunit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weights_SEunit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.Weights.SEunit";
  }
  protected:
  explicit Weights_SEunit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kW1FieldNumber = 1,
    kB1FieldNumber = 2,
    kW2FieldNumber = 3,
    kB2FieldNumber = 4,
  };
  // optional .pblczero.Weights.Layer w1 = 1;
  bool has_w1() const;
  private:
  bool _internal_has_w1() const;
  public:
  void clear_w1();
  const ::pblczero::Weights_Layer& w1() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_w1();
  ::pblczero::Weights_Layer* mutable_w1();
  void set_allocated_w1(::pblczero::Weights_Layer* w1);
  private:
  const ::pblczero::Weights_Layer& _internal_w1() const;
  ::pblczero::Weights_Layer* _internal_mutable_w1();
  public:
  void unsafe_arena_set_allocated_w1(
      ::pblczero::Weights_Layer* w1);
  ::pblczero::Weights_Layer* unsafe_arena_release_w1();

  // optional .pblczero.Weights.Layer b1 = 2;
  bool has_b1() const;
  private:
  bool _internal_has_b1() const;
  public:
  void clear_b1();
  const ::pblczero::Weights_Layer& b1() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_b1();
  ::pblczero::Weights_Layer* mutable_b1();
  void set_allocated_b1(::pblczero::Weights_Layer* b1);
  private:
  const ::pblczero::Weights_Layer& _internal_b1() const;
  ::pblczero::Weights_Layer* _internal_mutable_b1();
  public:
  void unsafe_arena_set_allocated_b1(
      ::pblczero::Weights_Layer* b1);
  ::pblczero::Weights_Layer* unsafe_arena_release_b1();

  // optional .pblczero.Weights.Layer w2 = 3;
  bool has_w2() const;
  private:
  bool _internal_has_w2() const;
  public:
  void clear_w2();
  const ::pblczero::Weights_Layer& w2() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_w2();
  ::pblczero::Weights_Layer* mutable_w2();
  void set_allocated_w2(::pblczero::Weights_Layer* w2);
  private:
  const ::pblczero::Weights_Layer& _internal_w2() const;
  ::pblczero::Weights_Layer* _internal_mutable_w2();
  public:
  void unsafe_arena_set_allocated_w2(
      ::pblczero::Weights_Layer* w2);
  ::pblczero::Weights_Layer* unsafe_arena_release_w2();

  // optional .pblczero.Weights.Layer b2 = 4;
  bool has_b2() const;
  private:
  bool _internal_has_b2() const;
  public:
  void clear_b2();
  const ::pblczero::Weights_Layer& b2() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_b2();
  ::pblczero::Weights_Layer* mutable_b2();
  void set_allocated_b2(::pblczero::Weights_Layer* b2);
  private:
  const ::pblczero::Weights_Layer& _internal_b2() const;
  ::pblczero::Weights_Layer* _internal_mutable_b2();
  public:
  void unsafe_arena_set_allocated_b2(
      ::pblczero::Weights_Layer* b2);
  ::pblczero::Weights_Layer* unsafe_arena_release_b2();

  // @@protoc_insertion_point(class_scope:pblczero.Weights.SEunit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pblczero::Weights_Layer* w1_;
  ::pblczero::Weights_Layer* b1_;
  ::pblczero::Weights_Layer* w2_;
  ::pblczero::Weights_Layer* b2_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class Weights_Residual final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.Weights.Residual) */ {
 public:
  inline Weights_Residual() : Weights_Residual(nullptr) {}
  ~Weights_Residual() override;
  explicit constexpr Weights_Residual(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Weights_Residual(const Weights_Residual& from);
  Weights_Residual(Weights_Residual&& from) noexcept
    : Weights_Residual() {
    *this = ::std::move(from);
  }

  inline Weights_Residual& operator=(const Weights_Residual& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weights_Residual& operator=(Weights_Residual&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weights_Residual& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weights_Residual* internal_default_instance() {
    return reinterpret_cast<const Weights_Residual*>(
               &_Weights_Residual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Weights_Residual& a, Weights_Residual& b) {
    a.Swap(&b);
  }
  inline void Swap(Weights_Residual* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weights_Residual* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weights_Residual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weights_Residual>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Weights_Residual& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Weights_Residual& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weights_Residual* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.Weights.Residual";
  }
  protected:
  explicit Weights_Residual(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConv1FieldNumber = 1,
    kConv2FieldNumber = 2,
    kSeFieldNumber = 3,
  };
  // optional .pblczero.Weights.ConvBlock conv1 = 1;
  bool has_conv1() const;
  private:
  bool _internal_has_conv1() const;
  public:
  void clear_conv1();
  const ::pblczero::Weights_ConvBlock& conv1() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_ConvBlock* release_conv1();
  ::pblczero::Weights_ConvBlock* mutable_conv1();
  void set_allocated_conv1(::pblczero::Weights_ConvBlock* conv1);
  private:
  const ::pblczero::Weights_ConvBlock& _internal_conv1() const;
  ::pblczero::Weights_ConvBlock* _internal_mutable_conv1();
  public:
  void unsafe_arena_set_allocated_conv1(
      ::pblczero::Weights_ConvBlock* conv1);
  ::pblczero::Weights_ConvBlock* unsafe_arena_release_conv1();

  // optional .pblczero.Weights.ConvBlock conv2 = 2;
  bool has_conv2() const;
  private:
  bool _internal_has_conv2() const;
  public:
  void clear_conv2();
  const ::pblczero::Weights_ConvBlock& conv2() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_ConvBlock* release_conv2();
  ::pblczero::Weights_ConvBlock* mutable_conv2();
  void set_allocated_conv2(::pblczero::Weights_ConvBlock* conv2);
  private:
  const ::pblczero::Weights_ConvBlock& _internal_conv2() const;
  ::pblczero::Weights_ConvBlock* _internal_mutable_conv2();
  public:
  void unsafe_arena_set_allocated_conv2(
      ::pblczero::Weights_ConvBlock* conv2);
  ::pblczero::Weights_ConvBlock* unsafe_arena_release_conv2();

  // optional .pblczero.Weights.SEunit se = 3;
  bool has_se() const;
  private:
  bool _internal_has_se() const;
  public:
  void clear_se();
  const ::pblczero::Weights_SEunit& se() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_SEunit* release_se();
  ::pblczero::Weights_SEunit* mutable_se();
  void set_allocated_se(::pblczero::Weights_SEunit* se);
  private:
  const ::pblczero::Weights_SEunit& _internal_se() const;
  ::pblczero::Weights_SEunit* _internal_mutable_se();
  public:
  void unsafe_arena_set_allocated_se(
      ::pblczero::Weights_SEunit* se);
  ::pblczero::Weights_SEunit* unsafe_arena_release_se();

  // @@protoc_insertion_point(class_scope:pblczero.Weights.Residual)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pblczero::Weights_ConvBlock* conv1_;
  ::pblczero::Weights_ConvBlock* conv2_;
  ::pblczero::Weights_SEunit* se_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class Weights final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.Weights) */ {
 public:
  inline Weights() : Weights(nullptr) {}
  ~Weights() override;
  explicit constexpr Weights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Weights(const Weights& from);
  Weights(Weights&& from) noexcept
    : Weights() {
    *this = ::std::move(from);
  }

  inline Weights& operator=(const Weights& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weights& operator=(Weights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weights& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weights* internal_default_instance() {
    return reinterpret_cast<const Weights*>(
               &_Weights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Weights& a, Weights& b) {
    a.Swap(&b);
  }
  inline void Swap(Weights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Weights& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Weights& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weights* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.Weights";
  }
  protected:
  explicit Weights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Weights_Layer Layer;
  typedef Weights_ConvBlock ConvBlock;
  typedef Weights_SEunit SEunit;
  typedef Weights_Residual Residual;

  // accessors -------------------------------------------------------

  enum : int {
    kResidualFieldNumber = 2,
    kInputFieldNumber = 1,
    kPolicyFieldNumber = 3,
    kIpPolWFieldNumber = 4,
    kIpPolBFieldNumber = 5,
    kValueFieldNumber = 6,
    kIp1ValWFieldNumber = 7,
    kIp1ValBFieldNumber = 8,
    kIp2ValWFieldNumber = 9,
    kIp2ValBFieldNumber = 10,
    kPolicy1FieldNumber = 11,
    kMovesLeftFieldNumber = 12,
    kIp1MovWFieldNumber = 13,
    kIp1MovBFieldNumber = 14,
    kIp2MovWFieldNumber = 15,
    kIp2MovBFieldNumber = 16,
  };
  // repeated .pblczero.Weights.Residual residual = 2;
  int residual_size() const;
  private:
  int _internal_residual_size() const;
  public:
  void clear_residual();
  ::pblczero::Weights_Residual* mutable_residual(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Weights_Residual >*
      mutable_residual();
  private:
  const ::pblczero::Weights_Residual& _internal_residual(int index) const;
  ::pblczero::Weights_Residual* _internal_add_residual();
  public:
  const ::pblczero::Weights_Residual& residual(int index) const;
  ::pblczero::Weights_Residual* add_residual();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Weights_Residual >&
      residual() const;

  // optional .pblczero.Weights.ConvBlock input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::pblczero::Weights_ConvBlock& input() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_ConvBlock* release_input();
  ::pblczero::Weights_ConvBlock* mutable_input();
  void set_allocated_input(::pblczero::Weights_ConvBlock* input);
  private:
  const ::pblczero::Weights_ConvBlock& _internal_input() const;
  ::pblczero::Weights_ConvBlock* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::pblczero::Weights_ConvBlock* input);
  ::pblczero::Weights_ConvBlock* unsafe_arena_release_input();

  // optional .pblczero.Weights.ConvBlock policy = 3;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const ::pblczero::Weights_ConvBlock& policy() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_ConvBlock* release_policy();
  ::pblczero::Weights_ConvBlock* mutable_policy();
  void set_allocated_policy(::pblczero::Weights_ConvBlock* policy);
  private:
  const ::pblczero::Weights_ConvBlock& _internal_policy() const;
  ::pblczero::Weights_ConvBlock* _internal_mutable_policy();
  public:
  void unsafe_arena_set_allocated_policy(
      ::pblczero::Weights_ConvBlock* policy);
  ::pblczero::Weights_ConvBlock* unsafe_arena_release_policy();

  // optional .pblczero.Weights.Layer ip_pol_w = 4;
  bool has_ip_pol_w() const;
  private:
  bool _internal_has_ip_pol_w() const;
  public:
  void clear_ip_pol_w();
  const ::pblczero::Weights_Layer& ip_pol_w() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_ip_pol_w();
  ::pblczero::Weights_Layer* mutable_ip_pol_w();
  void set_allocated_ip_pol_w(::pblczero::Weights_Layer* ip_pol_w);
  private:
  const ::pblczero::Weights_Layer& _internal_ip_pol_w() const;
  ::pblczero::Weights_Layer* _internal_mutable_ip_pol_w();
  public:
  void unsafe_arena_set_allocated_ip_pol_w(
      ::pblczero::Weights_Layer* ip_pol_w);
  ::pblczero::Weights_Layer* unsafe_arena_release_ip_pol_w();

  // optional .pblczero.Weights.Layer ip_pol_b = 5;
  bool has_ip_pol_b() const;
  private:
  bool _internal_has_ip_pol_b() const;
  public:
  void clear_ip_pol_b();
  const ::pblczero::Weights_Layer& ip_pol_b() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_ip_pol_b();
  ::pblczero::Weights_Layer* mutable_ip_pol_b();
  void set_allocated_ip_pol_b(::pblczero::Weights_Layer* ip_pol_b);
  private:
  const ::pblczero::Weights_Layer& _internal_ip_pol_b() const;
  ::pblczero::Weights_Layer* _internal_mutable_ip_pol_b();
  public:
  void unsafe_arena_set_allocated_ip_pol_b(
      ::pblczero::Weights_Layer* ip_pol_b);
  ::pblczero::Weights_Layer* unsafe_arena_release_ip_pol_b();

  // optional .pblczero.Weights.ConvBlock value = 6;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::pblczero::Weights_ConvBlock& value() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_ConvBlock* release_value();
  ::pblczero::Weights_ConvBlock* mutable_value();
  void set_allocated_value(::pblczero::Weights_ConvBlock* value);
  private:
  const ::pblczero::Weights_ConvBlock& _internal_value() const;
  ::pblczero::Weights_ConvBlock* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::pblczero::Weights_ConvBlock* value);
  ::pblczero::Weights_ConvBlock* unsafe_arena_release_value();

  // optional .pblczero.Weights.Layer ip1_val_w = 7;
  bool has_ip1_val_w() const;
  private:
  bool _internal_has_ip1_val_w() const;
  public:
  void clear_ip1_val_w();
  const ::pblczero::Weights_Layer& ip1_val_w() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_ip1_val_w();
  ::pblczero::Weights_Layer* mutable_ip1_val_w();
  void set_allocated_ip1_val_w(::pblczero::Weights_Layer* ip1_val_w);
  private:
  const ::pblczero::Weights_Layer& _internal_ip1_val_w() const;
  ::pblczero::Weights_Layer* _internal_mutable_ip1_val_w();
  public:
  void unsafe_arena_set_allocated_ip1_val_w(
      ::pblczero::Weights_Layer* ip1_val_w);
  ::pblczero::Weights_Layer* unsafe_arena_release_ip1_val_w();

  // optional .pblczero.Weights.Layer ip1_val_b = 8;
  bool has_ip1_val_b() const;
  private:
  bool _internal_has_ip1_val_b() const;
  public:
  void clear_ip1_val_b();
  const ::pblczero::Weights_Layer& ip1_val_b() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_ip1_val_b();
  ::pblczero::Weights_Layer* mutable_ip1_val_b();
  void set_allocated_ip1_val_b(::pblczero::Weights_Layer* ip1_val_b);
  private:
  const ::pblczero::Weights_Layer& _internal_ip1_val_b() const;
  ::pblczero::Weights_Layer* _internal_mutable_ip1_val_b();
  public:
  void unsafe_arena_set_allocated_ip1_val_b(
      ::pblczero::Weights_Layer* ip1_val_b);
  ::pblczero::Weights_Layer* unsafe_arena_release_ip1_val_b();

  // optional .pblczero.Weights.Layer ip2_val_w = 9;
  bool has_ip2_val_w() const;
  private:
  bool _internal_has_ip2_val_w() const;
  public:
  void clear_ip2_val_w();
  const ::pblczero::Weights_Layer& ip2_val_w() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_ip2_val_w();
  ::pblczero::Weights_Layer* mutable_ip2_val_w();
  void set_allocated_ip2_val_w(::pblczero::Weights_Layer* ip2_val_w);
  private:
  const ::pblczero::Weights_Layer& _internal_ip2_val_w() const;
  ::pblczero::Weights_Layer* _internal_mutable_ip2_val_w();
  public:
  void unsafe_arena_set_allocated_ip2_val_w(
      ::pblczero::Weights_Layer* ip2_val_w);
  ::pblczero::Weights_Layer* unsafe_arena_release_ip2_val_w();

  // optional .pblczero.Weights.Layer ip2_val_b = 10;
  bool has_ip2_val_b() const;
  private:
  bool _internal_has_ip2_val_b() const;
  public:
  void clear_ip2_val_b();
  const ::pblczero::Weights_Layer& ip2_val_b() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_ip2_val_b();
  ::pblczero::Weights_Layer* mutable_ip2_val_b();
  void set_allocated_ip2_val_b(::pblczero::Weights_Layer* ip2_val_b);
  private:
  const ::pblczero::Weights_Layer& _internal_ip2_val_b() const;
  ::pblczero::Weights_Layer* _internal_mutable_ip2_val_b();
  public:
  void unsafe_arena_set_allocated_ip2_val_b(
      ::pblczero::Weights_Layer* ip2_val_b);
  ::pblczero::Weights_Layer* unsafe_arena_release_ip2_val_b();

  // optional .pblczero.Weights.ConvBlock policy1 = 11;
  bool has_policy1() const;
  private:
  bool _internal_has_policy1() const;
  public:
  void clear_policy1();
  const ::pblczero::Weights_ConvBlock& policy1() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_ConvBlock* release_policy1();
  ::pblczero::Weights_ConvBlock* mutable_policy1();
  void set_allocated_policy1(::pblczero::Weights_ConvBlock* policy1);
  private:
  const ::pblczero::Weights_ConvBlock& _internal_policy1() const;
  ::pblczero::Weights_ConvBlock* _internal_mutable_policy1();
  public:
  void unsafe_arena_set_allocated_policy1(
      ::pblczero::Weights_ConvBlock* policy1);
  ::pblczero::Weights_ConvBlock* unsafe_arena_release_policy1();

  // optional .pblczero.Weights.ConvBlock moves_left = 12;
  bool has_moves_left() const;
  private:
  bool _internal_has_moves_left() const;
  public:
  void clear_moves_left();
  const ::pblczero::Weights_ConvBlock& moves_left() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_ConvBlock* release_moves_left();
  ::pblczero::Weights_ConvBlock* mutable_moves_left();
  void set_allocated_moves_left(::pblczero::Weights_ConvBlock* moves_left);
  private:
  const ::pblczero::Weights_ConvBlock& _internal_moves_left() const;
  ::pblczero::Weights_ConvBlock* _internal_mutable_moves_left();
  public:
  void unsafe_arena_set_allocated_moves_left(
      ::pblczero::Weights_ConvBlock* moves_left);
  ::pblczero::Weights_ConvBlock* unsafe_arena_release_moves_left();

  // optional .pblczero.Weights.Layer ip1_mov_w = 13;
  bool has_ip1_mov_w() const;
  private:
  bool _internal_has_ip1_mov_w() const;
  public:
  void clear_ip1_mov_w();
  const ::pblczero::Weights_Layer& ip1_mov_w() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_ip1_mov_w();
  ::pblczero::Weights_Layer* mutable_ip1_mov_w();
  void set_allocated_ip1_mov_w(::pblczero::Weights_Layer* ip1_mov_w);
  private:
  const ::pblczero::Weights_Layer& _internal_ip1_mov_w() const;
  ::pblczero::Weights_Layer* _internal_mutable_ip1_mov_w();
  public:
  void unsafe_arena_set_allocated_ip1_mov_w(
      ::pblczero::Weights_Layer* ip1_mov_w);
  ::pblczero::Weights_Layer* unsafe_arena_release_ip1_mov_w();

  // optional .pblczero.Weights.Layer ip1_mov_b = 14;
  bool has_ip1_mov_b() const;
  private:
  bool _internal_has_ip1_mov_b() const;
  public:
  void clear_ip1_mov_b();
  const ::pblczero::Weights_Layer& ip1_mov_b() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_ip1_mov_b();
  ::pblczero::Weights_Layer* mutable_ip1_mov_b();
  void set_allocated_ip1_mov_b(::pblczero::Weights_Layer* ip1_mov_b);
  private:
  const ::pblczero::Weights_Layer& _internal_ip1_mov_b() const;
  ::pblczero::Weights_Layer* _internal_mutable_ip1_mov_b();
  public:
  void unsafe_arena_set_allocated_ip1_mov_b(
      ::pblczero::Weights_Layer* ip1_mov_b);
  ::pblczero::Weights_Layer* unsafe_arena_release_ip1_mov_b();

  // optional .pblczero.Weights.Layer ip2_mov_w = 15;
  bool has_ip2_mov_w() const;
  private:
  bool _internal_has_ip2_mov_w() const;
  public:
  void clear_ip2_mov_w();
  const ::pblczero::Weights_Layer& ip2_mov_w() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_ip2_mov_w();
  ::pblczero::Weights_Layer* mutable_ip2_mov_w();
  void set_allocated_ip2_mov_w(::pblczero::Weights_Layer* ip2_mov_w);
  private:
  const ::pblczero::Weights_Layer& _internal_ip2_mov_w() const;
  ::pblczero::Weights_Layer* _internal_mutable_ip2_mov_w();
  public:
  void unsafe_arena_set_allocated_ip2_mov_w(
      ::pblczero::Weights_Layer* ip2_mov_w);
  ::pblczero::Weights_Layer* unsafe_arena_release_ip2_mov_w();

  // optional .pblczero.Weights.Layer ip2_mov_b = 16;
  bool has_ip2_mov_b() const;
  private:
  bool _internal_has_ip2_mov_b() const;
  public:
  void clear_ip2_mov_b();
  const ::pblczero::Weights_Layer& ip2_mov_b() const;
  PROTOBUF_NODISCARD ::pblczero::Weights_Layer* release_ip2_mov_b();
  ::pblczero::Weights_Layer* mutable_ip2_mov_b();
  void set_allocated_ip2_mov_b(::pblczero::Weights_Layer* ip2_mov_b);
  private:
  const ::pblczero::Weights_Layer& _internal_ip2_mov_b() const;
  ::pblczero::Weights_Layer* _internal_mutable_ip2_mov_b();
  public:
  void unsafe_arena_set_allocated_ip2_mov_b(
      ::pblczero::Weights_Layer* ip2_mov_b);
  ::pblczero::Weights_Layer* unsafe_arena_release_ip2_mov_b();

  // @@protoc_insertion_point(class_scope:pblczero.Weights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Weights_Residual > residual_;
  ::pblczero::Weights_ConvBlock* input_;
  ::pblczero::Weights_ConvBlock* policy_;
  ::pblczero::Weights_Layer* ip_pol_w_;
  ::pblczero::Weights_Layer* ip_pol_b_;
  ::pblczero::Weights_ConvBlock* value_;
  ::pblczero::Weights_Layer* ip1_val_w_;
  ::pblczero::Weights_Layer* ip1_val_b_;
  ::pblczero::Weights_Layer* ip2_val_w_;
  ::pblczero::Weights_Layer* ip2_val_b_;
  ::pblczero::Weights_ConvBlock* policy1_;
  ::pblczero::Weights_ConvBlock* moves_left_;
  ::pblczero::Weights_Layer* ip1_mov_w_;
  ::pblczero::Weights_Layer* ip1_mov_b_;
  ::pblczero::Weights_Layer* ip2_mov_w_;
  ::pblczero::Weights_Layer* ip2_mov_b_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class TrainingParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.TrainingParams) */ {
 public:
  inline TrainingParams() : TrainingParams(nullptr) {}
  ~TrainingParams() override;
  explicit constexpr TrainingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainingParams(const TrainingParams& from);
  TrainingParams(TrainingParams&& from) noexcept
    : TrainingParams() {
    *this = ::std::move(from);
  }

  inline TrainingParams& operator=(const TrainingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainingParams& operator=(TrainingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainingParams* internal_default_instance() {
    return reinterpret_cast<const TrainingParams*>(
               &_TrainingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrainingParams& a, TrainingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainingParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrainingParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrainingParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.TrainingParams";
  }
  protected:
  explicit TrainingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLc0ParamsFieldNumber = 6,
    kTrainingStepsFieldNumber = 1,
    kLearningRateFieldNumber = 2,
    kMseLossFieldNumber = 3,
    kPolicyLossFieldNumber = 4,
    kAccuracyFieldNumber = 5,
  };
  // optional string lc0_params = 6;
  bool has_lc0_params() const;
  private:
  bool _internal_has_lc0_params() const;
  public:
  void clear_lc0_params();
  const std::string& lc0_params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lc0_params(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lc0_params();
  PROTOBUF_NODISCARD std::string* release_lc0_params();
  void set_allocated_lc0_params(std::string* lc0_params);
  private:
  const std::string& _internal_lc0_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lc0_params(const std::string& value);
  std::string* _internal_mutable_lc0_params();
  public:

  // optional uint32 training_steps = 1;
  bool has_training_steps() const;
  private:
  bool _internal_has_training_steps() const;
  public:
  void clear_training_steps();
  uint32_t training_steps() const;
  void set_training_steps(uint32_t value);
  private:
  uint32_t _internal_training_steps() const;
  void _internal_set_training_steps(uint32_t value);
  public:

  // optional float learning_rate = 2;
  bool has_learning_rate() const;
  private:
  bool _internal_has_learning_rate() const;
  public:
  void clear_learning_rate();
  float learning_rate() const;
  void set_learning_rate(float value);
  private:
  float _internal_learning_rate() const;
  void _internal_set_learning_rate(float value);
  public:

  // optional float mse_loss = 3;
  bool has_mse_loss() const;
  private:
  bool _internal_has_mse_loss() const;
  public:
  void clear_mse_loss();
  float mse_loss() const;
  void set_mse_loss(float value);
  private:
  float _internal_mse_loss() const;
  void _internal_set_mse_loss(float value);
  public:

  // optional float policy_loss = 4;
  bool has_policy_loss() const;
  private:
  bool _internal_has_policy_loss() const;
  public:
  void clear_policy_loss();
  float policy_loss() const;
  void set_policy_loss(float value);
  private:
  float _internal_policy_loss() const;
  void _internal_set_policy_loss(float value);
  public:

  // optional float accuracy = 5;
  bool has_accuracy() const;
  private:
  bool _internal_has_accuracy() const;
  public:
  void clear_accuracy();
  float accuracy() const;
  void set_accuracy(float value);
  private:
  float _internal_accuracy() const;
  void _internal_set_accuracy(float value);
  public:

  // @@protoc_insertion_point(class_scope:pblczero.TrainingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lc0_params_;
  uint32_t training_steps_;
  float learning_rate_;
  float mse_loss_;
  float policy_loss_;
  float accuracy_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class NetworkFormat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.NetworkFormat) */ {
 public:
  inline NetworkFormat() : NetworkFormat(nullptr) {}
  ~NetworkFormat() override;
  explicit constexpr NetworkFormat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkFormat(const NetworkFormat& from);
  NetworkFormat(NetworkFormat&& from) noexcept
    : NetworkFormat() {
    *this = ::std::move(from);
  }

  inline NetworkFormat& operator=(const NetworkFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkFormat& operator=(NetworkFormat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkFormat& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkFormat* internal_default_instance() {
    return reinterpret_cast<const NetworkFormat*>(
               &_NetworkFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NetworkFormat& a, NetworkFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkFormat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkFormat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkFormat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetworkFormat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkFormat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.NetworkFormat";
  }
  protected:
  explicit NetworkFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetworkFormat_InputFormat InputFormat;
  static constexpr InputFormat INPUT_UNKNOWN =
    NetworkFormat_InputFormat_INPUT_UNKNOWN;
  static constexpr InputFormat INPUT_CLASSICAL_112_PLANE =
    NetworkFormat_InputFormat_INPUT_CLASSICAL_112_PLANE;
  static constexpr InputFormat INPUT_112_WITH_CASTLING_PLANE =
    NetworkFormat_InputFormat_INPUT_112_WITH_CASTLING_PLANE;
  static constexpr InputFormat INPUT_112_WITH_CANONICALIZATION =
    NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION;
  static constexpr InputFormat INPUT_112_WITH_CANONICALIZATION_HECTOPLIES =
    NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION_HECTOPLIES;
  static constexpr InputFormat INPUT_112_WITH_CANONICALIZATION_HECTOPLIES_ARMAGEDDON =
    NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION_HECTOPLIES_ARMAGEDDON;
  static constexpr InputFormat INPUT_112_WITH_CANONICALIZATION_V2 =
    NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION_V2;
  static constexpr InputFormat INPUT_112_WITH_CANONICALIZATION_V2_ARMAGEDDON =
    NetworkFormat_InputFormat_INPUT_112_WITH_CANONICALIZATION_V2_ARMAGEDDON;
  static inline bool InputFormat_IsValid(int value) {
    return NetworkFormat_InputFormat_IsValid(value);
  }
  static constexpr InputFormat InputFormat_MIN =
    NetworkFormat_InputFormat_InputFormat_MIN;
  static constexpr InputFormat InputFormat_MAX =
    NetworkFormat_InputFormat_InputFormat_MAX;
  static constexpr int InputFormat_ARRAYSIZE =
    NetworkFormat_InputFormat_InputFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InputFormat_descriptor() {
    return NetworkFormat_InputFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& InputFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InputFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InputFormat_Name.");
    return NetworkFormat_InputFormat_Name(enum_t_value);
  }
  static inline bool InputFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InputFormat* value) {
    return NetworkFormat_InputFormat_Parse(name, value);
  }

  typedef NetworkFormat_OutputFormat OutputFormat;
  static constexpr OutputFormat OUTPUT_UNKNOWN =
    NetworkFormat_OutputFormat_OUTPUT_UNKNOWN;
  static constexpr OutputFormat OUTPUT_CLASSICAL =
    NetworkFormat_OutputFormat_OUTPUT_CLASSICAL;
  static constexpr OutputFormat OUTPUT_WDL =
    NetworkFormat_OutputFormat_OUTPUT_WDL;
  static inline bool OutputFormat_IsValid(int value) {
    return NetworkFormat_OutputFormat_IsValid(value);
  }
  static constexpr OutputFormat OutputFormat_MIN =
    NetworkFormat_OutputFormat_OutputFormat_MIN;
  static constexpr OutputFormat OutputFormat_MAX =
    NetworkFormat_OutputFormat_OutputFormat_MAX;
  static constexpr int OutputFormat_ARRAYSIZE =
    NetworkFormat_OutputFormat_OutputFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OutputFormat_descriptor() {
    return NetworkFormat_OutputFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& OutputFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OutputFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OutputFormat_Name.");
    return NetworkFormat_OutputFormat_Name(enum_t_value);
  }
  static inline bool OutputFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OutputFormat* value) {
    return NetworkFormat_OutputFormat_Parse(name, value);
  }

  typedef NetworkFormat_NetworkStructure NetworkStructure;
  static constexpr NetworkStructure NETWORK_UNKNOWN =
    NetworkFormat_NetworkStructure_NETWORK_UNKNOWN;
  static constexpr NetworkStructure NETWORK_CLASSICAL =
    NetworkFormat_NetworkStructure_NETWORK_CLASSICAL;
  static constexpr NetworkStructure NETWORK_SE =
    NetworkFormat_NetworkStructure_NETWORK_SE;
  static constexpr NetworkStructure NETWORK_CLASSICAL_WITH_HEADFORMAT =
    NetworkFormat_NetworkStructure_NETWORK_CLASSICAL_WITH_HEADFORMAT;
  static constexpr NetworkStructure NETWORK_SE_WITH_HEADFORMAT =
    NetworkFormat_NetworkStructure_NETWORK_SE_WITH_HEADFORMAT;
  static constexpr NetworkStructure NETWORK_ONNX =
    NetworkFormat_NetworkStructure_NETWORK_ONNX;
  static inline bool NetworkStructure_IsValid(int value) {
    return NetworkFormat_NetworkStructure_IsValid(value);
  }
  static constexpr NetworkStructure NetworkStructure_MIN =
    NetworkFormat_NetworkStructure_NetworkStructure_MIN;
  static constexpr NetworkStructure NetworkStructure_MAX =
    NetworkFormat_NetworkStructure_NetworkStructure_MAX;
  static constexpr int NetworkStructure_ARRAYSIZE =
    NetworkFormat_NetworkStructure_NetworkStructure_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NetworkStructure_descriptor() {
    return NetworkFormat_NetworkStructure_descriptor();
  }
  template<typename T>
  static inline const std::string& NetworkStructure_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NetworkStructure>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NetworkStructure_Name.");
    return NetworkFormat_NetworkStructure_Name(enum_t_value);
  }
  static inline bool NetworkStructure_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NetworkStructure* value) {
    return NetworkFormat_NetworkStructure_Parse(name, value);
  }

  typedef NetworkFormat_PolicyFormat PolicyFormat;
  static constexpr PolicyFormat POLICY_UNKNOWN =
    NetworkFormat_PolicyFormat_POLICY_UNKNOWN;
  static constexpr PolicyFormat POLICY_CLASSICAL =
    NetworkFormat_PolicyFormat_POLICY_CLASSICAL;
  static constexpr PolicyFormat POLICY_CONVOLUTION =
    NetworkFormat_PolicyFormat_POLICY_CONVOLUTION;
  static inline bool PolicyFormat_IsValid(int value) {
    return NetworkFormat_PolicyFormat_IsValid(value);
  }
  static constexpr PolicyFormat PolicyFormat_MIN =
    NetworkFormat_PolicyFormat_PolicyFormat_MIN;
  static constexpr PolicyFormat PolicyFormat_MAX =
    NetworkFormat_PolicyFormat_PolicyFormat_MAX;
  static constexpr int PolicyFormat_ARRAYSIZE =
    NetworkFormat_PolicyFormat_PolicyFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PolicyFormat_descriptor() {
    return NetworkFormat_PolicyFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& PolicyFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PolicyFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PolicyFormat_Name.");
    return NetworkFormat_PolicyFormat_Name(enum_t_value);
  }
  static inline bool PolicyFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PolicyFormat* value) {
    return NetworkFormat_PolicyFormat_Parse(name, value);
  }

  typedef NetworkFormat_ValueFormat ValueFormat;
  static constexpr ValueFormat VALUE_UNKNOWN =
    NetworkFormat_ValueFormat_VALUE_UNKNOWN;
  static constexpr ValueFormat VALUE_CLASSICAL =
    NetworkFormat_ValueFormat_VALUE_CLASSICAL;
  static constexpr ValueFormat VALUE_WDL =
    NetworkFormat_ValueFormat_VALUE_WDL;
  static constexpr ValueFormat VALUE_PARAM =
    NetworkFormat_ValueFormat_VALUE_PARAM;
  static inline bool ValueFormat_IsValid(int value) {
    return NetworkFormat_ValueFormat_IsValid(value);
  }
  static constexpr ValueFormat ValueFormat_MIN =
    NetworkFormat_ValueFormat_ValueFormat_MIN;
  static constexpr ValueFormat ValueFormat_MAX =
    NetworkFormat_ValueFormat_ValueFormat_MAX;
  static constexpr int ValueFormat_ARRAYSIZE =
    NetworkFormat_ValueFormat_ValueFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueFormat_descriptor() {
    return NetworkFormat_ValueFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueFormat_Name.");
    return NetworkFormat_ValueFormat_Name(enum_t_value);
  }
  static inline bool ValueFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ValueFormat* value) {
    return NetworkFormat_ValueFormat_Parse(name, value);
  }

  typedef NetworkFormat_MovesLeftFormat MovesLeftFormat;
  static constexpr MovesLeftFormat MOVES_LEFT_NONE =
    NetworkFormat_MovesLeftFormat_MOVES_LEFT_NONE;
  static constexpr MovesLeftFormat MOVES_LEFT_V1 =
    NetworkFormat_MovesLeftFormat_MOVES_LEFT_V1;
  static inline bool MovesLeftFormat_IsValid(int value) {
    return NetworkFormat_MovesLeftFormat_IsValid(value);
  }
  static constexpr MovesLeftFormat MovesLeftFormat_MIN =
    NetworkFormat_MovesLeftFormat_MovesLeftFormat_MIN;
  static constexpr MovesLeftFormat MovesLeftFormat_MAX =
    NetworkFormat_MovesLeftFormat_MovesLeftFormat_MAX;
  static constexpr int MovesLeftFormat_ARRAYSIZE =
    NetworkFormat_MovesLeftFormat_MovesLeftFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MovesLeftFormat_descriptor() {
    return NetworkFormat_MovesLeftFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& MovesLeftFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MovesLeftFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MovesLeftFormat_Name.");
    return NetworkFormat_MovesLeftFormat_Name(enum_t_value);
  }
  static inline bool MovesLeftFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MovesLeftFormat* value) {
    return NetworkFormat_MovesLeftFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kOutputFieldNumber = 2,
    kNetworkFieldNumber = 3,
    kPolicyFieldNumber = 4,
    kValueFieldNumber = 5,
    kMovesLeftFieldNumber = 6,
  };
  // optional .pblczero.NetworkFormat.InputFormat input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  ::pblczero::NetworkFormat_InputFormat input() const;
  void set_input(::pblczero::NetworkFormat_InputFormat value);
  private:
  ::pblczero::NetworkFormat_InputFormat _internal_input() const;
  void _internal_set_input(::pblczero::NetworkFormat_InputFormat value);
  public:

  // optional .pblczero.NetworkFormat.OutputFormat output = 2;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  ::pblczero::NetworkFormat_OutputFormat output() const;
  void set_output(::pblczero::NetworkFormat_OutputFormat value);
  private:
  ::pblczero::NetworkFormat_OutputFormat _internal_output() const;
  void _internal_set_output(::pblczero::NetworkFormat_OutputFormat value);
  public:

  // optional .pblczero.NetworkFormat.NetworkStructure network = 3;
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  ::pblczero::NetworkFormat_NetworkStructure network() const;
  void set_network(::pblczero::NetworkFormat_NetworkStructure value);
  private:
  ::pblczero::NetworkFormat_NetworkStructure _internal_network() const;
  void _internal_set_network(::pblczero::NetworkFormat_NetworkStructure value);
  public:

  // optional .pblczero.NetworkFormat.PolicyFormat policy = 4;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  ::pblczero::NetworkFormat_PolicyFormat policy() const;
  void set_policy(::pblczero::NetworkFormat_PolicyFormat value);
  private:
  ::pblczero::NetworkFormat_PolicyFormat _internal_policy() const;
  void _internal_set_policy(::pblczero::NetworkFormat_PolicyFormat value);
  public:

  // optional .pblczero.NetworkFormat.ValueFormat value = 5;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::pblczero::NetworkFormat_ValueFormat value() const;
  void set_value(::pblczero::NetworkFormat_ValueFormat value);
  private:
  ::pblczero::NetworkFormat_ValueFormat _internal_value() const;
  void _internal_set_value(::pblczero::NetworkFormat_ValueFormat value);
  public:

  // optional .pblczero.NetworkFormat.MovesLeftFormat moves_left = 6;
  bool has_moves_left() const;
  private:
  bool _internal_has_moves_left() const;
  public:
  void clear_moves_left();
  ::pblczero::NetworkFormat_MovesLeftFormat moves_left() const;
  void set_moves_left(::pblczero::NetworkFormat_MovesLeftFormat value);
  private:
  ::pblczero::NetworkFormat_MovesLeftFormat _internal_moves_left() const;
  void _internal_set_moves_left(::pblczero::NetworkFormat_MovesLeftFormat value);
  public:

  // @@protoc_insertion_point(class_scope:pblczero.NetworkFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int input_;
  int output_;
  int network_;
  int policy_;
  int value_;
  int moves_left_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class Format final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.Format) */ {
 public:
  inline Format() : Format(nullptr) {}
  ~Format() override;
  explicit constexpr Format(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Format(const Format& from);
  Format(Format&& from) noexcept
    : Format() {
    *this = ::std::move(from);
  }

  inline Format& operator=(const Format& from) {
    CopyFrom(from);
    return *this;
  }
  inline Format& operator=(Format&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Format& default_instance() {
    return *internal_default_instance();
  }
  static inline const Format* internal_default_instance() {
    return reinterpret_cast<const Format*>(
               &_Format_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Format& a, Format& b) {
    a.Swap(&b);
  }
  inline void Swap(Format* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Format* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Format* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Format>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Format& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Format& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Format* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.Format";
  }
  protected:
  explicit Format(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Format_Encoding Encoding;
  static constexpr Encoding UNKNOWN =
    Format_Encoding_UNKNOWN;
  static constexpr Encoding LINEAR16 =
    Format_Encoding_LINEAR16;
  static inline bool Encoding_IsValid(int value) {
    return Format_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN =
    Format_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX =
    Format_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE =
    Format_Encoding_Encoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Encoding_descriptor() {
    return Format_Encoding_descriptor();
  }
  template<typename T>
  static inline const std::string& Encoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Encoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Encoding_Name.");
    return Format_Encoding_Name(enum_t_value);
  }
  static inline bool Encoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Encoding* value) {
    return Format_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkFormatFieldNumber = 2,
    kWeightsEncodingFieldNumber = 1,
  };
  // optional .pblczero.NetworkFormat network_format = 2;
  bool has_network_format() const;
  private:
  bool _internal_has_network_format() const;
  public:
  void clear_network_format();
  const ::pblczero::NetworkFormat& network_format() const;
  PROTOBUF_NODISCARD ::pblczero::NetworkFormat* release_network_format();
  ::pblczero::NetworkFormat* mutable_network_format();
  void set_allocated_network_format(::pblczero::NetworkFormat* network_format);
  private:
  const ::pblczero::NetworkFormat& _internal_network_format() const;
  ::pblczero::NetworkFormat* _internal_mutable_network_format();
  public:
  void unsafe_arena_set_allocated_network_format(
      ::pblczero::NetworkFormat* network_format);
  ::pblczero::NetworkFormat* unsafe_arena_release_network_format();

  // optional .pblczero.Format.Encoding weights_encoding = 1;
  bool has_weights_encoding() const;
  private:
  bool _internal_has_weights_encoding() const;
  public:
  void clear_weights_encoding();
  ::pblczero::Format_Encoding weights_encoding() const;
  void set_weights_encoding(::pblczero::Format_Encoding value);
  private:
  ::pblczero::Format_Encoding _internal_weights_encoding() const;
  void _internal_set_weights_encoding(::pblczero::Format_Encoding value);
  public:

  // @@protoc_insertion_point(class_scope:pblczero.Format)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pblczero::NetworkFormat* network_format_;
  int weights_encoding_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class OnnxModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.OnnxModel) */ {
 public:
  inline OnnxModel() : OnnxModel(nullptr) {}
  ~OnnxModel() override;
  explicit constexpr OnnxModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnnxModel(const OnnxModel& from);
  OnnxModel(OnnxModel&& from) noexcept
    : OnnxModel() {
    *this = ::std::move(from);
  }

  inline OnnxModel& operator=(const OnnxModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnnxModel& operator=(OnnxModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnnxModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnnxModel* internal_default_instance() {
    return reinterpret_cast<const OnnxModel*>(
               &_OnnxModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OnnxModel& a, OnnxModel& b) {
    a.Swap(&b);
  }
  inline void Swap(OnnxModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnnxModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnnxModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnnxModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnnxModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OnnxModel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnnxModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.OnnxModel";
  }
  protected:
  explicit OnnxModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OnnxModel_DataType DataType;
  static constexpr DataType UNKNOWN_DATATYPE =
    OnnxModel_DataType_UNKNOWN_DATATYPE;
  static constexpr DataType FLOAT =
    OnnxModel_DataType_FLOAT;
  static constexpr DataType FLOAT16 =
    OnnxModel_DataType_FLOAT16;
  static constexpr DataType BFLOAT16 =
    OnnxModel_DataType_BFLOAT16;
  static inline bool DataType_IsValid(int value) {
    return OnnxModel_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    OnnxModel_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    OnnxModel_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    OnnxModel_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return OnnxModel_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return OnnxModel_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return OnnxModel_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kInputPlanesFieldNumber = 3,
    kOutputValueFieldNumber = 4,
    kOutputWdlFieldNumber = 5,
    kOutputPolicyFieldNumber = 6,
    kOutputMlhFieldNumber = 7,
    kDataTypeFieldNumber = 2,
  };
  // optional bytes model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional string input_planes = 3;
  bool has_input_planes() const;
  private:
  bool _internal_has_input_planes() const;
  public:
  void clear_input_planes();
  const std::string& input_planes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_planes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_planes();
  PROTOBUF_NODISCARD std::string* release_input_planes();
  void set_allocated_input_planes(std::string* input_planes);
  private:
  const std::string& _internal_input_planes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_planes(const std::string& value);
  std::string* _internal_mutable_input_planes();
  public:

  // optional string output_value = 4;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  const std::string& output_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_value();
  PROTOBUF_NODISCARD std::string* release_output_value();
  void set_allocated_output_value(std::string* output_value);
  private:
  const std::string& _internal_output_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_value(const std::string& value);
  std::string* _internal_mutable_output_value();
  public:

  // optional string output_wdl = 5;
  bool has_output_wdl() const;
  private:
  bool _internal_has_output_wdl() const;
  public:
  void clear_output_wdl();
  const std::string& output_wdl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_wdl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_wdl();
  PROTOBUF_NODISCARD std::string* release_output_wdl();
  void set_allocated_output_wdl(std::string* output_wdl);
  private:
  const std::string& _internal_output_wdl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_wdl(const std::string& value);
  std::string* _internal_mutable_output_wdl();
  public:

  // optional string output_policy = 6;
  bool has_output_policy() const;
  private:
  bool _internal_has_output_policy() const;
  public:
  void clear_output_policy();
  const std::string& output_policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_policy();
  PROTOBUF_NODISCARD std::string* release_output_policy();
  void set_allocated_output_policy(std::string* output_policy);
  private:
  const std::string& _internal_output_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_policy(const std::string& value);
  std::string* _internal_mutable_output_policy();
  public:

  // optional string output_mlh = 7;
  bool has_output_mlh() const;
  private:
  bool _internal_has_output_mlh() const;
  public:
  void clear_output_mlh();
  const std::string& output_mlh() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_mlh(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_mlh();
  PROTOBUF_NODISCARD std::string* release_output_mlh();
  void set_allocated_output_mlh(std::string* output_mlh);
  private:
  const std::string& _internal_output_mlh() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_mlh(const std::string& value);
  std::string* _internal_mutable_output_mlh();
  public:

  // optional .pblczero.OnnxModel.DataType data_type = 2;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  ::pblczero::OnnxModel_DataType data_type() const;
  void set_data_type(::pblczero::OnnxModel_DataType value);
  private:
  ::pblczero::OnnxModel_DataType _internal_data_type() const;
  void _internal_set_data_type(::pblczero::OnnxModel_DataType value);
  public:

  // @@protoc_insertion_point(class_scope:pblczero.OnnxModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_planes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_wdl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_policy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_mlh_;
  int data_type_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class Net final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.Net) */ {
 public:
  inline Net() : Net(nullptr) {}
  ~Net() override;
  explicit constexpr Net(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Net(const Net& from);
  Net(Net&& from) noexcept
    : Net() {
    *this = ::std::move(from);
  }

  inline Net& operator=(const Net& from) {
    CopyFrom(from);
    return *this;
  }
  inline Net& operator=(Net&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Net& default_instance() {
    return *internal_default_instance();
  }
  static inline const Net* internal_default_instance() {
    return reinterpret_cast<const Net*>(
               &_Net_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Net& a, Net& b) {
    a.Swap(&b);
  }
  inline void Swap(Net* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Net* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Net* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Net>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Net& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Net& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Net* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.Net";
  }
  protected:
  explicit Net(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicenseFieldNumber = 2,
    kMinVersionFieldNumber = 3,
    kFormatFieldNumber = 4,
    kTrainingParamsFieldNumber = 5,
    kWeightsFieldNumber = 10,
    kOnnxModelFieldNumber = 11,
    kMagicFieldNumber = 1,
  };
  // optional string license = 2;
  bool has_license() const;
  private:
  bool _internal_has_license() const;
  public:
  void clear_license();
  const std::string& license() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_license(ArgT0&& arg0, ArgT... args);
  std::string* mutable_license();
  PROTOBUF_NODISCARD std::string* release_license();
  void set_allocated_license(std::string* license);
  private:
  const std::string& _internal_license() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_license(const std::string& value);
  std::string* _internal_mutable_license();
  public:

  // optional .pblczero.EngineVersion min_version = 3;
  bool has_min_version() const;
  private:
  bool _internal_has_min_version() const;
  public:
  void clear_min_version();
  const ::pblczero::EngineVersion& min_version() const;
  PROTOBUF_NODISCARD ::pblczero::EngineVersion* release_min_version();
  ::pblczero::EngineVersion* mutable_min_version();
  void set_allocated_min_version(::pblczero::EngineVersion* min_version);
  private:
  const ::pblczero::EngineVersion& _internal_min_version() const;
  ::pblczero::EngineVersion* _internal_mutable_min_version();
  public:
  void unsafe_arena_set_allocated_min_version(
      ::pblczero::EngineVersion* min_version);
  ::pblczero::EngineVersion* unsafe_arena_release_min_version();

  // optional .pblczero.Format format = 4;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::pblczero::Format& format() const;
  PROTOBUF_NODISCARD ::pblczero::Format* release_format();
  ::pblczero::Format* mutable_format();
  void set_allocated_format(::pblczero::Format* format);
  private:
  const ::pblczero::Format& _internal_format() const;
  ::pblczero::Format* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::pblczero::Format* format);
  ::pblczero::Format* unsafe_arena_release_format();

  // optional .pblczero.TrainingParams training_params = 5;
  bool has_training_params() const;
  private:
  bool _internal_has_training_params() const;
  public:
  void clear_training_params();
  const ::pblczero::TrainingParams& training_params() const;
  PROTOBUF_NODISCARD ::pblczero::TrainingParams* release_training_params();
  ::pblczero::TrainingParams* mutable_training_params();
  void set_allocated_training_params(::pblczero::TrainingParams* training_params);
  private:
  const ::pblczero::TrainingParams& _internal_training_params() const;
  ::pblczero::TrainingParams* _internal_mutable_training_params();
  public:
  void unsafe_arena_set_allocated_training_params(
      ::pblczero::TrainingParams* training_params);
  ::pblczero::TrainingParams* unsafe_arena_release_training_params();

  // optional .pblczero.Weights weights = 10;
  bool has_weights() const;
  private:
  bool _internal_has_weights() const;
  public:
  void clear_weights();
  const ::pblczero::Weights& weights() const;
  PROTOBUF_NODISCARD ::pblczero::Weights* release_weights();
  ::pblczero::Weights* mutable_weights();
  void set_allocated_weights(::pblczero::Weights* weights);
  private:
  const ::pblczero::Weights& _internal_weights() const;
  ::pblczero::Weights* _internal_mutable_weights();
  public:
  void unsafe_arena_set_allocated_weights(
      ::pblczero::Weights* weights);
  ::pblczero::Weights* unsafe_arena_release_weights();

  // optional .pblczero.OnnxModel onnx_model = 11;
  bool has_onnx_model() const;
  private:
  bool _internal_has_onnx_model() const;
  public:
  void clear_onnx_model();
  const ::pblczero::OnnxModel& onnx_model() const;
  PROTOBUF_NODISCARD ::pblczero::OnnxModel* release_onnx_model();
  ::pblczero::OnnxModel* mutable_onnx_model();
  void set_allocated_onnx_model(::pblczero::OnnxModel* onnx_model);
  private:
  const ::pblczero::OnnxModel& _internal_onnx_model() const;
  ::pblczero::OnnxModel* _internal_mutable_onnx_model();
  public:
  void unsafe_arena_set_allocated_onnx_model(
      ::pblczero::OnnxModel* onnx_model);
  ::pblczero::OnnxModel* unsafe_arena_release_onnx_model();

  // optional fixed32 magic = 1;
  bool has_magic() const;
  private:
  bool _internal_has_magic() const;
  public:
  void clear_magic();
  uint32_t magic() const;
  void set_magic(uint32_t value);
  private:
  uint32_t _internal_magic() const;
  void _internal_set_magic(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pblczero.Net)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_;
  ::pblczero::EngineVersion* min_version_;
  ::pblczero::Format* format_;
  ::pblczero::TrainingParams* training_params_;
  ::pblczero::Weights* weights_;
  ::pblczero::OnnxModel* onnx_model_;
  uint32_t magic_;
  friend struct ::TableStruct_net_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EngineVersion

// optional uint32 major = 1;
inline bool EngineVersion::_internal_has_major() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EngineVersion::has_major() const {
  return _internal_has_major();
}
inline void EngineVersion::clear_major() {
  major_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t EngineVersion::_internal_major() const {
  return major_;
}
inline uint32_t EngineVersion::major() const {
  // @@protoc_insertion_point(field_get:pblczero.EngineVersion.major)
  return _internal_major();
}
inline void EngineVersion::_internal_set_major(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  major_ = value;
}
inline void EngineVersion::set_major(uint32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:pblczero.EngineVersion.major)
}

// optional uint32 minor = 2;
inline bool EngineVersion::_internal_has_minor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EngineVersion::has_minor() const {
  return _internal_has_minor();
}
inline void EngineVersion::clear_minor() {
  minor_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t EngineVersion::_internal_minor() const {
  return minor_;
}
inline uint32_t EngineVersion::minor() const {
  // @@protoc_insertion_point(field_get:pblczero.EngineVersion.minor)
  return _internal_minor();
}
inline void EngineVersion::_internal_set_minor(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  minor_ = value;
}
inline void EngineVersion::set_minor(uint32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:pblczero.EngineVersion.minor)
}

// optional uint32 patch = 3;
inline bool EngineVersion::_internal_has_patch() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EngineVersion::has_patch() const {
  return _internal_has_patch();
}
inline void EngineVersion::clear_patch() {
  patch_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t EngineVersion::_internal_patch() const {
  return patch_;
}
inline uint32_t EngineVersion::patch() const {
  // @@protoc_insertion_point(field_get:pblczero.EngineVersion.patch)
  return _internal_patch();
}
inline void EngineVersion::_internal_set_patch(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  patch_ = value;
}
inline void EngineVersion::set_patch(uint32_t value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:pblczero.EngineVersion.patch)
}

// -------------------------------------------------------------------

// Weights_Layer

// optional float min_val = 1;
inline bool Weights_Layer::_internal_has_min_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Weights_Layer::has_min_val() const {
  return _internal_has_min_val();
}
inline void Weights_Layer::clear_min_val() {
  min_val_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Weights_Layer::_internal_min_val() const {
  return min_val_;
}
inline float Weights_Layer::min_val() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.Layer.min_val)
  return _internal_min_val();
}
inline void Weights_Layer::_internal_set_min_val(float value) {
  _has_bits_[0] |= 0x00000002u;
  min_val_ = value;
}
inline void Weights_Layer::set_min_val(float value) {
  _internal_set_min_val(value);
  // @@protoc_insertion_point(field_set:pblczero.Weights.Layer.min_val)
}

// optional float max_val = 2;
inline bool Weights_Layer::_internal_has_max_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Weights_Layer::has_max_val() const {
  return _internal_has_max_val();
}
inline void Weights_Layer::clear_max_val() {
  max_val_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Weights_Layer::_internal_max_val() const {
  return max_val_;
}
inline float Weights_Layer::max_val() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.Layer.max_val)
  return _internal_max_val();
}
inline void Weights_Layer::_internal_set_max_val(float value) {
  _has_bits_[0] |= 0x00000004u;
  max_val_ = value;
}
inline void Weights_Layer::set_max_val(float value) {
  _internal_set_max_val(value);
  // @@protoc_insertion_point(field_set:pblczero.Weights.Layer.max_val)
}

// optional bytes params = 3;
inline bool Weights_Layer::_internal_has_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Weights_Layer::has_params() const {
  return _internal_has_params();
}
inline void Weights_Layer::clear_params() {
  params_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Weights_Layer::params() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.Layer.params)
  return _internal_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Weights_Layer::set_params(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 params_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pblczero.Weights.Layer.params)
}
inline std::string* Weights_Layer::mutable_params() {
  std::string* _s = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.Layer.params)
  return _s;
}
inline const std::string& Weights_Layer::_internal_params() const {
  return params_.Get();
}
inline void Weights_Layer::_internal_set_params(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Weights_Layer::_internal_mutable_params() {
  _has_bits_[0] |= 0x00000001u;
  return params_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Weights_Layer::release_params() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.Layer.params)
  if (!_internal_has_params()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = params_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (params_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Weights_Layer::set_allocated_params(std::string* params) {
  if (params != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  params_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), params,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (params_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.Layer.params)
}

// -------------------------------------------------------------------

// Weights_ConvBlock

// optional .pblczero.Weights.Layer weights = 1;
inline bool Weights_ConvBlock::_internal_has_weights() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || weights_ != nullptr);
  return value;
}
inline bool Weights_ConvBlock::has_weights() const {
  return _internal_has_weights();
}
inline void Weights_ConvBlock::clear_weights() {
  if (weights_ != nullptr) weights_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::_internal_weights() const {
  const ::pblczero::Weights_Layer* p = weights_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::weights() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ConvBlock.weights)
  return _internal_weights();
}
inline void Weights_ConvBlock::unsafe_arena_set_allocated_weights(
    ::pblczero::Weights_Layer* weights) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weights_);
  }
  weights_ = weights;
  if (weights) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ConvBlock.weights)
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::release_weights() {
  _has_bits_[0] &= ~0x00000001u;
  ::pblczero::Weights_Layer* temp = weights_;
  weights_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::unsafe_arena_release_weights() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ConvBlock.weights)
  _has_bits_[0] &= ~0x00000001u;
  ::pblczero::Weights_Layer* temp = weights_;
  weights_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::_internal_mutable_weights() {
  _has_bits_[0] |= 0x00000001u;
  if (weights_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    weights_ = p;
  }
  return weights_;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::mutable_weights() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_weights();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ConvBlock.weights)
  return _msg;
}
inline void Weights_ConvBlock::set_allocated_weights(::pblczero::Weights_Layer* weights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete weights_;
  }
  if (weights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(weights);
    if (message_arena != submessage_arena) {
      weights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  weights_ = weights;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ConvBlock.weights)
}

// optional .pblczero.Weights.Layer biases = 2;
inline bool Weights_ConvBlock::_internal_has_biases() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || biases_ != nullptr);
  return value;
}
inline bool Weights_ConvBlock::has_biases() const {
  return _internal_has_biases();
}
inline void Weights_ConvBlock::clear_biases() {
  if (biases_ != nullptr) biases_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::_internal_biases() const {
  const ::pblczero::Weights_Layer* p = biases_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::biases() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ConvBlock.biases)
  return _internal_biases();
}
inline void Weights_ConvBlock::unsafe_arena_set_allocated_biases(
    ::pblczero::Weights_Layer* biases) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(biases_);
  }
  biases_ = biases;
  if (biases) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ConvBlock.biases)
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::release_biases() {
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::Weights_Layer* temp = biases_;
  biases_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::unsafe_arena_release_biases() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ConvBlock.biases)
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::Weights_Layer* temp = biases_;
  biases_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::_internal_mutable_biases() {
  _has_bits_[0] |= 0x00000002u;
  if (biases_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    biases_ = p;
  }
  return biases_;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::mutable_biases() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_biases();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ConvBlock.biases)
  return _msg;
}
inline void Weights_ConvBlock::set_allocated_biases(::pblczero::Weights_Layer* biases) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete biases_;
  }
  if (biases) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(biases);
    if (message_arena != submessage_arena) {
      biases = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, biases, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  biases_ = biases;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ConvBlock.biases)
}

// optional .pblczero.Weights.Layer bn_means = 3;
inline bool Weights_ConvBlock::_internal_has_bn_means() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || bn_means_ != nullptr);
  return value;
}
inline bool Weights_ConvBlock::has_bn_means() const {
  return _internal_has_bn_means();
}
inline void Weights_ConvBlock::clear_bn_means() {
  if (bn_means_ != nullptr) bn_means_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::_internal_bn_means() const {
  const ::pblczero::Weights_Layer* p = bn_means_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::bn_means() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ConvBlock.bn_means)
  return _internal_bn_means();
}
inline void Weights_ConvBlock::unsafe_arena_set_allocated_bn_means(
    ::pblczero::Weights_Layer* bn_means) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bn_means_);
  }
  bn_means_ = bn_means;
  if (bn_means) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ConvBlock.bn_means)
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::release_bn_means() {
  _has_bits_[0] &= ~0x00000004u;
  ::pblczero::Weights_Layer* temp = bn_means_;
  bn_means_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::unsafe_arena_release_bn_means() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ConvBlock.bn_means)
  _has_bits_[0] &= ~0x00000004u;
  ::pblczero::Weights_Layer* temp = bn_means_;
  bn_means_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::_internal_mutable_bn_means() {
  _has_bits_[0] |= 0x00000004u;
  if (bn_means_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    bn_means_ = p;
  }
  return bn_means_;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::mutable_bn_means() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_bn_means();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ConvBlock.bn_means)
  return _msg;
}
inline void Weights_ConvBlock::set_allocated_bn_means(::pblczero::Weights_Layer* bn_means) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bn_means_;
  }
  if (bn_means) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(bn_means);
    if (message_arena != submessage_arena) {
      bn_means = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bn_means, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bn_means_ = bn_means;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ConvBlock.bn_means)
}

// optional .pblczero.Weights.Layer bn_stddivs = 4;
inline bool Weights_ConvBlock::_internal_has_bn_stddivs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || bn_stddivs_ != nullptr);
  return value;
}
inline bool Weights_ConvBlock::has_bn_stddivs() const {
  return _internal_has_bn_stddivs();
}
inline void Weights_ConvBlock::clear_bn_stddivs() {
  if (bn_stddivs_ != nullptr) bn_stddivs_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::_internal_bn_stddivs() const {
  const ::pblczero::Weights_Layer* p = bn_stddivs_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::bn_stddivs() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ConvBlock.bn_stddivs)
  return _internal_bn_stddivs();
}
inline void Weights_ConvBlock::unsafe_arena_set_allocated_bn_stddivs(
    ::pblczero::Weights_Layer* bn_stddivs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bn_stddivs_);
  }
  bn_stddivs_ = bn_stddivs;
  if (bn_stddivs) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ConvBlock.bn_stddivs)
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::release_bn_stddivs() {
  _has_bits_[0] &= ~0x00000008u;
  ::pblczero::Weights_Layer* temp = bn_stddivs_;
  bn_stddivs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::unsafe_arena_release_bn_stddivs() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ConvBlock.bn_stddivs)
  _has_bits_[0] &= ~0x00000008u;
  ::pblczero::Weights_Layer* temp = bn_stddivs_;
  bn_stddivs_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::_internal_mutable_bn_stddivs() {
  _has_bits_[0] |= 0x00000008u;
  if (bn_stddivs_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    bn_stddivs_ = p;
  }
  return bn_stddivs_;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::mutable_bn_stddivs() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_bn_stddivs();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ConvBlock.bn_stddivs)
  return _msg;
}
inline void Weights_ConvBlock::set_allocated_bn_stddivs(::pblczero::Weights_Layer* bn_stddivs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bn_stddivs_;
  }
  if (bn_stddivs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(bn_stddivs);
    if (message_arena != submessage_arena) {
      bn_stddivs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bn_stddivs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bn_stddivs_ = bn_stddivs;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ConvBlock.bn_stddivs)
}

// optional .pblczero.Weights.Layer bn_gammas = 5;
inline bool Weights_ConvBlock::_internal_has_bn_gammas() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || bn_gammas_ != nullptr);
  return value;
}
inline bool Weights_ConvBlock::has_bn_gammas() const {
  return _internal_has_bn_gammas();
}
inline void Weights_ConvBlock::clear_bn_gammas() {
  if (bn_gammas_ != nullptr) bn_gammas_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::_internal_bn_gammas() const {
  const ::pblczero::Weights_Layer* p = bn_gammas_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::bn_gammas() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ConvBlock.bn_gammas)
  return _internal_bn_gammas();
}
inline void Weights_ConvBlock::unsafe_arena_set_allocated_bn_gammas(
    ::pblczero::Weights_Layer* bn_gammas) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bn_gammas_);
  }
  bn_gammas_ = bn_gammas;
  if (bn_gammas) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ConvBlock.bn_gammas)
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::release_bn_gammas() {
  _has_bits_[0] &= ~0x00000010u;
  ::pblczero::Weights_Layer* temp = bn_gammas_;
  bn_gammas_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::unsafe_arena_release_bn_gammas() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ConvBlock.bn_gammas)
  _has_bits_[0] &= ~0x00000010u;
  ::pblczero::Weights_Layer* temp = bn_gammas_;
  bn_gammas_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::_internal_mutable_bn_gammas() {
  _has_bits_[0] |= 0x00000010u;
  if (bn_gammas_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    bn_gammas_ = p;
  }
  return bn_gammas_;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::mutable_bn_gammas() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_bn_gammas();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ConvBlock.bn_gammas)
  return _msg;
}
inline void Weights_ConvBlock::set_allocated_bn_gammas(::pblczero::Weights_Layer* bn_gammas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bn_gammas_;
  }
  if (bn_gammas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(bn_gammas);
    if (message_arena != submessage_arena) {
      bn_gammas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bn_gammas, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bn_gammas_ = bn_gammas;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ConvBlock.bn_gammas)
}

// optional .pblczero.Weights.Layer bn_betas = 6;
inline bool Weights_ConvBlock::_internal_has_bn_betas() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || bn_betas_ != nullptr);
  return value;
}
inline bool Weights_ConvBlock::has_bn_betas() const {
  return _internal_has_bn_betas();
}
inline void Weights_ConvBlock::clear_bn_betas() {
  if (bn_betas_ != nullptr) bn_betas_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::_internal_bn_betas() const {
  const ::pblczero::Weights_Layer* p = bn_betas_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::bn_betas() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ConvBlock.bn_betas)
  return _internal_bn_betas();
}
inline void Weights_ConvBlock::unsafe_arena_set_allocated_bn_betas(
    ::pblczero::Weights_Layer* bn_betas) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bn_betas_);
  }
  bn_betas_ = bn_betas;
  if (bn_betas) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ConvBlock.bn_betas)
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::release_bn_betas() {
  _has_bits_[0] &= ~0x00000020u;
  ::pblczero::Weights_Layer* temp = bn_betas_;
  bn_betas_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::unsafe_arena_release_bn_betas() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ConvBlock.bn_betas)
  _has_bits_[0] &= ~0x00000020u;
  ::pblczero::Weights_Layer* temp = bn_betas_;
  bn_betas_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::_internal_mutable_bn_betas() {
  _has_bits_[0] |= 0x00000020u;
  if (bn_betas_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    bn_betas_ = p;
  }
  return bn_betas_;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::mutable_bn_betas() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_bn_betas();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ConvBlock.bn_betas)
  return _msg;
}
inline void Weights_ConvBlock::set_allocated_bn_betas(::pblczero::Weights_Layer* bn_betas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bn_betas_;
  }
  if (bn_betas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(bn_betas);
    if (message_arena != submessage_arena) {
      bn_betas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bn_betas, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  bn_betas_ = bn_betas;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ConvBlock.bn_betas)
}

// -------------------------------------------------------------------

// Weights_SEunit

// optional .pblczero.Weights.Layer w1 = 1;
inline bool Weights_SEunit::_internal_has_w1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || w1_ != nullptr);
  return value;
}
inline bool Weights_SEunit::has_w1() const {
  return _internal_has_w1();
}
inline void Weights_SEunit::clear_w1() {
  if (w1_ != nullptr) w1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pblczero::Weights_Layer& Weights_SEunit::_internal_w1() const {
  const ::pblczero::Weights_Layer* p = w1_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights_SEunit::w1() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.SEunit.w1)
  return _internal_w1();
}
inline void Weights_SEunit::unsafe_arena_set_allocated_w1(
    ::pblczero::Weights_Layer* w1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(w1_);
  }
  w1_ = w1;
  if (w1) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.SEunit.w1)
}
inline ::pblczero::Weights_Layer* Weights_SEunit::release_w1() {
  _has_bits_[0] &= ~0x00000001u;
  ::pblczero::Weights_Layer* temp = w1_;
  w1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::unsafe_arena_release_w1() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.SEunit.w1)
  _has_bits_[0] &= ~0x00000001u;
  ::pblczero::Weights_Layer* temp = w1_;
  w1_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::_internal_mutable_w1() {
  _has_bits_[0] |= 0x00000001u;
  if (w1_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    w1_ = p;
  }
  return w1_;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::mutable_w1() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_w1();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.SEunit.w1)
  return _msg;
}
inline void Weights_SEunit::set_allocated_w1(::pblczero::Weights_Layer* w1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete w1_;
  }
  if (w1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(w1);
    if (message_arena != submessage_arena) {
      w1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, w1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  w1_ = w1;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.SEunit.w1)
}

// optional .pblczero.Weights.Layer b1 = 2;
inline bool Weights_SEunit::_internal_has_b1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || b1_ != nullptr);
  return value;
}
inline bool Weights_SEunit::has_b1() const {
  return _internal_has_b1();
}
inline void Weights_SEunit::clear_b1() {
  if (b1_ != nullptr) b1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pblczero::Weights_Layer& Weights_SEunit::_internal_b1() const {
  const ::pblczero::Weights_Layer* p = b1_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights_SEunit::b1() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.SEunit.b1)
  return _internal_b1();
}
inline void Weights_SEunit::unsafe_arena_set_allocated_b1(
    ::pblczero::Weights_Layer* b1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b1_);
  }
  b1_ = b1;
  if (b1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.SEunit.b1)
}
inline ::pblczero::Weights_Layer* Weights_SEunit::release_b1() {
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::Weights_Layer* temp = b1_;
  b1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::unsafe_arena_release_b1() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.SEunit.b1)
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::Weights_Layer* temp = b1_;
  b1_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::_internal_mutable_b1() {
  _has_bits_[0] |= 0x00000002u;
  if (b1_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    b1_ = p;
  }
  return b1_;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::mutable_b1() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_b1();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.SEunit.b1)
  return _msg;
}
inline void Weights_SEunit::set_allocated_b1(::pblczero::Weights_Layer* b1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete b1_;
  }
  if (b1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(b1);
    if (message_arena != submessage_arena) {
      b1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  b1_ = b1;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.SEunit.b1)
}

// optional .pblczero.Weights.Layer w2 = 3;
inline bool Weights_SEunit::_internal_has_w2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || w2_ != nullptr);
  return value;
}
inline bool Weights_SEunit::has_w2() const {
  return _internal_has_w2();
}
inline void Weights_SEunit::clear_w2() {
  if (w2_ != nullptr) w2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pblczero::Weights_Layer& Weights_SEunit::_internal_w2() const {
  const ::pblczero::Weights_Layer* p = w2_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights_SEunit::w2() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.SEunit.w2)
  return _internal_w2();
}
inline void Weights_SEunit::unsafe_arena_set_allocated_w2(
    ::pblczero::Weights_Layer* w2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(w2_);
  }
  w2_ = w2;
  if (w2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.SEunit.w2)
}
inline ::pblczero::Weights_Layer* Weights_SEunit::release_w2() {
  _has_bits_[0] &= ~0x00000004u;
  ::pblczero::Weights_Layer* temp = w2_;
  w2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::unsafe_arena_release_w2() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.SEunit.w2)
  _has_bits_[0] &= ~0x00000004u;
  ::pblczero::Weights_Layer* temp = w2_;
  w2_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::_internal_mutable_w2() {
  _has_bits_[0] |= 0x00000004u;
  if (w2_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    w2_ = p;
  }
  return w2_;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::mutable_w2() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_w2();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.SEunit.w2)
  return _msg;
}
inline void Weights_SEunit::set_allocated_w2(::pblczero::Weights_Layer* w2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete w2_;
  }
  if (w2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(w2);
    if (message_arena != submessage_arena) {
      w2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, w2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  w2_ = w2;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.SEunit.w2)
}

// optional .pblczero.Weights.Layer b2 = 4;
inline bool Weights_SEunit::_internal_has_b2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || b2_ != nullptr);
  return value;
}
inline bool Weights_SEunit::has_b2() const {
  return _internal_has_b2();
}
inline void Weights_SEunit::clear_b2() {
  if (b2_ != nullptr) b2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::pblczero::Weights_Layer& Weights_SEunit::_internal_b2() const {
  const ::pblczero::Weights_Layer* p = b2_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights_SEunit::b2() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.SEunit.b2)
  return _internal_b2();
}
inline void Weights_SEunit::unsafe_arena_set_allocated_b2(
    ::pblczero::Weights_Layer* b2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b2_);
  }
  b2_ = b2;
  if (b2) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.SEunit.b2)
}
inline ::pblczero::Weights_Layer* Weights_SEunit::release_b2() {
  _has_bits_[0] &= ~0x00000008u;
  ::pblczero::Weights_Layer* temp = b2_;
  b2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::unsafe_arena_release_b2() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.SEunit.b2)
  _has_bits_[0] &= ~0x00000008u;
  ::pblczero::Weights_Layer* temp = b2_;
  b2_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::_internal_mutable_b2() {
  _has_bits_[0] |= 0x00000008u;
  if (b2_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    b2_ = p;
  }
  return b2_;
}
inline ::pblczero::Weights_Layer* Weights_SEunit::mutable_b2() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_b2();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.SEunit.b2)
  return _msg;
}
inline void Weights_SEunit::set_allocated_b2(::pblczero::Weights_Layer* b2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete b2_;
  }
  if (b2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(b2);
    if (message_arena != submessage_arena) {
      b2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  b2_ = b2;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.SEunit.b2)
}

// -------------------------------------------------------------------

// Weights_Residual

// optional .pblczero.Weights.ConvBlock conv1 = 1;
inline bool Weights_Residual::_internal_has_conv1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || conv1_ != nullptr);
  return value;
}
inline bool Weights_Residual::has_conv1() const {
  return _internal_has_conv1();
}
inline void Weights_Residual::clear_conv1() {
  if (conv1_ != nullptr) conv1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pblczero::Weights_ConvBlock& Weights_Residual::_internal_conv1() const {
  const ::pblczero::Weights_ConvBlock* p = conv1_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_ConvBlock&>(
      ::pblczero::_Weights_ConvBlock_default_instance_);
}
inline const ::pblczero::Weights_ConvBlock& Weights_Residual::conv1() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.Residual.conv1)
  return _internal_conv1();
}
inline void Weights_Residual::unsafe_arena_set_allocated_conv1(
    ::pblczero::Weights_ConvBlock* conv1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conv1_);
  }
  conv1_ = conv1;
  if (conv1) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.Residual.conv1)
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::release_conv1() {
  _has_bits_[0] &= ~0x00000001u;
  ::pblczero::Weights_ConvBlock* temp = conv1_;
  conv1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::unsafe_arena_release_conv1() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.Residual.conv1)
  _has_bits_[0] &= ~0x00000001u;
  ::pblczero::Weights_ConvBlock* temp = conv1_;
  conv1_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::_internal_mutable_conv1() {
  _has_bits_[0] |= 0x00000001u;
  if (conv1_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaForAllocation());
    conv1_ = p;
  }
  return conv1_;
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::mutable_conv1() {
  ::pblczero::Weights_ConvBlock* _msg = _internal_mutable_conv1();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.Residual.conv1)
  return _msg;
}
inline void Weights_Residual::set_allocated_conv1(::pblczero::Weights_ConvBlock* conv1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete conv1_;
  }
  if (conv1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_ConvBlock>::GetOwningArena(conv1);
    if (message_arena != submessage_arena) {
      conv1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  conv1_ = conv1;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.Residual.conv1)
}

// optional .pblczero.Weights.ConvBlock conv2 = 2;
inline bool Weights_Residual::_internal_has_conv2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || conv2_ != nullptr);
  return value;
}
inline bool Weights_Residual::has_conv2() const {
  return _internal_has_conv2();
}
inline void Weights_Residual::clear_conv2() {
  if (conv2_ != nullptr) conv2_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pblczero::Weights_ConvBlock& Weights_Residual::_internal_conv2() const {
  const ::pblczero::Weights_ConvBlock* p = conv2_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_ConvBlock&>(
      ::pblczero::_Weights_ConvBlock_default_instance_);
}
inline const ::pblczero::Weights_ConvBlock& Weights_Residual::conv2() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.Residual.conv2)
  return _internal_conv2();
}
inline void Weights_Residual::unsafe_arena_set_allocated_conv2(
    ::pblczero::Weights_ConvBlock* conv2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conv2_);
  }
  conv2_ = conv2;
  if (conv2) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.Residual.conv2)
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::release_conv2() {
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::Weights_ConvBlock* temp = conv2_;
  conv2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::unsafe_arena_release_conv2() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.Residual.conv2)
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::Weights_ConvBlock* temp = conv2_;
  conv2_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::_internal_mutable_conv2() {
  _has_bits_[0] |= 0x00000002u;
  if (conv2_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaForAllocation());
    conv2_ = p;
  }
  return conv2_;
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::mutable_conv2() {
  ::pblczero::Weights_ConvBlock* _msg = _internal_mutable_conv2();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.Residual.conv2)
  return _msg;
}
inline void Weights_Residual::set_allocated_conv2(::pblczero::Weights_ConvBlock* conv2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete conv2_;
  }
  if (conv2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_ConvBlock>::GetOwningArena(conv2);
    if (message_arena != submessage_arena) {
      conv2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  conv2_ = conv2;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.Residual.conv2)
}

// optional .pblczero.Weights.SEunit se = 3;
inline bool Weights_Residual::_internal_has_se() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || se_ != nullptr);
  return value;
}
inline bool Weights_Residual::has_se() const {
  return _internal_has_se();
}
inline void Weights_Residual::clear_se() {
  if (se_ != nullptr) se_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pblczero::Weights_SEunit& Weights_Residual::_internal_se() const {
  const ::pblczero::Weights_SEunit* p = se_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_SEunit&>(
      ::pblczero::_Weights_SEunit_default_instance_);
}
inline const ::pblczero::Weights_SEunit& Weights_Residual::se() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.Residual.se)
  return _internal_se();
}
inline void Weights_Residual::unsafe_arena_set_allocated_se(
    ::pblczero::Weights_SEunit* se) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(se_);
  }
  se_ = se;
  if (se) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.Residual.se)
}
inline ::pblczero::Weights_SEunit* Weights_Residual::release_se() {
  _has_bits_[0] &= ~0x00000004u;
  ::pblczero::Weights_SEunit* temp = se_;
  se_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_SEunit* Weights_Residual::unsafe_arena_release_se() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.Residual.se)
  _has_bits_[0] &= ~0x00000004u;
  ::pblczero::Weights_SEunit* temp = se_;
  se_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_SEunit* Weights_Residual::_internal_mutable_se() {
  _has_bits_[0] |= 0x00000004u;
  if (se_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_SEunit>(GetArenaForAllocation());
    se_ = p;
  }
  return se_;
}
inline ::pblczero::Weights_SEunit* Weights_Residual::mutable_se() {
  ::pblczero::Weights_SEunit* _msg = _internal_mutable_se();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.Residual.se)
  return _msg;
}
inline void Weights_Residual::set_allocated_se(::pblczero::Weights_SEunit* se) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete se_;
  }
  if (se) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_SEunit>::GetOwningArena(se);
    if (message_arena != submessage_arena) {
      se = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, se, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  se_ = se;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.Residual.se)
}

// -------------------------------------------------------------------

// Weights

// optional .pblczero.Weights.ConvBlock input = 1;
inline bool Weights::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || input_ != nullptr);
  return value;
}
inline bool Weights::has_input() const {
  return _internal_has_input();
}
inline void Weights::clear_input() {
  if (input_ != nullptr) input_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pblczero::Weights_ConvBlock& Weights::_internal_input() const {
  const ::pblczero::Weights_ConvBlock* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_ConvBlock&>(
      ::pblczero::_Weights_ConvBlock_default_instance_);
}
inline const ::pblczero::Weights_ConvBlock& Weights::input() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.input)
  return _internal_input();
}
inline void Weights::unsafe_arena_set_allocated_input(
    ::pblczero::Weights_ConvBlock* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.input)
}
inline ::pblczero::Weights_ConvBlock* Weights::release_input() {
  _has_bits_[0] &= ~0x00000001u;
  ::pblczero::Weights_ConvBlock* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.input)
  _has_bits_[0] &= ~0x00000001u;
  ::pblczero::Weights_ConvBlock* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::_internal_mutable_input() {
  _has_bits_[0] |= 0x00000001u;
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::pblczero::Weights_ConvBlock* Weights::mutable_input() {
  ::pblczero::Weights_ConvBlock* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.input)
  return _msg;
}
inline void Weights::set_allocated_input(::pblczero::Weights_ConvBlock* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_ConvBlock>::GetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.input)
}

// repeated .pblczero.Weights.Residual residual = 2;
inline int Weights::_internal_residual_size() const {
  return residual_.size();
}
inline int Weights::residual_size() const {
  return _internal_residual_size();
}
inline void Weights::clear_residual() {
  residual_.Clear();
}
inline ::pblczero::Weights_Residual* Weights::mutable_residual(int index) {
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.residual)
  return residual_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Weights_Residual >*
Weights::mutable_residual() {
  // @@protoc_insertion_point(field_mutable_list:pblczero.Weights.residual)
  return &residual_;
}
inline const ::pblczero::Weights_Residual& Weights::_internal_residual(int index) const {
  return residual_.Get(index);
}
inline const ::pblczero::Weights_Residual& Weights::residual(int index) const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.residual)
  return _internal_residual(index);
}
inline ::pblczero::Weights_Residual* Weights::_internal_add_residual() {
  return residual_.Add();
}
inline ::pblczero::Weights_Residual* Weights::add_residual() {
  ::pblczero::Weights_Residual* _add = _internal_add_residual();
  // @@protoc_insertion_point(field_add:pblczero.Weights.residual)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Weights_Residual >&
Weights::residual() const {
  // @@protoc_insertion_point(field_list:pblczero.Weights.residual)
  return residual_;
}

// optional .pblczero.Weights.ConvBlock policy1 = 11;
inline bool Weights::_internal_has_policy1() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || policy1_ != nullptr);
  return value;
}
inline bool Weights::has_policy1() const {
  return _internal_has_policy1();
}
inline void Weights::clear_policy1() {
  if (policy1_ != nullptr) policy1_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::pblczero::Weights_ConvBlock& Weights::_internal_policy1() const {
  const ::pblczero::Weights_ConvBlock* p = policy1_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_ConvBlock&>(
      ::pblczero::_Weights_ConvBlock_default_instance_);
}
inline const ::pblczero::Weights_ConvBlock& Weights::policy1() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.policy1)
  return _internal_policy1();
}
inline void Weights::unsafe_arena_set_allocated_policy1(
    ::pblczero::Weights_ConvBlock* policy1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy1_);
  }
  policy1_ = policy1;
  if (policy1) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.policy1)
}
inline ::pblczero::Weights_ConvBlock* Weights::release_policy1() {
  _has_bits_[0] &= ~0x00000200u;
  ::pblczero::Weights_ConvBlock* temp = policy1_;
  policy1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::unsafe_arena_release_policy1() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.policy1)
  _has_bits_[0] &= ~0x00000200u;
  ::pblczero::Weights_ConvBlock* temp = policy1_;
  policy1_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::_internal_mutable_policy1() {
  _has_bits_[0] |= 0x00000200u;
  if (policy1_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaForAllocation());
    policy1_ = p;
  }
  return policy1_;
}
inline ::pblczero::Weights_ConvBlock* Weights::mutable_policy1() {
  ::pblczero::Weights_ConvBlock* _msg = _internal_mutable_policy1();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.policy1)
  return _msg;
}
inline void Weights::set_allocated_policy1(::pblczero::Weights_ConvBlock* policy1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete policy1_;
  }
  if (policy1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_ConvBlock>::GetOwningArena(policy1);
    if (message_arena != submessage_arena) {
      policy1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  policy1_ = policy1;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.policy1)
}

// optional .pblczero.Weights.ConvBlock policy = 3;
inline bool Weights::_internal_has_policy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || policy_ != nullptr);
  return value;
}
inline bool Weights::has_policy() const {
  return _internal_has_policy();
}
inline void Weights::clear_policy() {
  if (policy_ != nullptr) policy_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pblczero::Weights_ConvBlock& Weights::_internal_policy() const {
  const ::pblczero::Weights_ConvBlock* p = policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_ConvBlock&>(
      ::pblczero::_Weights_ConvBlock_default_instance_);
}
inline const ::pblczero::Weights_ConvBlock& Weights::policy() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.policy)
  return _internal_policy();
}
inline void Weights::unsafe_arena_set_allocated_policy(
    ::pblczero::Weights_ConvBlock* policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_);
  }
  policy_ = policy;
  if (policy) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.policy)
}
inline ::pblczero::Weights_ConvBlock* Weights::release_policy() {
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::Weights_ConvBlock* temp = policy_;
  policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::unsafe_arena_release_policy() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.policy)
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::Weights_ConvBlock* temp = policy_;
  policy_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::_internal_mutable_policy() {
  _has_bits_[0] |= 0x00000002u;
  if (policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaForAllocation());
    policy_ = p;
  }
  return policy_;
}
inline ::pblczero::Weights_ConvBlock* Weights::mutable_policy() {
  ::pblczero::Weights_ConvBlock* _msg = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.policy)
  return _msg;
}
inline void Weights::set_allocated_policy(::pblczero::Weights_ConvBlock* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete policy_;
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_ConvBlock>::GetOwningArena(policy);
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.policy)
}

// optional .pblczero.Weights.Layer ip_pol_w = 4;
inline bool Weights::_internal_has_ip_pol_w() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ip_pol_w_ != nullptr);
  return value;
}
inline bool Weights::has_ip_pol_w() const {
  return _internal_has_ip_pol_w();
}
inline void Weights::clear_ip_pol_w() {
  if (ip_pol_w_ != nullptr) ip_pol_w_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip_pol_w() const {
  const ::pblczero::Weights_Layer* p = ip_pol_w_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights::ip_pol_w() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip_pol_w)
  return _internal_ip_pol_w();
}
inline void Weights::unsafe_arena_set_allocated_ip_pol_w(
    ::pblczero::Weights_Layer* ip_pol_w) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_pol_w_);
  }
  ip_pol_w_ = ip_pol_w;
  if (ip_pol_w) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ip_pol_w)
}
inline ::pblczero::Weights_Layer* Weights::release_ip_pol_w() {
  _has_bits_[0] &= ~0x00000004u;
  ::pblczero::Weights_Layer* temp = ip_pol_w_;
  ip_pol_w_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::unsafe_arena_release_ip_pol_w() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip_pol_w)
  _has_bits_[0] &= ~0x00000004u;
  ::pblczero::Weights_Layer* temp = ip_pol_w_;
  ip_pol_w_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::_internal_mutable_ip_pol_w() {
  _has_bits_[0] |= 0x00000004u;
  if (ip_pol_w_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    ip_pol_w_ = p;
  }
  return ip_pol_w_;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip_pol_w() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_ip_pol_w();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip_pol_w)
  return _msg;
}
inline void Weights::set_allocated_ip_pol_w(::pblczero::Weights_Layer* ip_pol_w) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip_pol_w_;
  }
  if (ip_pol_w) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(ip_pol_w);
    if (message_arena != submessage_arena) {
      ip_pol_w = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_pol_w, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ip_pol_w_ = ip_pol_w;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip_pol_w)
}

// optional .pblczero.Weights.Layer ip_pol_b = 5;
inline bool Weights::_internal_has_ip_pol_b() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ip_pol_b_ != nullptr);
  return value;
}
inline bool Weights::has_ip_pol_b() const {
  return _internal_has_ip_pol_b();
}
inline void Weights::clear_ip_pol_b() {
  if (ip_pol_b_ != nullptr) ip_pol_b_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip_pol_b() const {
  const ::pblczero::Weights_Layer* p = ip_pol_b_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights::ip_pol_b() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip_pol_b)
  return _internal_ip_pol_b();
}
inline void Weights::unsafe_arena_set_allocated_ip_pol_b(
    ::pblczero::Weights_Layer* ip_pol_b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_pol_b_);
  }
  ip_pol_b_ = ip_pol_b;
  if (ip_pol_b) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ip_pol_b)
}
inline ::pblczero::Weights_Layer* Weights::release_ip_pol_b() {
  _has_bits_[0] &= ~0x00000008u;
  ::pblczero::Weights_Layer* temp = ip_pol_b_;
  ip_pol_b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::unsafe_arena_release_ip_pol_b() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip_pol_b)
  _has_bits_[0] &= ~0x00000008u;
  ::pblczero::Weights_Layer* temp = ip_pol_b_;
  ip_pol_b_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::_internal_mutable_ip_pol_b() {
  _has_bits_[0] |= 0x00000008u;
  if (ip_pol_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    ip_pol_b_ = p;
  }
  return ip_pol_b_;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip_pol_b() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_ip_pol_b();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip_pol_b)
  return _msg;
}
inline void Weights::set_allocated_ip_pol_b(::pblczero::Weights_Layer* ip_pol_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip_pol_b_;
  }
  if (ip_pol_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(ip_pol_b);
    if (message_arena != submessage_arena) {
      ip_pol_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_pol_b, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ip_pol_b_ = ip_pol_b;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip_pol_b)
}

// optional .pblczero.Weights.ConvBlock value = 6;
inline bool Weights::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool Weights::has_value() const {
  return _internal_has_value();
}
inline void Weights::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::pblczero::Weights_ConvBlock& Weights::_internal_value() const {
  const ::pblczero::Weights_ConvBlock* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_ConvBlock&>(
      ::pblczero::_Weights_ConvBlock_default_instance_);
}
inline const ::pblczero::Weights_ConvBlock& Weights::value() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.value)
  return _internal_value();
}
inline void Weights::unsafe_arena_set_allocated_value(
    ::pblczero::Weights_ConvBlock* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.value)
}
inline ::pblczero::Weights_ConvBlock* Weights::release_value() {
  _has_bits_[0] &= ~0x00000010u;
  ::pblczero::Weights_ConvBlock* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.value)
  _has_bits_[0] &= ~0x00000010u;
  ::pblczero::Weights_ConvBlock* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000010u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::pblczero::Weights_ConvBlock* Weights::mutable_value() {
  ::pblczero::Weights_ConvBlock* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.value)
  return _msg;
}
inline void Weights::set_allocated_value(::pblczero::Weights_ConvBlock* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_ConvBlock>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.value)
}

// optional .pblczero.Weights.Layer ip1_val_w = 7;
inline bool Weights::_internal_has_ip1_val_w() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || ip1_val_w_ != nullptr);
  return value;
}
inline bool Weights::has_ip1_val_w() const {
  return _internal_has_ip1_val_w();
}
inline void Weights::clear_ip1_val_w() {
  if (ip1_val_w_ != nullptr) ip1_val_w_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip1_val_w() const {
  const ::pblczero::Weights_Layer* p = ip1_val_w_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights::ip1_val_w() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip1_val_w)
  return _internal_ip1_val_w();
}
inline void Weights::unsafe_arena_set_allocated_ip1_val_w(
    ::pblczero::Weights_Layer* ip1_val_w) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip1_val_w_);
  }
  ip1_val_w_ = ip1_val_w;
  if (ip1_val_w) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ip1_val_w)
}
inline ::pblczero::Weights_Layer* Weights::release_ip1_val_w() {
  _has_bits_[0] &= ~0x00000020u;
  ::pblczero::Weights_Layer* temp = ip1_val_w_;
  ip1_val_w_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::unsafe_arena_release_ip1_val_w() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip1_val_w)
  _has_bits_[0] &= ~0x00000020u;
  ::pblczero::Weights_Layer* temp = ip1_val_w_;
  ip1_val_w_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::_internal_mutable_ip1_val_w() {
  _has_bits_[0] |= 0x00000020u;
  if (ip1_val_w_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    ip1_val_w_ = p;
  }
  return ip1_val_w_;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip1_val_w() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_ip1_val_w();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip1_val_w)
  return _msg;
}
inline void Weights::set_allocated_ip1_val_w(::pblczero::Weights_Layer* ip1_val_w) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip1_val_w_;
  }
  if (ip1_val_w) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(ip1_val_w);
    if (message_arena != submessage_arena) {
      ip1_val_w = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip1_val_w, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  ip1_val_w_ = ip1_val_w;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip1_val_w)
}

// optional .pblczero.Weights.Layer ip1_val_b = 8;
inline bool Weights::_internal_has_ip1_val_b() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || ip1_val_b_ != nullptr);
  return value;
}
inline bool Weights::has_ip1_val_b() const {
  return _internal_has_ip1_val_b();
}
inline void Weights::clear_ip1_val_b() {
  if (ip1_val_b_ != nullptr) ip1_val_b_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip1_val_b() const {
  const ::pblczero::Weights_Layer* p = ip1_val_b_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights::ip1_val_b() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip1_val_b)
  return _internal_ip1_val_b();
}
inline void Weights::unsafe_arena_set_allocated_ip1_val_b(
    ::pblczero::Weights_Layer* ip1_val_b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip1_val_b_);
  }
  ip1_val_b_ = ip1_val_b;
  if (ip1_val_b) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ip1_val_b)
}
inline ::pblczero::Weights_Layer* Weights::release_ip1_val_b() {
  _has_bits_[0] &= ~0x00000040u;
  ::pblczero::Weights_Layer* temp = ip1_val_b_;
  ip1_val_b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::unsafe_arena_release_ip1_val_b() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip1_val_b)
  _has_bits_[0] &= ~0x00000040u;
  ::pblczero::Weights_Layer* temp = ip1_val_b_;
  ip1_val_b_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::_internal_mutable_ip1_val_b() {
  _has_bits_[0] |= 0x00000040u;
  if (ip1_val_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    ip1_val_b_ = p;
  }
  return ip1_val_b_;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip1_val_b() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_ip1_val_b();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip1_val_b)
  return _msg;
}
inline void Weights::set_allocated_ip1_val_b(::pblczero::Weights_Layer* ip1_val_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip1_val_b_;
  }
  if (ip1_val_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(ip1_val_b);
    if (message_arena != submessage_arena) {
      ip1_val_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip1_val_b, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  ip1_val_b_ = ip1_val_b;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip1_val_b)
}

// optional .pblczero.Weights.Layer ip2_val_w = 9;
inline bool Weights::_internal_has_ip2_val_w() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || ip2_val_w_ != nullptr);
  return value;
}
inline bool Weights::has_ip2_val_w() const {
  return _internal_has_ip2_val_w();
}
inline void Weights::clear_ip2_val_w() {
  if (ip2_val_w_ != nullptr) ip2_val_w_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip2_val_w() const {
  const ::pblczero::Weights_Layer* p = ip2_val_w_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights::ip2_val_w() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip2_val_w)
  return _internal_ip2_val_w();
}
inline void Weights::unsafe_arena_set_allocated_ip2_val_w(
    ::pblczero::Weights_Layer* ip2_val_w) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip2_val_w_);
  }
  ip2_val_w_ = ip2_val_w;
  if (ip2_val_w) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ip2_val_w)
}
inline ::pblczero::Weights_Layer* Weights::release_ip2_val_w() {
  _has_bits_[0] &= ~0x00000080u;
  ::pblczero::Weights_Layer* temp = ip2_val_w_;
  ip2_val_w_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::unsafe_arena_release_ip2_val_w() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip2_val_w)
  _has_bits_[0] &= ~0x00000080u;
  ::pblczero::Weights_Layer* temp = ip2_val_w_;
  ip2_val_w_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::_internal_mutable_ip2_val_w() {
  _has_bits_[0] |= 0x00000080u;
  if (ip2_val_w_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    ip2_val_w_ = p;
  }
  return ip2_val_w_;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip2_val_w() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_ip2_val_w();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip2_val_w)
  return _msg;
}
inline void Weights::set_allocated_ip2_val_w(::pblczero::Weights_Layer* ip2_val_w) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip2_val_w_;
  }
  if (ip2_val_w) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(ip2_val_w);
    if (message_arena != submessage_arena) {
      ip2_val_w = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip2_val_w, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  ip2_val_w_ = ip2_val_w;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip2_val_w)
}

// optional .pblczero.Weights.Layer ip2_val_b = 10;
inline bool Weights::_internal_has_ip2_val_b() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || ip2_val_b_ != nullptr);
  return value;
}
inline bool Weights::has_ip2_val_b() const {
  return _internal_has_ip2_val_b();
}
inline void Weights::clear_ip2_val_b() {
  if (ip2_val_b_ != nullptr) ip2_val_b_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip2_val_b() const {
  const ::pblczero::Weights_Layer* p = ip2_val_b_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights::ip2_val_b() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip2_val_b)
  return _internal_ip2_val_b();
}
inline void Weights::unsafe_arena_set_allocated_ip2_val_b(
    ::pblczero::Weights_Layer* ip2_val_b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip2_val_b_);
  }
  ip2_val_b_ = ip2_val_b;
  if (ip2_val_b) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ip2_val_b)
}
inline ::pblczero::Weights_Layer* Weights::release_ip2_val_b() {
  _has_bits_[0] &= ~0x00000100u;
  ::pblczero::Weights_Layer* temp = ip2_val_b_;
  ip2_val_b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::unsafe_arena_release_ip2_val_b() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip2_val_b)
  _has_bits_[0] &= ~0x00000100u;
  ::pblczero::Weights_Layer* temp = ip2_val_b_;
  ip2_val_b_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::_internal_mutable_ip2_val_b() {
  _has_bits_[0] |= 0x00000100u;
  if (ip2_val_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    ip2_val_b_ = p;
  }
  return ip2_val_b_;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip2_val_b() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_ip2_val_b();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip2_val_b)
  return _msg;
}
inline void Weights::set_allocated_ip2_val_b(::pblczero::Weights_Layer* ip2_val_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip2_val_b_;
  }
  if (ip2_val_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(ip2_val_b);
    if (message_arena != submessage_arena) {
      ip2_val_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip2_val_b, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  ip2_val_b_ = ip2_val_b;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip2_val_b)
}

// optional .pblczero.Weights.ConvBlock moves_left = 12;
inline bool Weights::_internal_has_moves_left() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || moves_left_ != nullptr);
  return value;
}
inline bool Weights::has_moves_left() const {
  return _internal_has_moves_left();
}
inline void Weights::clear_moves_left() {
  if (moves_left_ != nullptr) moves_left_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::pblczero::Weights_ConvBlock& Weights::_internal_moves_left() const {
  const ::pblczero::Weights_ConvBlock* p = moves_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_ConvBlock&>(
      ::pblczero::_Weights_ConvBlock_default_instance_);
}
inline const ::pblczero::Weights_ConvBlock& Weights::moves_left() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.moves_left)
  return _internal_moves_left();
}
inline void Weights::unsafe_arena_set_allocated_moves_left(
    ::pblczero::Weights_ConvBlock* moves_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(moves_left_);
  }
  moves_left_ = moves_left;
  if (moves_left) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.moves_left)
}
inline ::pblczero::Weights_ConvBlock* Weights::release_moves_left() {
  _has_bits_[0] &= ~0x00000400u;
  ::pblczero::Weights_ConvBlock* temp = moves_left_;
  moves_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::unsafe_arena_release_moves_left() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.moves_left)
  _has_bits_[0] &= ~0x00000400u;
  ::pblczero::Weights_ConvBlock* temp = moves_left_;
  moves_left_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::_internal_mutable_moves_left() {
  _has_bits_[0] |= 0x00000400u;
  if (moves_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaForAllocation());
    moves_left_ = p;
  }
  return moves_left_;
}
inline ::pblczero::Weights_ConvBlock* Weights::mutable_moves_left() {
  ::pblczero::Weights_ConvBlock* _msg = _internal_mutable_moves_left();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.moves_left)
  return _msg;
}
inline void Weights::set_allocated_moves_left(::pblczero::Weights_ConvBlock* moves_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete moves_left_;
  }
  if (moves_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_ConvBlock>::GetOwningArena(moves_left);
    if (message_arena != submessage_arena) {
      moves_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moves_left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  moves_left_ = moves_left;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.moves_left)
}

// optional .pblczero.Weights.Layer ip1_mov_w = 13;
inline bool Weights::_internal_has_ip1_mov_w() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || ip1_mov_w_ != nullptr);
  return value;
}
inline bool Weights::has_ip1_mov_w() const {
  return _internal_has_ip1_mov_w();
}
inline void Weights::clear_ip1_mov_w() {
  if (ip1_mov_w_ != nullptr) ip1_mov_w_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip1_mov_w() const {
  const ::pblczero::Weights_Layer* p = ip1_mov_w_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights::ip1_mov_w() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip1_mov_w)
  return _internal_ip1_mov_w();
}
inline void Weights::unsafe_arena_set_allocated_ip1_mov_w(
    ::pblczero::Weights_Layer* ip1_mov_w) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip1_mov_w_);
  }
  ip1_mov_w_ = ip1_mov_w;
  if (ip1_mov_w) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ip1_mov_w)
}
inline ::pblczero::Weights_Layer* Weights::release_ip1_mov_w() {
  _has_bits_[0] &= ~0x00000800u;
  ::pblczero::Weights_Layer* temp = ip1_mov_w_;
  ip1_mov_w_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::unsafe_arena_release_ip1_mov_w() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip1_mov_w)
  _has_bits_[0] &= ~0x00000800u;
  ::pblczero::Weights_Layer* temp = ip1_mov_w_;
  ip1_mov_w_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::_internal_mutable_ip1_mov_w() {
  _has_bits_[0] |= 0x00000800u;
  if (ip1_mov_w_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    ip1_mov_w_ = p;
  }
  return ip1_mov_w_;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip1_mov_w() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_ip1_mov_w();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip1_mov_w)
  return _msg;
}
inline void Weights::set_allocated_ip1_mov_w(::pblczero::Weights_Layer* ip1_mov_w) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip1_mov_w_;
  }
  if (ip1_mov_w) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(ip1_mov_w);
    if (message_arena != submessage_arena) {
      ip1_mov_w = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip1_mov_w, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  ip1_mov_w_ = ip1_mov_w;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip1_mov_w)
}

// optional .pblczero.Weights.Layer ip1_mov_b = 14;
inline bool Weights::_internal_has_ip1_mov_b() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || ip1_mov_b_ != nullptr);
  return value;
}
inline bool Weights::has_ip1_mov_b() const {
  return _internal_has_ip1_mov_b();
}
inline void Weights::clear_ip1_mov_b() {
  if (ip1_mov_b_ != nullptr) ip1_mov_b_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip1_mov_b() const {
  const ::pblczero::Weights_Layer* p = ip1_mov_b_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights::ip1_mov_b() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip1_mov_b)
  return _internal_ip1_mov_b();
}
inline void Weights::unsafe_arena_set_allocated_ip1_mov_b(
    ::pblczero::Weights_Layer* ip1_mov_b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip1_mov_b_);
  }
  ip1_mov_b_ = ip1_mov_b;
  if (ip1_mov_b) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ip1_mov_b)
}
inline ::pblczero::Weights_Layer* Weights::release_ip1_mov_b() {
  _has_bits_[0] &= ~0x00001000u;
  ::pblczero::Weights_Layer* temp = ip1_mov_b_;
  ip1_mov_b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::unsafe_arena_release_ip1_mov_b() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip1_mov_b)
  _has_bits_[0] &= ~0x00001000u;
  ::pblczero::Weights_Layer* temp = ip1_mov_b_;
  ip1_mov_b_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::_internal_mutable_ip1_mov_b() {
  _has_bits_[0] |= 0x00001000u;
  if (ip1_mov_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    ip1_mov_b_ = p;
  }
  return ip1_mov_b_;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip1_mov_b() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_ip1_mov_b();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip1_mov_b)
  return _msg;
}
inline void Weights::set_allocated_ip1_mov_b(::pblczero::Weights_Layer* ip1_mov_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip1_mov_b_;
  }
  if (ip1_mov_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(ip1_mov_b);
    if (message_arena != submessage_arena) {
      ip1_mov_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip1_mov_b, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  ip1_mov_b_ = ip1_mov_b;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip1_mov_b)
}

// optional .pblczero.Weights.Layer ip2_mov_w = 15;
inline bool Weights::_internal_has_ip2_mov_w() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || ip2_mov_w_ != nullptr);
  return value;
}
inline bool Weights::has_ip2_mov_w() const {
  return _internal_has_ip2_mov_w();
}
inline void Weights::clear_ip2_mov_w() {
  if (ip2_mov_w_ != nullptr) ip2_mov_w_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip2_mov_w() const {
  const ::pblczero::Weights_Layer* p = ip2_mov_w_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights::ip2_mov_w() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip2_mov_w)
  return _internal_ip2_mov_w();
}
inline void Weights::unsafe_arena_set_allocated_ip2_mov_w(
    ::pblczero::Weights_Layer* ip2_mov_w) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip2_mov_w_);
  }
  ip2_mov_w_ = ip2_mov_w;
  if (ip2_mov_w) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ip2_mov_w)
}
inline ::pblczero::Weights_Layer* Weights::release_ip2_mov_w() {
  _has_bits_[0] &= ~0x00002000u;
  ::pblczero::Weights_Layer* temp = ip2_mov_w_;
  ip2_mov_w_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::unsafe_arena_release_ip2_mov_w() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip2_mov_w)
  _has_bits_[0] &= ~0x00002000u;
  ::pblczero::Weights_Layer* temp = ip2_mov_w_;
  ip2_mov_w_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::_internal_mutable_ip2_mov_w() {
  _has_bits_[0] |= 0x00002000u;
  if (ip2_mov_w_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    ip2_mov_w_ = p;
  }
  return ip2_mov_w_;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip2_mov_w() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_ip2_mov_w();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip2_mov_w)
  return _msg;
}
inline void Weights::set_allocated_ip2_mov_w(::pblczero::Weights_Layer* ip2_mov_w) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip2_mov_w_;
  }
  if (ip2_mov_w) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(ip2_mov_w);
    if (message_arena != submessage_arena) {
      ip2_mov_w = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip2_mov_w, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  ip2_mov_w_ = ip2_mov_w;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip2_mov_w)
}

// optional .pblczero.Weights.Layer ip2_mov_b = 16;
inline bool Weights::_internal_has_ip2_mov_b() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || ip2_mov_b_ != nullptr);
  return value;
}
inline bool Weights::has_ip2_mov_b() const {
  return _internal_has_ip2_mov_b();
}
inline void Weights::clear_ip2_mov_b() {
  if (ip2_mov_b_ != nullptr) ip2_mov_b_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip2_mov_b() const {
  const ::pblczero::Weights_Layer* p = ip2_mov_b_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights_Layer&>(
      ::pblczero::_Weights_Layer_default_instance_);
}
inline const ::pblczero::Weights_Layer& Weights::ip2_mov_b() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip2_mov_b)
  return _internal_ip2_mov_b();
}
inline void Weights::unsafe_arena_set_allocated_ip2_mov_b(
    ::pblczero::Weights_Layer* ip2_mov_b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip2_mov_b_);
  }
  ip2_mov_b_ = ip2_mov_b;
  if (ip2_mov_b) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Weights.ip2_mov_b)
}
inline ::pblczero::Weights_Layer* Weights::release_ip2_mov_b() {
  _has_bits_[0] &= ~0x00004000u;
  ::pblczero::Weights_Layer* temp = ip2_mov_b_;
  ip2_mov_b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::unsafe_arena_release_ip2_mov_b() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip2_mov_b)
  _has_bits_[0] &= ~0x00004000u;
  ::pblczero::Weights_Layer* temp = ip2_mov_b_;
  ip2_mov_b_ = nullptr;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::_internal_mutable_ip2_mov_b() {
  _has_bits_[0] |= 0x00004000u;
  if (ip2_mov_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaForAllocation());
    ip2_mov_b_ = p;
  }
  return ip2_mov_b_;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip2_mov_b() {
  ::pblczero::Weights_Layer* _msg = _internal_mutable_ip2_mov_b();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip2_mov_b)
  return _msg;
}
inline void Weights::set_allocated_ip2_mov_b(::pblczero::Weights_Layer* ip2_mov_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip2_mov_b_;
  }
  if (ip2_mov_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights_Layer>::GetOwningArena(ip2_mov_b);
    if (message_arena != submessage_arena) {
      ip2_mov_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip2_mov_b, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  ip2_mov_b_ = ip2_mov_b;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip2_mov_b)
}

// -------------------------------------------------------------------

// TrainingParams

// optional uint32 training_steps = 1;
inline bool TrainingParams::_internal_has_training_steps() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrainingParams::has_training_steps() const {
  return _internal_has_training_steps();
}
inline void TrainingParams::clear_training_steps() {
  training_steps_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TrainingParams::_internal_training_steps() const {
  return training_steps_;
}
inline uint32_t TrainingParams::training_steps() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.training_steps)
  return _internal_training_steps();
}
inline void TrainingParams::_internal_set_training_steps(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  training_steps_ = value;
}
inline void TrainingParams::set_training_steps(uint32_t value) {
  _internal_set_training_steps(value);
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.training_steps)
}

// optional float learning_rate = 2;
inline bool TrainingParams::_internal_has_learning_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrainingParams::has_learning_rate() const {
  return _internal_has_learning_rate();
}
inline void TrainingParams::clear_learning_rate() {
  learning_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TrainingParams::_internal_learning_rate() const {
  return learning_rate_;
}
inline float TrainingParams::learning_rate() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.learning_rate)
  return _internal_learning_rate();
}
inline void TrainingParams::_internal_set_learning_rate(float value) {
  _has_bits_[0] |= 0x00000004u;
  learning_rate_ = value;
}
inline void TrainingParams::set_learning_rate(float value) {
  _internal_set_learning_rate(value);
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.learning_rate)
}

// optional float mse_loss = 3;
inline bool TrainingParams::_internal_has_mse_loss() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrainingParams::has_mse_loss() const {
  return _internal_has_mse_loss();
}
inline void TrainingParams::clear_mse_loss() {
  mse_loss_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TrainingParams::_internal_mse_loss() const {
  return mse_loss_;
}
inline float TrainingParams::mse_loss() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.mse_loss)
  return _internal_mse_loss();
}
inline void TrainingParams::_internal_set_mse_loss(float value) {
  _has_bits_[0] |= 0x00000008u;
  mse_loss_ = value;
}
inline void TrainingParams::set_mse_loss(float value) {
  _internal_set_mse_loss(value);
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.mse_loss)
}

// optional float policy_loss = 4;
inline bool TrainingParams::_internal_has_policy_loss() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrainingParams::has_policy_loss() const {
  return _internal_has_policy_loss();
}
inline void TrainingParams::clear_policy_loss() {
  policy_loss_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TrainingParams::_internal_policy_loss() const {
  return policy_loss_;
}
inline float TrainingParams::policy_loss() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.policy_loss)
  return _internal_policy_loss();
}
inline void TrainingParams::_internal_set_policy_loss(float value) {
  _has_bits_[0] |= 0x00000010u;
  policy_loss_ = value;
}
inline void TrainingParams::set_policy_loss(float value) {
  _internal_set_policy_loss(value);
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.policy_loss)
}

// optional float accuracy = 5;
inline bool TrainingParams::_internal_has_accuracy() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrainingParams::has_accuracy() const {
  return _internal_has_accuracy();
}
inline void TrainingParams::clear_accuracy() {
  accuracy_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TrainingParams::_internal_accuracy() const {
  return accuracy_;
}
inline float TrainingParams::accuracy() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.accuracy)
  return _internal_accuracy();
}
inline void TrainingParams::_internal_set_accuracy(float value) {
  _has_bits_[0] |= 0x00000020u;
  accuracy_ = value;
}
inline void TrainingParams::set_accuracy(float value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.accuracy)
}

// optional string lc0_params = 6;
inline bool TrainingParams::_internal_has_lc0_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrainingParams::has_lc0_params() const {
  return _internal_has_lc0_params();
}
inline void TrainingParams::clear_lc0_params() {
  lc0_params_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrainingParams::lc0_params() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.lc0_params)
  return _internal_lc0_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrainingParams::set_lc0_params(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 lc0_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.lc0_params)
}
inline std::string* TrainingParams::mutable_lc0_params() {
  std::string* _s = _internal_mutable_lc0_params();
  // @@protoc_insertion_point(field_mutable:pblczero.TrainingParams.lc0_params)
  return _s;
}
inline const std::string& TrainingParams::_internal_lc0_params() const {
  return lc0_params_.Get();
}
inline void TrainingParams::_internal_set_lc0_params(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lc0_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TrainingParams::_internal_mutable_lc0_params() {
  _has_bits_[0] |= 0x00000001u;
  return lc0_params_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TrainingParams::release_lc0_params() {
  // @@protoc_insertion_point(field_release:pblczero.TrainingParams.lc0_params)
  if (!_internal_has_lc0_params()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = lc0_params_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lc0_params_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lc0_params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrainingParams::set_allocated_lc0_params(std::string* lc0_params) {
  if (lc0_params != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lc0_params_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lc0_params,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lc0_params_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lc0_params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pblczero.TrainingParams.lc0_params)
}

// -------------------------------------------------------------------

// NetworkFormat

// optional .pblczero.NetworkFormat.InputFormat input = 1;
inline bool NetworkFormat::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkFormat::has_input() const {
  return _internal_has_input();
}
inline void NetworkFormat::clear_input() {
  input_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pblczero::NetworkFormat_InputFormat NetworkFormat::_internal_input() const {
  return static_cast< ::pblczero::NetworkFormat_InputFormat >(input_);
}
inline ::pblczero::NetworkFormat_InputFormat NetworkFormat::input() const {
  // @@protoc_insertion_point(field_get:pblczero.NetworkFormat.input)
  return _internal_input();
}
inline void NetworkFormat::_internal_set_input(::pblczero::NetworkFormat_InputFormat value) {
  assert(::pblczero::NetworkFormat_InputFormat_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  input_ = value;
}
inline void NetworkFormat::set_input(::pblczero::NetworkFormat_InputFormat value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:pblczero.NetworkFormat.input)
}

// optional .pblczero.NetworkFormat.OutputFormat output = 2;
inline bool NetworkFormat::_internal_has_output() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkFormat::has_output() const {
  return _internal_has_output();
}
inline void NetworkFormat::clear_output() {
  output_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pblczero::NetworkFormat_OutputFormat NetworkFormat::_internal_output() const {
  return static_cast< ::pblczero::NetworkFormat_OutputFormat >(output_);
}
inline ::pblczero::NetworkFormat_OutputFormat NetworkFormat::output() const {
  // @@protoc_insertion_point(field_get:pblczero.NetworkFormat.output)
  return _internal_output();
}
inline void NetworkFormat::_internal_set_output(::pblczero::NetworkFormat_OutputFormat value) {
  assert(::pblczero::NetworkFormat_OutputFormat_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  output_ = value;
}
inline void NetworkFormat::set_output(::pblczero::NetworkFormat_OutputFormat value) {
  _internal_set_output(value);
  // @@protoc_insertion_point(field_set:pblczero.NetworkFormat.output)
}

// optional .pblczero.NetworkFormat.NetworkStructure network = 3;
inline bool NetworkFormat::_internal_has_network() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkFormat::has_network() const {
  return _internal_has_network();
}
inline void NetworkFormat::clear_network() {
  network_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pblczero::NetworkFormat_NetworkStructure NetworkFormat::_internal_network() const {
  return static_cast< ::pblczero::NetworkFormat_NetworkStructure >(network_);
}
inline ::pblczero::NetworkFormat_NetworkStructure NetworkFormat::network() const {
  // @@protoc_insertion_point(field_get:pblczero.NetworkFormat.network)
  return _internal_network();
}
inline void NetworkFormat::_internal_set_network(::pblczero::NetworkFormat_NetworkStructure value) {
  assert(::pblczero::NetworkFormat_NetworkStructure_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  network_ = value;
}
inline void NetworkFormat::set_network(::pblczero::NetworkFormat_NetworkStructure value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:pblczero.NetworkFormat.network)
}

// optional .pblczero.NetworkFormat.PolicyFormat policy = 4;
inline bool NetworkFormat::_internal_has_policy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetworkFormat::has_policy() const {
  return _internal_has_policy();
}
inline void NetworkFormat::clear_policy() {
  policy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pblczero::NetworkFormat_PolicyFormat NetworkFormat::_internal_policy() const {
  return static_cast< ::pblczero::NetworkFormat_PolicyFormat >(policy_);
}
inline ::pblczero::NetworkFormat_PolicyFormat NetworkFormat::policy() const {
  // @@protoc_insertion_point(field_get:pblczero.NetworkFormat.policy)
  return _internal_policy();
}
inline void NetworkFormat::_internal_set_policy(::pblczero::NetworkFormat_PolicyFormat value) {
  assert(::pblczero::NetworkFormat_PolicyFormat_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  policy_ = value;
}
inline void NetworkFormat::set_policy(::pblczero::NetworkFormat_PolicyFormat value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:pblczero.NetworkFormat.policy)
}

// optional .pblczero.NetworkFormat.ValueFormat value = 5;
inline bool NetworkFormat::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetworkFormat::has_value() const {
  return _internal_has_value();
}
inline void NetworkFormat::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pblczero::NetworkFormat_ValueFormat NetworkFormat::_internal_value() const {
  return static_cast< ::pblczero::NetworkFormat_ValueFormat >(value_);
}
inline ::pblczero::NetworkFormat_ValueFormat NetworkFormat::value() const {
  // @@protoc_insertion_point(field_get:pblczero.NetworkFormat.value)
  return _internal_value();
}
inline void NetworkFormat::_internal_set_value(::pblczero::NetworkFormat_ValueFormat value) {
  assert(::pblczero::NetworkFormat_ValueFormat_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  value_ = value;
}
inline void NetworkFormat::set_value(::pblczero::NetworkFormat_ValueFormat value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pblczero.NetworkFormat.value)
}

// optional .pblczero.NetworkFormat.MovesLeftFormat moves_left = 6;
inline bool NetworkFormat::_internal_has_moves_left() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NetworkFormat::has_moves_left() const {
  return _internal_has_moves_left();
}
inline void NetworkFormat::clear_moves_left() {
  moves_left_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::pblczero::NetworkFormat_MovesLeftFormat NetworkFormat::_internal_moves_left() const {
  return static_cast< ::pblczero::NetworkFormat_MovesLeftFormat >(moves_left_);
}
inline ::pblczero::NetworkFormat_MovesLeftFormat NetworkFormat::moves_left() const {
  // @@protoc_insertion_point(field_get:pblczero.NetworkFormat.moves_left)
  return _internal_moves_left();
}
inline void NetworkFormat::_internal_set_moves_left(::pblczero::NetworkFormat_MovesLeftFormat value) {
  assert(::pblczero::NetworkFormat_MovesLeftFormat_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  moves_left_ = value;
}
inline void NetworkFormat::set_moves_left(::pblczero::NetworkFormat_MovesLeftFormat value) {
  _internal_set_moves_left(value);
  // @@protoc_insertion_point(field_set:pblczero.NetworkFormat.moves_left)
}

// -------------------------------------------------------------------

// Format

// optional .pblczero.Format.Encoding weights_encoding = 1;
inline bool Format::_internal_has_weights_encoding() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Format::has_weights_encoding() const {
  return _internal_has_weights_encoding();
}
inline void Format::clear_weights_encoding() {
  weights_encoding_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pblczero::Format_Encoding Format::_internal_weights_encoding() const {
  return static_cast< ::pblczero::Format_Encoding >(weights_encoding_);
}
inline ::pblczero::Format_Encoding Format::weights_encoding() const {
  // @@protoc_insertion_point(field_get:pblczero.Format.weights_encoding)
  return _internal_weights_encoding();
}
inline void Format::_internal_set_weights_encoding(::pblczero::Format_Encoding value) {
  assert(::pblczero::Format_Encoding_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  weights_encoding_ = value;
}
inline void Format::set_weights_encoding(::pblczero::Format_Encoding value) {
  _internal_set_weights_encoding(value);
  // @@protoc_insertion_point(field_set:pblczero.Format.weights_encoding)
}

// optional .pblczero.NetworkFormat network_format = 2;
inline bool Format::_internal_has_network_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || network_format_ != nullptr);
  return value;
}
inline bool Format::has_network_format() const {
  return _internal_has_network_format();
}
inline void Format::clear_network_format() {
  if (network_format_ != nullptr) network_format_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pblczero::NetworkFormat& Format::_internal_network_format() const {
  const ::pblczero::NetworkFormat* p = network_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::NetworkFormat&>(
      ::pblczero::_NetworkFormat_default_instance_);
}
inline const ::pblczero::NetworkFormat& Format::network_format() const {
  // @@protoc_insertion_point(field_get:pblczero.Format.network_format)
  return _internal_network_format();
}
inline void Format::unsafe_arena_set_allocated_network_format(
    ::pblczero::NetworkFormat* network_format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_format_);
  }
  network_format_ = network_format;
  if (network_format) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Format.network_format)
}
inline ::pblczero::NetworkFormat* Format::release_network_format() {
  _has_bits_[0] &= ~0x00000001u;
  ::pblczero::NetworkFormat* temp = network_format_;
  network_format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::NetworkFormat* Format::unsafe_arena_release_network_format() {
  // @@protoc_insertion_point(field_release:pblczero.Format.network_format)
  _has_bits_[0] &= ~0x00000001u;
  ::pblczero::NetworkFormat* temp = network_format_;
  network_format_ = nullptr;
  return temp;
}
inline ::pblczero::NetworkFormat* Format::_internal_mutable_network_format() {
  _has_bits_[0] |= 0x00000001u;
  if (network_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::NetworkFormat>(GetArenaForAllocation());
    network_format_ = p;
  }
  return network_format_;
}
inline ::pblczero::NetworkFormat* Format::mutable_network_format() {
  ::pblczero::NetworkFormat* _msg = _internal_mutable_network_format();
  // @@protoc_insertion_point(field_mutable:pblczero.Format.network_format)
  return _msg;
}
inline void Format::set_allocated_network_format(::pblczero::NetworkFormat* network_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete network_format_;
  }
  if (network_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::NetworkFormat>::GetOwningArena(network_format);
    if (message_arena != submessage_arena) {
      network_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  network_format_ = network_format;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Format.network_format)
}

// -------------------------------------------------------------------

// OnnxModel

// optional bytes model = 1;
inline bool OnnxModel::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OnnxModel::has_model() const {
  return _internal_has_model();
}
inline void OnnxModel::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OnnxModel::model() const {
  // @@protoc_insertion_point(field_get:pblczero.OnnxModel.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OnnxModel::set_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 model_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pblczero.OnnxModel.model)
}
inline std::string* OnnxModel::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:pblczero.OnnxModel.model)
  return _s;
}
inline const std::string& OnnxModel::_internal_model() const {
  return model_.Get();
}
inline void OnnxModel::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OnnxModel::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000001u;
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OnnxModel::release_model() {
  // @@protoc_insertion_point(field_release:pblczero.OnnxModel.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OnnxModel::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pblczero.OnnxModel.model)
}

// optional .pblczero.OnnxModel.DataType data_type = 2;
inline bool OnnxModel::_internal_has_data_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OnnxModel::has_data_type() const {
  return _internal_has_data_type();
}
inline void OnnxModel::clear_data_type() {
  data_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::pblczero::OnnxModel_DataType OnnxModel::_internal_data_type() const {
  return static_cast< ::pblczero::OnnxModel_DataType >(data_type_);
}
inline ::pblczero::OnnxModel_DataType OnnxModel::data_type() const {
  // @@protoc_insertion_point(field_get:pblczero.OnnxModel.data_type)
  return _internal_data_type();
}
inline void OnnxModel::_internal_set_data_type(::pblczero::OnnxModel_DataType value) {
  assert(::pblczero::OnnxModel_DataType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  data_type_ = value;
}
inline void OnnxModel::set_data_type(::pblczero::OnnxModel_DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:pblczero.OnnxModel.data_type)
}

// optional string input_planes = 3;
inline bool OnnxModel::_internal_has_input_planes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OnnxModel::has_input_planes() const {
  return _internal_has_input_planes();
}
inline void OnnxModel::clear_input_planes() {
  input_planes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OnnxModel::input_planes() const {
  // @@protoc_insertion_point(field_get:pblczero.OnnxModel.input_planes)
  return _internal_input_planes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OnnxModel::set_input_planes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 input_planes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pblczero.OnnxModel.input_planes)
}
inline std::string* OnnxModel::mutable_input_planes() {
  std::string* _s = _internal_mutable_input_planes();
  // @@protoc_insertion_point(field_mutable:pblczero.OnnxModel.input_planes)
  return _s;
}
inline const std::string& OnnxModel::_internal_input_planes() const {
  return input_planes_.Get();
}
inline void OnnxModel::_internal_set_input_planes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  input_planes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OnnxModel::_internal_mutable_input_planes() {
  _has_bits_[0] |= 0x00000002u;
  return input_planes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OnnxModel::release_input_planes() {
  // @@protoc_insertion_point(field_release:pblczero.OnnxModel.input_planes)
  if (!_internal_has_input_planes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = input_planes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_planes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_planes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OnnxModel::set_allocated_input_planes(std::string* input_planes) {
  if (input_planes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  input_planes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_planes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_planes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_planes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pblczero.OnnxModel.input_planes)
}

// optional string output_value = 4;
inline bool OnnxModel::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OnnxModel::has_output_value() const {
  return _internal_has_output_value();
}
inline void OnnxModel::clear_output_value() {
  output_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OnnxModel::output_value() const {
  // @@protoc_insertion_point(field_get:pblczero.OnnxModel.output_value)
  return _internal_output_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OnnxModel::set_output_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 output_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pblczero.OnnxModel.output_value)
}
inline std::string* OnnxModel::mutable_output_value() {
  std::string* _s = _internal_mutable_output_value();
  // @@protoc_insertion_point(field_mutable:pblczero.OnnxModel.output_value)
  return _s;
}
inline const std::string& OnnxModel::_internal_output_value() const {
  return output_value_.Get();
}
inline void OnnxModel::_internal_set_output_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  output_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OnnxModel::_internal_mutable_output_value() {
  _has_bits_[0] |= 0x00000004u;
  return output_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OnnxModel::release_output_value() {
  // @@protoc_insertion_point(field_release:pblczero.OnnxModel.output_value)
  if (!_internal_has_output_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = output_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OnnxModel::set_allocated_output_value(std::string* output_value) {
  if (output_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  output_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pblczero.OnnxModel.output_value)
}

// optional string output_wdl = 5;
inline bool OnnxModel::_internal_has_output_wdl() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OnnxModel::has_output_wdl() const {
  return _internal_has_output_wdl();
}
inline void OnnxModel::clear_output_wdl() {
  output_wdl_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OnnxModel::output_wdl() const {
  // @@protoc_insertion_point(field_get:pblczero.OnnxModel.output_wdl)
  return _internal_output_wdl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OnnxModel::set_output_wdl(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 output_wdl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pblczero.OnnxModel.output_wdl)
}
inline std::string* OnnxModel::mutable_output_wdl() {
  std::string* _s = _internal_mutable_output_wdl();
  // @@protoc_insertion_point(field_mutable:pblczero.OnnxModel.output_wdl)
  return _s;
}
inline const std::string& OnnxModel::_internal_output_wdl() const {
  return output_wdl_.Get();
}
inline void OnnxModel::_internal_set_output_wdl(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  output_wdl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OnnxModel::_internal_mutable_output_wdl() {
  _has_bits_[0] |= 0x00000008u;
  return output_wdl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OnnxModel::release_output_wdl() {
  // @@protoc_insertion_point(field_release:pblczero.OnnxModel.output_wdl)
  if (!_internal_has_output_wdl()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = output_wdl_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_wdl_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_wdl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OnnxModel::set_allocated_output_wdl(std::string* output_wdl) {
  if (output_wdl != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  output_wdl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_wdl,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_wdl_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_wdl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pblczero.OnnxModel.output_wdl)
}

// optional string output_policy = 6;
inline bool OnnxModel::_internal_has_output_policy() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OnnxModel::has_output_policy() const {
  return _internal_has_output_policy();
}
inline void OnnxModel::clear_output_policy() {
  output_policy_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& OnnxModel::output_policy() const {
  // @@protoc_insertion_point(field_get:pblczero.OnnxModel.output_policy)
  return _internal_output_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OnnxModel::set_output_policy(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 output_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pblczero.OnnxModel.output_policy)
}
inline std::string* OnnxModel::mutable_output_policy() {
  std::string* _s = _internal_mutable_output_policy();
  // @@protoc_insertion_point(field_mutable:pblczero.OnnxModel.output_policy)
  return _s;
}
inline const std::string& OnnxModel::_internal_output_policy() const {
  return output_policy_.Get();
}
inline void OnnxModel::_internal_set_output_policy(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  output_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OnnxModel::_internal_mutable_output_policy() {
  _has_bits_[0] |= 0x00000010u;
  return output_policy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OnnxModel::release_output_policy() {
  // @@protoc_insertion_point(field_release:pblczero.OnnxModel.output_policy)
  if (!_internal_has_output_policy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = output_policy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_policy_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OnnxModel::set_allocated_output_policy(std::string* output_policy) {
  if (output_policy != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  output_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_policy,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_policy_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pblczero.OnnxModel.output_policy)
}

// optional string output_mlh = 7;
inline bool OnnxModel::_internal_has_output_mlh() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OnnxModel::has_output_mlh() const {
  return _internal_has_output_mlh();
}
inline void OnnxModel::clear_output_mlh() {
  output_mlh_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& OnnxModel::output_mlh() const {
  // @@protoc_insertion_point(field_get:pblczero.OnnxModel.output_mlh)
  return _internal_output_mlh();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OnnxModel::set_output_mlh(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 output_mlh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pblczero.OnnxModel.output_mlh)
}
inline std::string* OnnxModel::mutable_output_mlh() {
  std::string* _s = _internal_mutable_output_mlh();
  // @@protoc_insertion_point(field_mutable:pblczero.OnnxModel.output_mlh)
  return _s;
}
inline const std::string& OnnxModel::_internal_output_mlh() const {
  return output_mlh_.Get();
}
inline void OnnxModel::_internal_set_output_mlh(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  output_mlh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OnnxModel::_internal_mutable_output_mlh() {
  _has_bits_[0] |= 0x00000020u;
  return output_mlh_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OnnxModel::release_output_mlh() {
  // @@protoc_insertion_point(field_release:pblczero.OnnxModel.output_mlh)
  if (!_internal_has_output_mlh()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = output_mlh_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_mlh_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_mlh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OnnxModel::set_allocated_output_mlh(std::string* output_mlh) {
  if (output_mlh != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  output_mlh_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_mlh,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_mlh_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_mlh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pblczero.OnnxModel.output_mlh)
}

// -------------------------------------------------------------------

// Net

// optional fixed32 magic = 1;
inline bool Net::_internal_has_magic() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Net::has_magic() const {
  return _internal_has_magic();
}
inline void Net::clear_magic() {
  magic_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t Net::_internal_magic() const {
  return magic_;
}
inline uint32_t Net::magic() const {
  // @@protoc_insertion_point(field_get:pblczero.Net.magic)
  return _internal_magic();
}
inline void Net::_internal_set_magic(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  magic_ = value;
}
inline void Net::set_magic(uint32_t value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:pblczero.Net.magic)
}

// optional string license = 2;
inline bool Net::_internal_has_license() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Net::has_license() const {
  return _internal_has_license();
}
inline void Net::clear_license() {
  license_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Net::license() const {
  // @@protoc_insertion_point(field_get:pblczero.Net.license)
  return _internal_license();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Net::set_license(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pblczero.Net.license)
}
inline std::string* Net::mutable_license() {
  std::string* _s = _internal_mutable_license();
  // @@protoc_insertion_point(field_mutable:pblczero.Net.license)
  return _s;
}
inline const std::string& Net::_internal_license() const {
  return license_.Get();
}
inline void Net::_internal_set_license(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Net::_internal_mutable_license() {
  _has_bits_[0] |= 0x00000001u;
  return license_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Net::release_license() {
  // @@protoc_insertion_point(field_release:pblczero.Net.license)
  if (!_internal_has_license()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = license_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (license_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Net::set_allocated_license(std::string* license) {
  if (license != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  license_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), license,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (license_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.license)
}

// optional .pblczero.EngineVersion min_version = 3;
inline bool Net::_internal_has_min_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || min_version_ != nullptr);
  return value;
}
inline bool Net::has_min_version() const {
  return _internal_has_min_version();
}
inline void Net::clear_min_version() {
  if (min_version_ != nullptr) min_version_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pblczero::EngineVersion& Net::_internal_min_version() const {
  const ::pblczero::EngineVersion* p = min_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::EngineVersion&>(
      ::pblczero::_EngineVersion_default_instance_);
}
inline const ::pblczero::EngineVersion& Net::min_version() const {
  // @@protoc_insertion_point(field_get:pblczero.Net.min_version)
  return _internal_min_version();
}
inline void Net::unsafe_arena_set_allocated_min_version(
    ::pblczero::EngineVersion* min_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_version_);
  }
  min_version_ = min_version;
  if (min_version) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Net.min_version)
}
inline ::pblczero::EngineVersion* Net::release_min_version() {
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::EngineVersion* temp = min_version_;
  min_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::EngineVersion* Net::unsafe_arena_release_min_version() {
  // @@protoc_insertion_point(field_release:pblczero.Net.min_version)
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::EngineVersion* temp = min_version_;
  min_version_ = nullptr;
  return temp;
}
inline ::pblczero::EngineVersion* Net::_internal_mutable_min_version() {
  _has_bits_[0] |= 0x00000002u;
  if (min_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::EngineVersion>(GetArenaForAllocation());
    min_version_ = p;
  }
  return min_version_;
}
inline ::pblczero::EngineVersion* Net::mutable_min_version() {
  ::pblczero::EngineVersion* _msg = _internal_mutable_min_version();
  // @@protoc_insertion_point(field_mutable:pblczero.Net.min_version)
  return _msg;
}
inline void Net::set_allocated_min_version(::pblczero::EngineVersion* min_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete min_version_;
  }
  if (min_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::EngineVersion>::GetOwningArena(min_version);
    if (message_arena != submessage_arena) {
      min_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  min_version_ = min_version;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.min_version)
}

// optional .pblczero.Format format = 4;
inline bool Net::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || format_ != nullptr);
  return value;
}
inline bool Net::has_format() const {
  return _internal_has_format();
}
inline void Net::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pblczero::Format& Net::_internal_format() const {
  const ::pblczero::Format* p = format_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Format&>(
      ::pblczero::_Format_default_instance_);
}
inline const ::pblczero::Format& Net::format() const {
  // @@protoc_insertion_point(field_get:pblczero.Net.format)
  return _internal_format();
}
inline void Net::unsafe_arena_set_allocated_format(
    ::pblczero::Format* format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  format_ = format;
  if (format) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Net.format)
}
inline ::pblczero::Format* Net::release_format() {
  _has_bits_[0] &= ~0x00000004u;
  ::pblczero::Format* temp = format_;
  format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Format* Net::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:pblczero.Net.format)
  _has_bits_[0] &= ~0x00000004u;
  ::pblczero::Format* temp = format_;
  format_ = nullptr;
  return temp;
}
inline ::pblczero::Format* Net::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000004u;
  if (format_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Format>(GetArenaForAllocation());
    format_ = p;
  }
  return format_;
}
inline ::pblczero::Format* Net::mutable_format() {
  ::pblczero::Format* _msg = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:pblczero.Net.format)
  return _msg;
}
inline void Net::set_allocated_format(::pblczero::Format* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete format_;
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Format>::GetOwningArena(format);
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.format)
}

// optional .pblczero.TrainingParams training_params = 5;
inline bool Net::_internal_has_training_params() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || training_params_ != nullptr);
  return value;
}
inline bool Net::has_training_params() const {
  return _internal_has_training_params();
}
inline void Net::clear_training_params() {
  if (training_params_ != nullptr) training_params_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::pblczero::TrainingParams& Net::_internal_training_params() const {
  const ::pblczero::TrainingParams* p = training_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::TrainingParams&>(
      ::pblczero::_TrainingParams_default_instance_);
}
inline const ::pblczero::TrainingParams& Net::training_params() const {
  // @@protoc_insertion_point(field_get:pblczero.Net.training_params)
  return _internal_training_params();
}
inline void Net::unsafe_arena_set_allocated_training_params(
    ::pblczero::TrainingParams* training_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(training_params_);
  }
  training_params_ = training_params;
  if (training_params) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Net.training_params)
}
inline ::pblczero::TrainingParams* Net::release_training_params() {
  _has_bits_[0] &= ~0x00000008u;
  ::pblczero::TrainingParams* temp = training_params_;
  training_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::TrainingParams* Net::unsafe_arena_release_training_params() {
  // @@protoc_insertion_point(field_release:pblczero.Net.training_params)
  _has_bits_[0] &= ~0x00000008u;
  ::pblczero::TrainingParams* temp = training_params_;
  training_params_ = nullptr;
  return temp;
}
inline ::pblczero::TrainingParams* Net::_internal_mutable_training_params() {
  _has_bits_[0] |= 0x00000008u;
  if (training_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::TrainingParams>(GetArenaForAllocation());
    training_params_ = p;
  }
  return training_params_;
}
inline ::pblczero::TrainingParams* Net::mutable_training_params() {
  ::pblczero::TrainingParams* _msg = _internal_mutable_training_params();
  // @@protoc_insertion_point(field_mutable:pblczero.Net.training_params)
  return _msg;
}
inline void Net::set_allocated_training_params(::pblczero::TrainingParams* training_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete training_params_;
  }
  if (training_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::TrainingParams>::GetOwningArena(training_params);
    if (message_arena != submessage_arena) {
      training_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, training_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  training_params_ = training_params;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.training_params)
}

// optional .pblczero.Weights weights = 10;
inline bool Net::_internal_has_weights() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || weights_ != nullptr);
  return value;
}
inline bool Net::has_weights() const {
  return _internal_has_weights();
}
inline void Net::clear_weights() {
  if (weights_ != nullptr) weights_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::pblczero::Weights& Net::_internal_weights() const {
  const ::pblczero::Weights* p = weights_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::Weights&>(
      ::pblczero::_Weights_default_instance_);
}
inline const ::pblczero::Weights& Net::weights() const {
  // @@protoc_insertion_point(field_get:pblczero.Net.weights)
  return _internal_weights();
}
inline void Net::unsafe_arena_set_allocated_weights(
    ::pblczero::Weights* weights) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weights_);
  }
  weights_ = weights;
  if (weights) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Net.weights)
}
inline ::pblczero::Weights* Net::release_weights() {
  _has_bits_[0] &= ~0x00000010u;
  ::pblczero::Weights* temp = weights_;
  weights_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::Weights* Net::unsafe_arena_release_weights() {
  // @@protoc_insertion_point(field_release:pblczero.Net.weights)
  _has_bits_[0] &= ~0x00000010u;
  ::pblczero::Weights* temp = weights_;
  weights_ = nullptr;
  return temp;
}
inline ::pblczero::Weights* Net::_internal_mutable_weights() {
  _has_bits_[0] |= 0x00000010u;
  if (weights_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::Weights>(GetArenaForAllocation());
    weights_ = p;
  }
  return weights_;
}
inline ::pblczero::Weights* Net::mutable_weights() {
  ::pblczero::Weights* _msg = _internal_mutable_weights();
  // @@protoc_insertion_point(field_mutable:pblczero.Net.weights)
  return _msg;
}
inline void Net::set_allocated_weights(::pblczero::Weights* weights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete weights_;
  }
  if (weights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::Weights>::GetOwningArena(weights);
    if (message_arena != submessage_arena) {
      weights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  weights_ = weights;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.weights)
}

// optional .pblczero.OnnxModel onnx_model = 11;
inline bool Net::_internal_has_onnx_model() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || onnx_model_ != nullptr);
  return value;
}
inline bool Net::has_onnx_model() const {
  return _internal_has_onnx_model();
}
inline void Net::clear_onnx_model() {
  if (onnx_model_ != nullptr) onnx_model_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::pblczero::OnnxModel& Net::_internal_onnx_model() const {
  const ::pblczero::OnnxModel* p = onnx_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::pblczero::OnnxModel&>(
      ::pblczero::_OnnxModel_default_instance_);
}
inline const ::pblczero::OnnxModel& Net::onnx_model() const {
  // @@protoc_insertion_point(field_get:pblczero.Net.onnx_model)
  return _internal_onnx_model();
}
inline void Net::unsafe_arena_set_allocated_onnx_model(
    ::pblczero::OnnxModel* onnx_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(onnx_model_);
  }
  onnx_model_ = onnx_model;
  if (onnx_model) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pblczero.Net.onnx_model)
}
inline ::pblczero::OnnxModel* Net::release_onnx_model() {
  _has_bits_[0] &= ~0x00000020u;
  ::pblczero::OnnxModel* temp = onnx_model_;
  onnx_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pblczero::OnnxModel* Net::unsafe_arena_release_onnx_model() {
  // @@protoc_insertion_point(field_release:pblczero.Net.onnx_model)
  _has_bits_[0] &= ~0x00000020u;
  ::pblczero::OnnxModel* temp = onnx_model_;
  onnx_model_ = nullptr;
  return temp;
}
inline ::pblczero::OnnxModel* Net::_internal_mutable_onnx_model() {
  _has_bits_[0] |= 0x00000020u;
  if (onnx_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::OnnxModel>(GetArenaForAllocation());
    onnx_model_ = p;
  }
  return onnx_model_;
}
inline ::pblczero::OnnxModel* Net::mutable_onnx_model() {
  ::pblczero::OnnxModel* _msg = _internal_mutable_onnx_model();
  // @@protoc_insertion_point(field_mutable:pblczero.Net.onnx_model)
  return _msg;
}
inline void Net::set_allocated_onnx_model(::pblczero::OnnxModel* onnx_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete onnx_model_;
  }
  if (onnx_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pblczero::OnnxModel>::GetOwningArena(onnx_model);
    if (message_arena != submessage_arena) {
      onnx_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onnx_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  onnx_model_ = onnx_model;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.onnx_model)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pblczero

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pblczero::NetworkFormat_InputFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pblczero::NetworkFormat_InputFormat>() {
  return ::pblczero::NetworkFormat_InputFormat_descriptor();
}
template <> struct is_proto_enum< ::pblczero::NetworkFormat_OutputFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pblczero::NetworkFormat_OutputFormat>() {
  return ::pblczero::NetworkFormat_OutputFormat_descriptor();
}
template <> struct is_proto_enum< ::pblczero::NetworkFormat_NetworkStructure> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pblczero::NetworkFormat_NetworkStructure>() {
  return ::pblczero::NetworkFormat_NetworkStructure_descriptor();
}
template <> struct is_proto_enum< ::pblczero::NetworkFormat_PolicyFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pblczero::NetworkFormat_PolicyFormat>() {
  return ::pblczero::NetworkFormat_PolicyFormat_descriptor();
}
template <> struct is_proto_enum< ::pblczero::NetworkFormat_ValueFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pblczero::NetworkFormat_ValueFormat>() {
  return ::pblczero::NetworkFormat_ValueFormat_descriptor();
}
template <> struct is_proto_enum< ::pblczero::NetworkFormat_MovesLeftFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pblczero::NetworkFormat_MovesLeftFormat>() {
  return ::pblczero::NetworkFormat_MovesLeftFormat_descriptor();
}
template <> struct is_proto_enum< ::pblczero::Format_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pblczero::Format_Encoding>() {
  return ::pblczero::Format_Encoding_descriptor();
}
template <> struct is_proto_enum< ::pblczero::OnnxModel_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pblczero::OnnxModel_DataType>() {
  return ::pblczero::OnnxModel_DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_net_2eproto
