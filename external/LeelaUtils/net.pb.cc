// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pblczero {
constexpr EngineVersion::EngineVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : major_(0u)
  , minor_(0u)
  , patch_(0u){}
struct EngineVersionDefaultTypeInternal {
  constexpr EngineVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EngineVersionDefaultTypeInternal() {}
  union {
    EngineVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EngineVersionDefaultTypeInternal _EngineVersion_default_instance_;
constexpr Weights_Layer::Weights_Layer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , min_val_(0)
  , max_val_(0){}
struct Weights_LayerDefaultTypeInternal {
  constexpr Weights_LayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Weights_LayerDefaultTypeInternal() {}
  union {
    Weights_Layer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Weights_LayerDefaultTypeInternal _Weights_Layer_default_instance_;
constexpr Weights_ConvBlock::Weights_ConvBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weights_(nullptr)
  , biases_(nullptr)
  , bn_means_(nullptr)
  , bn_stddivs_(nullptr)
  , bn_gammas_(nullptr)
  , bn_betas_(nullptr){}
struct Weights_ConvBlockDefaultTypeInternal {
  constexpr Weights_ConvBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Weights_ConvBlockDefaultTypeInternal() {}
  union {
    Weights_ConvBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Weights_ConvBlockDefaultTypeInternal _Weights_ConvBlock_default_instance_;
constexpr Weights_SEunit::Weights_SEunit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : w1_(nullptr)
  , b1_(nullptr)
  , w2_(nullptr)
  , b2_(nullptr){}
struct Weights_SEunitDefaultTypeInternal {
  constexpr Weights_SEunitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Weights_SEunitDefaultTypeInternal() {}
  union {
    Weights_SEunit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Weights_SEunitDefaultTypeInternal _Weights_SEunit_default_instance_;
constexpr Weights_Residual::Weights_Residual(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conv1_(nullptr)
  , conv2_(nullptr)
  , se_(nullptr){}
struct Weights_ResidualDefaultTypeInternal {
  constexpr Weights_ResidualDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Weights_ResidualDefaultTypeInternal() {}
  union {
    Weights_Residual _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Weights_ResidualDefaultTypeInternal _Weights_Residual_default_instance_;
constexpr Weights::Weights(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : residual_()
  , input_(nullptr)
  , policy_(nullptr)
  , ip_pol_w_(nullptr)
  , ip_pol_b_(nullptr)
  , value_(nullptr)
  , ip1_val_w_(nullptr)
  , ip1_val_b_(nullptr)
  , ip2_val_w_(nullptr)
  , ip2_val_b_(nullptr)
  , policy1_(nullptr)
  , moves_left_(nullptr)
  , ip1_mov_w_(nullptr)
  , ip1_mov_b_(nullptr)
  , ip2_mov_w_(nullptr)
  , ip2_mov_b_(nullptr){}
struct WeightsDefaultTypeInternal {
  constexpr WeightsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WeightsDefaultTypeInternal() {}
  union {
    Weights _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WeightsDefaultTypeInternal _Weights_default_instance_;
constexpr TrainingParams::TrainingParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lc0_params_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , training_steps_(0u)
  , learning_rate_(0)
  , mse_loss_(0)
  , policy_loss_(0)
  , accuracy_(0){}
struct TrainingParamsDefaultTypeInternal {
  constexpr TrainingParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrainingParamsDefaultTypeInternal() {}
  union {
    TrainingParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrainingParamsDefaultTypeInternal _TrainingParams_default_instance_;
constexpr NetworkFormat::NetworkFormat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_(0)

  , output_(0)

  , network_(0)

  , policy_(0)

  , value_(0)

  , moves_left_(0)
{}
struct NetworkFormatDefaultTypeInternal {
  constexpr NetworkFormatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetworkFormatDefaultTypeInternal() {}
  union {
    NetworkFormat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetworkFormatDefaultTypeInternal _NetworkFormat_default_instance_;
constexpr Format::Format(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : network_format_(nullptr)
  , weights_encoding_(0)
{}
struct FormatDefaultTypeInternal {
  constexpr FormatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormatDefaultTypeInternal() {}
  union {
    Format _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormatDefaultTypeInternal _Format_default_instance_;
constexpr OnnxModel::OnnxModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_planes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_wdl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_policy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_mlh_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_type_(0)
{}
struct OnnxModelDefaultTypeInternal {
  constexpr OnnxModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnnxModelDefaultTypeInternal() {}
  union {
    OnnxModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnnxModelDefaultTypeInternal _OnnxModel_default_instance_;
constexpr Net::Net(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : license_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , min_version_(nullptr)
  , format_(nullptr)
  , training_params_(nullptr)
  , weights_(nullptr)
  , onnx_model_(nullptr)
  , magic_(0u){}
struct NetDefaultTypeInternal {
  constexpr NetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetDefaultTypeInternal() {}
  union {
    Net _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetDefaultTypeInternal _Net_default_instance_;
}  // namespace pblczero
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_net_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_net_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_net_2eproto = nullptr;

const uint32_t TableStruct_net_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pblczero::EngineVersion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::EngineVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::EngineVersion, major_),
  PROTOBUF_FIELD_OFFSET(::pblczero::EngineVersion, minor_),
  PROTOBUF_FIELD_OFFSET(::pblczero::EngineVersion, patch_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_Layer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_Layer, min_val_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_Layer, max_val_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_Layer, params_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_ConvBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_ConvBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_ConvBlock, weights_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_ConvBlock, biases_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_ConvBlock, bn_means_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_ConvBlock, bn_stddivs_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_ConvBlock, bn_gammas_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_ConvBlock, bn_betas_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_SEunit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_SEunit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_SEunit, w1_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_SEunit, b1_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_SEunit, w2_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_SEunit, b2_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_Residual, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_Residual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_Residual, conv1_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_Residual, conv2_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights_Residual, se_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, input_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, residual_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, policy1_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, policy_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, ip_pol_w_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, ip_pol_b_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, value_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, ip1_val_w_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, ip1_val_b_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, ip2_val_w_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, ip2_val_b_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, moves_left_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, ip1_mov_w_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, ip1_mov_b_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, ip2_mov_w_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Weights, ip2_mov_b_),
  0,
  ~0u,
  9,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::pblczero::TrainingParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::TrainingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::TrainingParams, training_steps_),
  PROTOBUF_FIELD_OFFSET(::pblczero::TrainingParams, learning_rate_),
  PROTOBUF_FIELD_OFFSET(::pblczero::TrainingParams, mse_loss_),
  PROTOBUF_FIELD_OFFSET(::pblczero::TrainingParams, policy_loss_),
  PROTOBUF_FIELD_OFFSET(::pblczero::TrainingParams, accuracy_),
  PROTOBUF_FIELD_OFFSET(::pblczero::TrainingParams, lc0_params_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::pblczero::NetworkFormat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::NetworkFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::NetworkFormat, input_),
  PROTOBUF_FIELD_OFFSET(::pblczero::NetworkFormat, output_),
  PROTOBUF_FIELD_OFFSET(::pblczero::NetworkFormat, network_),
  PROTOBUF_FIELD_OFFSET(::pblczero::NetworkFormat, policy_),
  PROTOBUF_FIELD_OFFSET(::pblczero::NetworkFormat, value_),
  PROTOBUF_FIELD_OFFSET(::pblczero::NetworkFormat, moves_left_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::pblczero::Format, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Format, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::Format, weights_encoding_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Format, network_format_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pblczero::OnnxModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::OnnxModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::OnnxModel, model_),
  PROTOBUF_FIELD_OFFSET(::pblczero::OnnxModel, data_type_),
  PROTOBUF_FIELD_OFFSET(::pblczero::OnnxModel, input_planes_),
  PROTOBUF_FIELD_OFFSET(::pblczero::OnnxModel, output_value_),
  PROTOBUF_FIELD_OFFSET(::pblczero::OnnxModel, output_wdl_),
  PROTOBUF_FIELD_OFFSET(::pblczero::OnnxModel, output_policy_),
  PROTOBUF_FIELD_OFFSET(::pblczero::OnnxModel, output_mlh_),
  0,
  6,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::pblczero::Net, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Net, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pblczero::Net, magic_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Net, license_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Net, min_version_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Net, format_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Net, training_params_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Net, weights_),
  PROTOBUF_FIELD_OFFSET(::pblczero::Net, onnx_model_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::pblczero::EngineVersion)},
  { 12, 21, -1, sizeof(::pblczero::Weights_Layer)},
  { 24, 36, -1, sizeof(::pblczero::Weights_ConvBlock)},
  { 42, 52, -1, sizeof(::pblczero::Weights_SEunit)},
  { 56, 65, -1, sizeof(::pblczero::Weights_Residual)},
  { 68, 90, -1, sizeof(::pblczero::Weights)},
  { 106, 118, -1, sizeof(::pblczero::TrainingParams)},
  { 124, 136, -1, sizeof(::pblczero::NetworkFormat)},
  { 142, 150, -1, sizeof(::pblczero::Format)},
  { 152, 165, -1, sizeof(::pblczero::OnnxModel)},
  { 172, 185, -1, sizeof(::pblczero::Net)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_EngineVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_Weights_Layer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_Weights_ConvBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_Weights_SEunit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_Weights_Residual_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_Weights_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_TrainingParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_NetworkFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_Format_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_OnnxModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pblczero::_Net_default_instance_),
};

const char descriptor_table_protodef_net_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnet.proto\022\010pblczero\"<\n\rEngineVersion\022\r"
  "\n\005major\030\001 \001(\r\022\r\n\005minor\030\002 \001(\r\022\r\n\005patch\030\003 "
  "\001(\r\"\306\n\n\007Weights\022*\n\005input\030\001 \001(\0132\033.pblczer"
  "o.Weights.ConvBlock\022,\n\010residual\030\002 \003(\0132\032."
  "pblczero.Weights.Residual\022,\n\007policy1\030\013 \001"
  "(\0132\033.pblczero.Weights.ConvBlock\022+\n\006polic"
  "y\030\003 \001(\0132\033.pblczero.Weights.ConvBlock\022)\n\010"
  "ip_pol_w\030\004 \001(\0132\027.pblczero.Weights.Layer\022"
  ")\n\010ip_pol_b\030\005 \001(\0132\027.pblczero.Weights.Lay"
  "er\022*\n\005value\030\006 \001(\0132\033.pblczero.Weights.Con"
  "vBlock\022*\n\tip1_val_w\030\007 \001(\0132\027.pblczero.Wei"
  "ghts.Layer\022*\n\tip1_val_b\030\010 \001(\0132\027.pblczero"
  ".Weights.Layer\022*\n\tip2_val_w\030\t \001(\0132\027.pblc"
  "zero.Weights.Layer\022*\n\tip2_val_b\030\n \001(\0132\027."
  "pblczero.Weights.Layer\022/\n\nmoves_left\030\014 \001"
  "(\0132\033.pblczero.Weights.ConvBlock\022*\n\tip1_m"
  "ov_w\030\r \001(\0132\027.pblczero.Weights.Layer\022*\n\ti"
  "p1_mov_b\030\016 \001(\0132\027.pblczero.Weights.Layer\022"
  "*\n\tip2_mov_w\030\017 \001(\0132\027.pblczero.Weights.La"
  "yer\022*\n\tip2_mov_b\030\020 \001(\0132\027.pblczero.Weight"
  "s.Layer\0329\n\005Layer\022\017\n\007min_val\030\001 \001(\002\022\017\n\007max"
  "_val\030\002 \001(\002\022\016\n\006params\030\003 \001(\014\032\215\002\n\tConvBlock"
  "\022(\n\007weights\030\001 \001(\0132\027.pblczero.Weights.Lay"
  "er\022\'\n\006biases\030\002 \001(\0132\027.pblczero.Weights.La"
  "yer\022)\n\010bn_means\030\003 \001(\0132\027.pblczero.Weights"
  ".Layer\022+\n\nbn_stddivs\030\004 \001(\0132\027.pblczero.We"
  "ights.Layer\022*\n\tbn_gammas\030\005 \001(\0132\027.pblczer"
  "o.Weights.Layer\022)\n\010bn_betas\030\006 \001(\0132\027.pblc"
  "zero.Weights.Layer\032\234\001\n\006SEunit\022#\n\002w1\030\001 \001("
  "\0132\027.pblczero.Weights.Layer\022#\n\002b1\030\002 \001(\0132\027"
  ".pblczero.Weights.Layer\022#\n\002w2\030\003 \001(\0132\027.pb"
  "lczero.Weights.Layer\022#\n\002b2\030\004 \001(\0132\027.pblcz"
  "ero.Weights.Layer\032\210\001\n\010Residual\022*\n\005conv1\030"
  "\001 \001(\0132\033.pblczero.Weights.ConvBlock\022*\n\005co"
  "nv2\030\002 \001(\0132\033.pblczero.Weights.ConvBlock\022$"
  "\n\002se\030\003 \001(\0132\030.pblczero.Weights.SEunit\"\214\001\n"
  "\016TrainingParams\022\026\n\016training_steps\030\001 \001(\r\022"
  "\025\n\rlearning_rate\030\002 \001(\002\022\020\n\010mse_loss\030\003 \001(\002"
  "\022\023\n\013policy_loss\030\004 \001(\002\022\020\n\010accuracy\030\005 \001(\002\022"
  "\022\n\nlc0_params\030\006 \001(\t\"\205\t\n\rNetworkFormat\0222\n"
  "\005input\030\001 \001(\0162#.pblczero.NetworkFormat.In"
  "putFormat\0224\n\006output\030\002 \001(\0162$.pblczero.Net"
  "workFormat.OutputFormat\0229\n\007network\030\003 \001(\016"
  "2(.pblczero.NetworkFormat.NetworkStructu"
  "re\0224\n\006policy\030\004 \001(\0162$.pblczero.NetworkFor"
  "mat.PolicyFormat\0222\n\005value\030\005 \001(\0162#.pblcze"
  "ro.NetworkFormat.ValueFormat\022;\n\nmoves_le"
  "ft\030\006 \001(\0162\'.pblczero.NetworkFormat.MovesL"
  "eftFormat\"\317\002\n\013InputFormat\022\021\n\rINPUT_UNKNO"
  "WN\020\000\022\035\n\031INPUT_CLASSICAL_112_PLANE\020\001\022!\n\035I"
  "NPUT_112_WITH_CASTLING_PLANE\020\002\022#\n\037INPUT_"
  "112_WITH_CANONICALIZATION\020\003\022.\n*INPUT_112"
  "_WITH_CANONICALIZATION_HECTOPLIES\020\004\022:\n5I"
  "NPUT_112_WITH_CANONICALIZATION_HECTOPLIE"
  "S_ARMAGEDDON\020\204\001\022&\n\"INPUT_112_WITH_CANONI"
  "CALIZATION_V2\020\005\0222\n-INPUT_112_WITH_CANONI"
  "CALIZATION_V2_ARMAGEDDON\020\205\001\"H\n\014OutputFor"
  "mat\022\022\n\016OUTPUT_UNKNOWN\020\000\022\024\n\020OUTPUT_CLASSI"
  "CAL\020\001\022\016\n\nOUTPUT_WDL\020\002\"\247\001\n\020NetworkStructu"
  "re\022\023\n\017NETWORK_UNKNOWN\020\000\022\025\n\021NETWORK_CLASS"
  "ICAL\020\001\022\016\n\nNETWORK_SE\020\002\022%\n!NETWORK_CLASSI"
  "CAL_WITH_HEADFORMAT\020\003\022\036\n\032NETWORK_SE_WITH"
  "_HEADFORMAT\020\004\022\020\n\014NETWORK_ONNX\020\005\"P\n\014Polic"
  "yFormat\022\022\n\016POLICY_UNKNOWN\020\000\022\024\n\020POLICY_CL"
  "ASSICAL\020\001\022\026\n\022POLICY_CONVOLUTION\020\002\"U\n\013Val"
  "ueFormat\022\021\n\rVALUE_UNKNOWN\020\000\022\023\n\017VALUE_CLA"
  "SSICAL\020\001\022\r\n\tVALUE_WDL\020\002\022\017\n\013VALUE_PARAM\020\003"
  "\"9\n\017MovesLeftFormat\022\023\n\017MOVES_LEFT_NONE\020\000"
  "\022\021\n\rMOVES_LEFT_V1\020\001\"\225\001\n\006Format\0223\n\020weight"
  "s_encoding\030\001 \001(\0162\031.pblczero.Format.Encod"
  "ing\022/\n\016network_format\030\002 \001(\0132\027.pblczero.N"
  "etworkFormat\"%\n\010Encoding\022\013\n\007UNKNOWN\020\000\022\014\n"
  "\010LINEAR16\020\001\"\376\001\n\tOnnxModel\022\r\n\005model\030\001 \001(\014"
  "\022/\n\tdata_type\030\002 \001(\0162\034.pblczero.OnnxModel"
  ".DataType\022\024\n\014input_planes\030\003 \001(\t\022\024\n\014outpu"
  "t_value\030\004 \001(\t\022\022\n\noutput_wdl\030\005 \001(\t\022\025\n\rout"
  "put_policy\030\006 \001(\t\022\022\n\noutput_mlh\030\007 \001(\t\"F\n\010"
  "DataType\022\024\n\020UNKNOWN_DATATYPE\020\000\022\t\n\005FLOAT\020"
  "\001\022\013\n\007FLOAT16\020\n\022\014\n\010BFLOAT16\020\020\"\365\001\n\003Net\022\r\n\005"
  "magic\030\001 \001(\007\022\017\n\007license\030\002 \001(\t\022,\n\013min_vers"
  "ion\030\003 \001(\0132\027.pblczero.EngineVersion\022 \n\006fo"
  "rmat\030\004 \001(\0132\020.pblczero.Format\0221\n\017training"
  "_params\030\005 \001(\0132\030.pblczero.TrainingParams\022"
  "\"\n\007weights\030\n \001(\0132\021.pblczero.Weights\022\'\n\no"
  "nnx_model\030\013 \001(\0132\023.pblczero.OnnxModel"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_net_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_2eproto = {
  false, false, 3396, descriptor_table_protodef_net_2eproto, "net.proto", 
  &descriptor_table_net_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_net_2eproto::offsets,
  file_level_metadata_net_2eproto, file_level_enum_descriptors_net_2eproto, file_level_service_descriptors_net_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_net_2eproto_getter() {
  return &descriptor_table_net_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_net_2eproto(&descriptor_table_net_2eproto);
namespace pblczero {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_InputFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[0];
}
bool NetworkFormat_InputFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 132:
    case 133:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetworkFormat_InputFormat NetworkFormat::INPUT_UNKNOWN;
constexpr NetworkFormat_InputFormat NetworkFormat::INPUT_CLASSICAL_112_PLANE;
constexpr NetworkFormat_InputFormat NetworkFormat::INPUT_112_WITH_CASTLING_PLANE;
constexpr NetworkFormat_InputFormat NetworkFormat::INPUT_112_WITH_CANONICALIZATION;
constexpr NetworkFormat_InputFormat NetworkFormat::INPUT_112_WITH_CANONICALIZATION_HECTOPLIES;
constexpr NetworkFormat_InputFormat NetworkFormat::INPUT_112_WITH_CANONICALIZATION_HECTOPLIES_ARMAGEDDON;
constexpr NetworkFormat_InputFormat NetworkFormat::INPUT_112_WITH_CANONICALIZATION_V2;
constexpr NetworkFormat_InputFormat NetworkFormat::INPUT_112_WITH_CANONICALIZATION_V2_ARMAGEDDON;
constexpr NetworkFormat_InputFormat NetworkFormat::InputFormat_MIN;
constexpr NetworkFormat_InputFormat NetworkFormat::InputFormat_MAX;
constexpr int NetworkFormat::InputFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_OutputFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[1];
}
bool NetworkFormat_OutputFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetworkFormat_OutputFormat NetworkFormat::OUTPUT_UNKNOWN;
constexpr NetworkFormat_OutputFormat NetworkFormat::OUTPUT_CLASSICAL;
constexpr NetworkFormat_OutputFormat NetworkFormat::OUTPUT_WDL;
constexpr NetworkFormat_OutputFormat NetworkFormat::OutputFormat_MIN;
constexpr NetworkFormat_OutputFormat NetworkFormat::OutputFormat_MAX;
constexpr int NetworkFormat::OutputFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_NetworkStructure_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[2];
}
bool NetworkFormat_NetworkStructure_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetworkFormat_NetworkStructure NetworkFormat::NETWORK_UNKNOWN;
constexpr NetworkFormat_NetworkStructure NetworkFormat::NETWORK_CLASSICAL;
constexpr NetworkFormat_NetworkStructure NetworkFormat::NETWORK_SE;
constexpr NetworkFormat_NetworkStructure NetworkFormat::NETWORK_CLASSICAL_WITH_HEADFORMAT;
constexpr NetworkFormat_NetworkStructure NetworkFormat::NETWORK_SE_WITH_HEADFORMAT;
constexpr NetworkFormat_NetworkStructure NetworkFormat::NETWORK_ONNX;
constexpr NetworkFormat_NetworkStructure NetworkFormat::NetworkStructure_MIN;
constexpr NetworkFormat_NetworkStructure NetworkFormat::NetworkStructure_MAX;
constexpr int NetworkFormat::NetworkStructure_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_PolicyFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[3];
}
bool NetworkFormat_PolicyFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetworkFormat_PolicyFormat NetworkFormat::POLICY_UNKNOWN;
constexpr NetworkFormat_PolicyFormat NetworkFormat::POLICY_CLASSICAL;
constexpr NetworkFormat_PolicyFormat NetworkFormat::POLICY_CONVOLUTION;
constexpr NetworkFormat_PolicyFormat NetworkFormat::PolicyFormat_MIN;
constexpr NetworkFormat_PolicyFormat NetworkFormat::PolicyFormat_MAX;
constexpr int NetworkFormat::PolicyFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_ValueFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[4];
}
bool NetworkFormat_ValueFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetworkFormat_ValueFormat NetworkFormat::VALUE_UNKNOWN;
constexpr NetworkFormat_ValueFormat NetworkFormat::VALUE_CLASSICAL;
constexpr NetworkFormat_ValueFormat NetworkFormat::VALUE_WDL;
constexpr NetworkFormat_ValueFormat NetworkFormat::VALUE_PARAM;
constexpr NetworkFormat_ValueFormat NetworkFormat::ValueFormat_MIN;
constexpr NetworkFormat_ValueFormat NetworkFormat::ValueFormat_MAX;
constexpr int NetworkFormat::ValueFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkFormat_MovesLeftFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[5];
}
bool NetworkFormat_MovesLeftFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetworkFormat_MovesLeftFormat NetworkFormat::MOVES_LEFT_NONE;
constexpr NetworkFormat_MovesLeftFormat NetworkFormat::MOVES_LEFT_V1;
constexpr NetworkFormat_MovesLeftFormat NetworkFormat::MovesLeftFormat_MIN;
constexpr NetworkFormat_MovesLeftFormat NetworkFormat::MovesLeftFormat_MAX;
constexpr int NetworkFormat::MovesLeftFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Format_Encoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[6];
}
bool Format_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Format_Encoding Format::UNKNOWN;
constexpr Format_Encoding Format::LINEAR16;
constexpr Format_Encoding Format::Encoding_MIN;
constexpr Format_Encoding Format::Encoding_MAX;
constexpr int Format::Encoding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OnnxModel_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[7];
}
bool OnnxModel_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OnnxModel_DataType OnnxModel::UNKNOWN_DATATYPE;
constexpr OnnxModel_DataType OnnxModel::FLOAT;
constexpr OnnxModel_DataType OnnxModel::FLOAT16;
constexpr OnnxModel_DataType OnnxModel::BFLOAT16;
constexpr OnnxModel_DataType OnnxModel::DataType_MIN;
constexpr OnnxModel_DataType OnnxModel::DataType_MAX;
constexpr int OnnxModel::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class EngineVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<EngineVersion>()._has_bits_);
  static void set_has_major(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_patch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EngineVersion::EngineVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.EngineVersion)
}
EngineVersion::EngineVersion(const EngineVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:pblczero.EngineVersion)
}

inline void EngineVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

EngineVersion::~EngineVersion() {
  // @@protoc_insertion_point(destructor:pblczero.EngineVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EngineVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EngineVersion::ArenaDtor(void* object) {
  EngineVersion* _this = reinterpret_cast< EngineVersion* >(object);
  (void)_this;
}
void EngineVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EngineVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EngineVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.EngineVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&major_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&patch_) -
        reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_major(&has_bits);
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_minor(&has_bits);
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_patch(&has_bits);
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.EngineVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // optional uint32 minor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  // optional uint32 patch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.EngineVersion)
  return target;
}

size_t EngineVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.EngineVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 major = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_major());
    }

    // optional uint32 minor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minor());
    }

    // optional uint32 patch = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_patch());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EngineVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineVersion::GetClassData() const { return &_class_data_; }

void EngineVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EngineVersion *>(to)->MergeFrom(
      static_cast<const EngineVersion &>(from));
}


void EngineVersion::MergeFrom(const EngineVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.EngineVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      major_ = from.major_;
    }
    if (cached_has_bits & 0x00000002u) {
      minor_ = from.minor_;
    }
    if (cached_has_bits & 0x00000004u) {
      patch_ = from.patch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineVersion::CopyFrom(const EngineVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.EngineVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineVersion::IsInitialized() const {
  return true;
}

void EngineVersion::InternalSwap(EngineVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineVersion, patch_)
      + sizeof(EngineVersion::patch_)
      - PROTOBUF_FIELD_OFFSET(EngineVersion, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[0]);
}

// ===================================================================

class Weights_Layer::_Internal {
 public:
  using HasBits = decltype(std::declval<Weights_Layer>()._has_bits_);
  static void set_has_min_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Weights_Layer::Weights_Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.Weights.Layer)
}
Weights_Layer::Weights_Layer(const Weights_Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_params()) {
    params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_params(), 
      GetArenaForAllocation());
  }
  ::memcpy(&min_val_, &from.min_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_val_) -
    reinterpret_cast<char*>(&min_val_)) + sizeof(max_val_));
  // @@protoc_insertion_point(copy_constructor:pblczero.Weights.Layer)
}

inline void Weights_Layer::SharedCtor() {
params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_val_) -
    reinterpret_cast<char*>(&min_val_)) + sizeof(max_val_));
}

Weights_Layer::~Weights_Layer() {
  // @@protoc_insertion_point(destructor:pblczero.Weights.Layer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Weights_Layer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Weights_Layer::ArenaDtor(void* object) {
  Weights_Layer* _this = reinterpret_cast< Weights_Layer* >(object);
  (void)_this;
}
void Weights_Layer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Weights_Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Weights_Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Weights.Layer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    params_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&min_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_val_) -
        reinterpret_cast<char*>(&min_val_)) + sizeof(max_val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Weights_Layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float min_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_min_val(&has_bits);
          min_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_max_val(&has_bits);
          max_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bytes params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Weights_Layer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Weights.Layer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_val = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_val(), target);
  }

  // optional float max_val = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_val(), target);
  }

  // optional bytes params = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Weights.Layer)
  return target;
}

size_t Weights_Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Weights.Layer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes params = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_params());
    }

    // optional float min_val = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float max_val = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Weights_Layer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Weights_Layer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Weights_Layer::GetClassData() const { return &_class_data_; }

void Weights_Layer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Weights_Layer *>(to)->MergeFrom(
      static_cast<const Weights_Layer &>(from));
}


void Weights_Layer::MergeFrom(const Weights_Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Weights.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_params(from._internal_params());
    }
    if (cached_has_bits & 0x00000002u) {
      min_val_ = from.min_val_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_val_ = from.max_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Weights_Layer::CopyFrom(const Weights_Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Weights.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weights_Layer::IsInitialized() const {
  return true;
}

void Weights_Layer::InternalSwap(Weights_Layer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &params_, lhs_arena,
      &other->params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Weights_Layer, max_val_)
      + sizeof(Weights_Layer::max_val_)
      - PROTOBUF_FIELD_OFFSET(Weights_Layer, min_val_)>(
          reinterpret_cast<char*>(&min_val_),
          reinterpret_cast<char*>(&other->min_val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Weights_Layer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[1]);
}

// ===================================================================

class Weights_ConvBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<Weights_ConvBlock>()._has_bits_);
  static const ::pblczero::Weights_Layer& weights(const Weights_ConvBlock* msg);
  static void set_has_weights(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pblczero::Weights_Layer& biases(const Weights_ConvBlock* msg);
  static void set_has_biases(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pblczero::Weights_Layer& bn_means(const Weights_ConvBlock* msg);
  static void set_has_bn_means(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pblczero::Weights_Layer& bn_stddivs(const Weights_ConvBlock* msg);
  static void set_has_bn_stddivs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pblczero::Weights_Layer& bn_gammas(const Weights_ConvBlock* msg);
  static void set_has_bn_gammas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pblczero::Weights_Layer& bn_betas(const Weights_ConvBlock* msg);
  static void set_has_bn_betas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::pblczero::Weights_Layer&
Weights_ConvBlock::_Internal::weights(const Weights_ConvBlock* msg) {
  return *msg->weights_;
}
const ::pblczero::Weights_Layer&
Weights_ConvBlock::_Internal::biases(const Weights_ConvBlock* msg) {
  return *msg->biases_;
}
const ::pblczero::Weights_Layer&
Weights_ConvBlock::_Internal::bn_means(const Weights_ConvBlock* msg) {
  return *msg->bn_means_;
}
const ::pblczero::Weights_Layer&
Weights_ConvBlock::_Internal::bn_stddivs(const Weights_ConvBlock* msg) {
  return *msg->bn_stddivs_;
}
const ::pblczero::Weights_Layer&
Weights_ConvBlock::_Internal::bn_gammas(const Weights_ConvBlock* msg) {
  return *msg->bn_gammas_;
}
const ::pblczero::Weights_Layer&
Weights_ConvBlock::_Internal::bn_betas(const Weights_ConvBlock* msg) {
  return *msg->bn_betas_;
}
Weights_ConvBlock::Weights_ConvBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.Weights.ConvBlock)
}
Weights_ConvBlock::Weights_ConvBlock(const Weights_ConvBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weights()) {
    weights_ = new ::pblczero::Weights_Layer(*from.weights_);
  } else {
    weights_ = nullptr;
  }
  if (from._internal_has_biases()) {
    biases_ = new ::pblczero::Weights_Layer(*from.biases_);
  } else {
    biases_ = nullptr;
  }
  if (from._internal_has_bn_means()) {
    bn_means_ = new ::pblczero::Weights_Layer(*from.bn_means_);
  } else {
    bn_means_ = nullptr;
  }
  if (from._internal_has_bn_stddivs()) {
    bn_stddivs_ = new ::pblczero::Weights_Layer(*from.bn_stddivs_);
  } else {
    bn_stddivs_ = nullptr;
  }
  if (from._internal_has_bn_gammas()) {
    bn_gammas_ = new ::pblczero::Weights_Layer(*from.bn_gammas_);
  } else {
    bn_gammas_ = nullptr;
  }
  if (from._internal_has_bn_betas()) {
    bn_betas_ = new ::pblczero::Weights_Layer(*from.bn_betas_);
  } else {
    bn_betas_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pblczero.Weights.ConvBlock)
}

inline void Weights_ConvBlock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weights_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bn_betas_) -
    reinterpret_cast<char*>(&weights_)) + sizeof(bn_betas_));
}

Weights_ConvBlock::~Weights_ConvBlock() {
  // @@protoc_insertion_point(destructor:pblczero.Weights.ConvBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Weights_ConvBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete weights_;
  if (this != internal_default_instance()) delete biases_;
  if (this != internal_default_instance()) delete bn_means_;
  if (this != internal_default_instance()) delete bn_stddivs_;
  if (this != internal_default_instance()) delete bn_gammas_;
  if (this != internal_default_instance()) delete bn_betas_;
}

void Weights_ConvBlock::ArenaDtor(void* object) {
  Weights_ConvBlock* _this = reinterpret_cast< Weights_ConvBlock* >(object);
  (void)_this;
}
void Weights_ConvBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Weights_ConvBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Weights_ConvBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Weights.ConvBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weights_ != nullptr);
      weights_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(biases_ != nullptr);
      biases_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bn_means_ != nullptr);
      bn_means_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bn_stddivs_ != nullptr);
      bn_stddivs_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(bn_gammas_ != nullptr);
      bn_gammas_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(bn_betas_ != nullptr);
      bn_betas_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Weights_ConvBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pblczero.Weights.Layer weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer biases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_biases(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer bn_means = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bn_means(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer bn_stddivs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bn_stddivs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer bn_gammas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bn_gammas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer bn_betas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bn_betas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Weights_ConvBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Weights.ConvBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Weights.Layer weights = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::weights(this), target, stream);
  }

  // optional .pblczero.Weights.Layer biases = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::biases(this), target, stream);
  }

  // optional .pblczero.Weights.Layer bn_means = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bn_means(this), target, stream);
  }

  // optional .pblczero.Weights.Layer bn_stddivs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bn_stddivs(this), target, stream);
  }

  // optional .pblczero.Weights.Layer bn_gammas = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bn_gammas(this), target, stream);
  }

  // optional .pblczero.Weights.Layer bn_betas = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bn_betas(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Weights.ConvBlock)
  return target;
}

size_t Weights_ConvBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Weights.ConvBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .pblczero.Weights.Layer weights = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weights_);
    }

    // optional .pblczero.Weights.Layer biases = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *biases_);
    }

    // optional .pblczero.Weights.Layer bn_means = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bn_means_);
    }

    // optional .pblczero.Weights.Layer bn_stddivs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bn_stddivs_);
    }

    // optional .pblczero.Weights.Layer bn_gammas = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bn_gammas_);
    }

    // optional .pblczero.Weights.Layer bn_betas = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bn_betas_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Weights_ConvBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Weights_ConvBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Weights_ConvBlock::GetClassData() const { return &_class_data_; }

void Weights_ConvBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Weights_ConvBlock *>(to)->MergeFrom(
      static_cast<const Weights_ConvBlock &>(from));
}


void Weights_ConvBlock::MergeFrom(const Weights_ConvBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Weights.ConvBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weights()->::pblczero::Weights_Layer::MergeFrom(from._internal_weights());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_biases()->::pblczero::Weights_Layer::MergeFrom(from._internal_biases());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bn_means()->::pblczero::Weights_Layer::MergeFrom(from._internal_bn_means());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_bn_stddivs()->::pblczero::Weights_Layer::MergeFrom(from._internal_bn_stddivs());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_bn_gammas()->::pblczero::Weights_Layer::MergeFrom(from._internal_bn_gammas());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_bn_betas()->::pblczero::Weights_Layer::MergeFrom(from._internal_bn_betas());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Weights_ConvBlock::CopyFrom(const Weights_ConvBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Weights.ConvBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weights_ConvBlock::IsInitialized() const {
  return true;
}

void Weights_ConvBlock::InternalSwap(Weights_ConvBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Weights_ConvBlock, bn_betas_)
      + sizeof(Weights_ConvBlock::bn_betas_)
      - PROTOBUF_FIELD_OFFSET(Weights_ConvBlock, weights_)>(
          reinterpret_cast<char*>(&weights_),
          reinterpret_cast<char*>(&other->weights_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Weights_ConvBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[2]);
}

// ===================================================================

class Weights_SEunit::_Internal {
 public:
  using HasBits = decltype(std::declval<Weights_SEunit>()._has_bits_);
  static const ::pblczero::Weights_Layer& w1(const Weights_SEunit* msg);
  static void set_has_w1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pblczero::Weights_Layer& b1(const Weights_SEunit* msg);
  static void set_has_b1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pblczero::Weights_Layer& w2(const Weights_SEunit* msg);
  static void set_has_w2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pblczero::Weights_Layer& b2(const Weights_SEunit* msg);
  static void set_has_b2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pblczero::Weights_Layer&
Weights_SEunit::_Internal::w1(const Weights_SEunit* msg) {
  return *msg->w1_;
}
const ::pblczero::Weights_Layer&
Weights_SEunit::_Internal::b1(const Weights_SEunit* msg) {
  return *msg->b1_;
}
const ::pblczero::Weights_Layer&
Weights_SEunit::_Internal::w2(const Weights_SEunit* msg) {
  return *msg->w2_;
}
const ::pblczero::Weights_Layer&
Weights_SEunit::_Internal::b2(const Weights_SEunit* msg) {
  return *msg->b2_;
}
Weights_SEunit::Weights_SEunit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.Weights.SEunit)
}
Weights_SEunit::Weights_SEunit(const Weights_SEunit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_w1()) {
    w1_ = new ::pblczero::Weights_Layer(*from.w1_);
  } else {
    w1_ = nullptr;
  }
  if (from._internal_has_b1()) {
    b1_ = new ::pblczero::Weights_Layer(*from.b1_);
  } else {
    b1_ = nullptr;
  }
  if (from._internal_has_w2()) {
    w2_ = new ::pblczero::Weights_Layer(*from.w2_);
  } else {
    w2_ = nullptr;
  }
  if (from._internal_has_b2()) {
    b2_ = new ::pblczero::Weights_Layer(*from.b2_);
  } else {
    b2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pblczero.Weights.SEunit)
}

inline void Weights_SEunit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b2_) -
    reinterpret_cast<char*>(&w1_)) + sizeof(b2_));
}

Weights_SEunit::~Weights_SEunit() {
  // @@protoc_insertion_point(destructor:pblczero.Weights.SEunit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Weights_SEunit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete w1_;
  if (this != internal_default_instance()) delete b1_;
  if (this != internal_default_instance()) delete w2_;
  if (this != internal_default_instance()) delete b2_;
}

void Weights_SEunit::ArenaDtor(void* object) {
  Weights_SEunit* _this = reinterpret_cast< Weights_SEunit* >(object);
  (void)_this;
}
void Weights_SEunit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Weights_SEunit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Weights_SEunit::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Weights.SEunit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(w1_ != nullptr);
      w1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(b1_ != nullptr);
      b1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(w2_ != nullptr);
      w2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(b2_ != nullptr);
      b2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Weights_SEunit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pblczero.Weights.Layer w1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_w1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer b1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_b1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer w2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_w2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer b2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_b2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Weights_SEunit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Weights.SEunit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Weights.Layer w1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::w1(this), target, stream);
  }

  // optional .pblczero.Weights.Layer b1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::b1(this), target, stream);
  }

  // optional .pblczero.Weights.Layer w2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::w2(this), target, stream);
  }

  // optional .pblczero.Weights.Layer b2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::b2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Weights.SEunit)
  return target;
}

size_t Weights_SEunit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Weights.SEunit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .pblczero.Weights.Layer w1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *w1_);
    }

    // optional .pblczero.Weights.Layer b1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *b1_);
    }

    // optional .pblczero.Weights.Layer w2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *w2_);
    }

    // optional .pblczero.Weights.Layer b2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *b2_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Weights_SEunit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Weights_SEunit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Weights_SEunit::GetClassData() const { return &_class_data_; }

void Weights_SEunit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Weights_SEunit *>(to)->MergeFrom(
      static_cast<const Weights_SEunit &>(from));
}


void Weights_SEunit::MergeFrom(const Weights_SEunit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Weights.SEunit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_w1()->::pblczero::Weights_Layer::MergeFrom(from._internal_w1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_b1()->::pblczero::Weights_Layer::MergeFrom(from._internal_b1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_w2()->::pblczero::Weights_Layer::MergeFrom(from._internal_w2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_b2()->::pblczero::Weights_Layer::MergeFrom(from._internal_b2());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Weights_SEunit::CopyFrom(const Weights_SEunit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Weights.SEunit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weights_SEunit::IsInitialized() const {
  return true;
}

void Weights_SEunit::InternalSwap(Weights_SEunit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Weights_SEunit, b2_)
      + sizeof(Weights_SEunit::b2_)
      - PROTOBUF_FIELD_OFFSET(Weights_SEunit, w1_)>(
          reinterpret_cast<char*>(&w1_),
          reinterpret_cast<char*>(&other->w1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Weights_SEunit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[3]);
}

// ===================================================================

class Weights_Residual::_Internal {
 public:
  using HasBits = decltype(std::declval<Weights_Residual>()._has_bits_);
  static const ::pblczero::Weights_ConvBlock& conv1(const Weights_Residual* msg);
  static void set_has_conv1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pblczero::Weights_ConvBlock& conv2(const Weights_Residual* msg);
  static void set_has_conv2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pblczero::Weights_SEunit& se(const Weights_Residual* msg);
  static void set_has_se(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::pblczero::Weights_ConvBlock&
Weights_Residual::_Internal::conv1(const Weights_Residual* msg) {
  return *msg->conv1_;
}
const ::pblczero::Weights_ConvBlock&
Weights_Residual::_Internal::conv2(const Weights_Residual* msg) {
  return *msg->conv2_;
}
const ::pblczero::Weights_SEunit&
Weights_Residual::_Internal::se(const Weights_Residual* msg) {
  return *msg->se_;
}
Weights_Residual::Weights_Residual(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.Weights.Residual)
}
Weights_Residual::Weights_Residual(const Weights_Residual& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conv1()) {
    conv1_ = new ::pblczero::Weights_ConvBlock(*from.conv1_);
  } else {
    conv1_ = nullptr;
  }
  if (from._internal_has_conv2()) {
    conv2_ = new ::pblczero::Weights_ConvBlock(*from.conv2_);
  } else {
    conv2_ = nullptr;
  }
  if (from._internal_has_se()) {
    se_ = new ::pblczero::Weights_SEunit(*from.se_);
  } else {
    se_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pblczero.Weights.Residual)
}

inline void Weights_Residual::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&conv1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&se_) -
    reinterpret_cast<char*>(&conv1_)) + sizeof(se_));
}

Weights_Residual::~Weights_Residual() {
  // @@protoc_insertion_point(destructor:pblczero.Weights.Residual)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Weights_Residual::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete conv1_;
  if (this != internal_default_instance()) delete conv2_;
  if (this != internal_default_instance()) delete se_;
}

void Weights_Residual::ArenaDtor(void* object) {
  Weights_Residual* _this = reinterpret_cast< Weights_Residual* >(object);
  (void)_this;
}
void Weights_Residual::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Weights_Residual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Weights_Residual::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Weights.Residual)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(conv1_ != nullptr);
      conv1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(conv2_ != nullptr);
      conv2_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(se_ != nullptr);
      se_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Weights_Residual::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pblczero.Weights.ConvBlock conv1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.ConvBlock conv2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.SEunit se = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_se(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Weights_Residual::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Weights.Residual)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Weights.ConvBlock conv1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conv1(this), target, stream);
  }

  // optional .pblczero.Weights.ConvBlock conv2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::conv2(this), target, stream);
  }

  // optional .pblczero.Weights.SEunit se = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::se(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Weights.Residual)
  return target;
}

size_t Weights_Residual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Weights.Residual)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pblczero.Weights.ConvBlock conv1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv1_);
    }

    // optional .pblczero.Weights.ConvBlock conv2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv2_);
    }

    // optional .pblczero.Weights.SEunit se = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *se_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Weights_Residual::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Weights_Residual::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Weights_Residual::GetClassData() const { return &_class_data_; }

void Weights_Residual::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Weights_Residual *>(to)->MergeFrom(
      static_cast<const Weights_Residual &>(from));
}


void Weights_Residual::MergeFrom(const Weights_Residual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Weights.Residual)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_conv1()->::pblczero::Weights_ConvBlock::MergeFrom(from._internal_conv1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_conv2()->::pblczero::Weights_ConvBlock::MergeFrom(from._internal_conv2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_se()->::pblczero::Weights_SEunit::MergeFrom(from._internal_se());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Weights_Residual::CopyFrom(const Weights_Residual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Weights.Residual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weights_Residual::IsInitialized() const {
  return true;
}

void Weights_Residual::InternalSwap(Weights_Residual* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Weights_Residual, se_)
      + sizeof(Weights_Residual::se_)
      - PROTOBUF_FIELD_OFFSET(Weights_Residual, conv1_)>(
          reinterpret_cast<char*>(&conv1_),
          reinterpret_cast<char*>(&other->conv1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Weights_Residual::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[4]);
}

// ===================================================================

class Weights::_Internal {
 public:
  using HasBits = decltype(std::declval<Weights>()._has_bits_);
  static const ::pblczero::Weights_ConvBlock& input(const Weights* msg);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pblczero::Weights_ConvBlock& policy1(const Weights* msg);
  static void set_has_policy1(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::pblczero::Weights_ConvBlock& policy(const Weights* msg);
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pblczero::Weights_Layer& ip_pol_w(const Weights* msg);
  static void set_has_ip_pol_w(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pblczero::Weights_Layer& ip_pol_b(const Weights* msg);
  static void set_has_ip_pol_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pblczero::Weights_ConvBlock& value(const Weights* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pblczero::Weights_Layer& ip1_val_w(const Weights* msg);
  static void set_has_ip1_val_w(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pblczero::Weights_Layer& ip1_val_b(const Weights* msg);
  static void set_has_ip1_val_b(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pblczero::Weights_Layer& ip2_val_w(const Weights* msg);
  static void set_has_ip2_val_w(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::pblczero::Weights_Layer& ip2_val_b(const Weights* msg);
  static void set_has_ip2_val_b(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::pblczero::Weights_ConvBlock& moves_left(const Weights* msg);
  static void set_has_moves_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::pblczero::Weights_Layer& ip1_mov_w(const Weights* msg);
  static void set_has_ip1_mov_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::pblczero::Weights_Layer& ip1_mov_b(const Weights* msg);
  static void set_has_ip1_mov_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::pblczero::Weights_Layer& ip2_mov_w(const Weights* msg);
  static void set_has_ip2_mov_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::pblczero::Weights_Layer& ip2_mov_b(const Weights* msg);
  static void set_has_ip2_mov_b(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::pblczero::Weights_ConvBlock&
Weights::_Internal::input(const Weights* msg) {
  return *msg->input_;
}
const ::pblczero::Weights_ConvBlock&
Weights::_Internal::policy1(const Weights* msg) {
  return *msg->policy1_;
}
const ::pblczero::Weights_ConvBlock&
Weights::_Internal::policy(const Weights* msg) {
  return *msg->policy_;
}
const ::pblczero::Weights_Layer&
Weights::_Internal::ip_pol_w(const Weights* msg) {
  return *msg->ip_pol_w_;
}
const ::pblczero::Weights_Layer&
Weights::_Internal::ip_pol_b(const Weights* msg) {
  return *msg->ip_pol_b_;
}
const ::pblczero::Weights_ConvBlock&
Weights::_Internal::value(const Weights* msg) {
  return *msg->value_;
}
const ::pblczero::Weights_Layer&
Weights::_Internal::ip1_val_w(const Weights* msg) {
  return *msg->ip1_val_w_;
}
const ::pblczero::Weights_Layer&
Weights::_Internal::ip1_val_b(const Weights* msg) {
  return *msg->ip1_val_b_;
}
const ::pblczero::Weights_Layer&
Weights::_Internal::ip2_val_w(const Weights* msg) {
  return *msg->ip2_val_w_;
}
const ::pblczero::Weights_Layer&
Weights::_Internal::ip2_val_b(const Weights* msg) {
  return *msg->ip2_val_b_;
}
const ::pblczero::Weights_ConvBlock&
Weights::_Internal::moves_left(const Weights* msg) {
  return *msg->moves_left_;
}
const ::pblczero::Weights_Layer&
Weights::_Internal::ip1_mov_w(const Weights* msg) {
  return *msg->ip1_mov_w_;
}
const ::pblczero::Weights_Layer&
Weights::_Internal::ip1_mov_b(const Weights* msg) {
  return *msg->ip1_mov_b_;
}
const ::pblczero::Weights_Layer&
Weights::_Internal::ip2_mov_w(const Weights* msg) {
  return *msg->ip2_mov_w_;
}
const ::pblczero::Weights_Layer&
Weights::_Internal::ip2_mov_b(const Weights* msg) {
  return *msg->ip2_mov_b_;
}
Weights::Weights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  residual_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.Weights)
}
Weights::Weights(const Weights& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      residual_(from.residual_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::pblczero::Weights_ConvBlock(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_policy()) {
    policy_ = new ::pblczero::Weights_ConvBlock(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  if (from._internal_has_ip_pol_w()) {
    ip_pol_w_ = new ::pblczero::Weights_Layer(*from.ip_pol_w_);
  } else {
    ip_pol_w_ = nullptr;
  }
  if (from._internal_has_ip_pol_b()) {
    ip_pol_b_ = new ::pblczero::Weights_Layer(*from.ip_pol_b_);
  } else {
    ip_pol_b_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::pblczero::Weights_ConvBlock(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_ip1_val_w()) {
    ip1_val_w_ = new ::pblczero::Weights_Layer(*from.ip1_val_w_);
  } else {
    ip1_val_w_ = nullptr;
  }
  if (from._internal_has_ip1_val_b()) {
    ip1_val_b_ = new ::pblczero::Weights_Layer(*from.ip1_val_b_);
  } else {
    ip1_val_b_ = nullptr;
  }
  if (from._internal_has_ip2_val_w()) {
    ip2_val_w_ = new ::pblczero::Weights_Layer(*from.ip2_val_w_);
  } else {
    ip2_val_w_ = nullptr;
  }
  if (from._internal_has_ip2_val_b()) {
    ip2_val_b_ = new ::pblczero::Weights_Layer(*from.ip2_val_b_);
  } else {
    ip2_val_b_ = nullptr;
  }
  if (from._internal_has_policy1()) {
    policy1_ = new ::pblczero::Weights_ConvBlock(*from.policy1_);
  } else {
    policy1_ = nullptr;
  }
  if (from._internal_has_moves_left()) {
    moves_left_ = new ::pblczero::Weights_ConvBlock(*from.moves_left_);
  } else {
    moves_left_ = nullptr;
  }
  if (from._internal_has_ip1_mov_w()) {
    ip1_mov_w_ = new ::pblczero::Weights_Layer(*from.ip1_mov_w_);
  } else {
    ip1_mov_w_ = nullptr;
  }
  if (from._internal_has_ip1_mov_b()) {
    ip1_mov_b_ = new ::pblczero::Weights_Layer(*from.ip1_mov_b_);
  } else {
    ip1_mov_b_ = nullptr;
  }
  if (from._internal_has_ip2_mov_w()) {
    ip2_mov_w_ = new ::pblczero::Weights_Layer(*from.ip2_mov_w_);
  } else {
    ip2_mov_w_ = nullptr;
  }
  if (from._internal_has_ip2_mov_b()) {
    ip2_mov_b_ = new ::pblczero::Weights_Layer(*from.ip2_mov_b_);
  } else {
    ip2_mov_b_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pblczero.Weights)
}

inline void Weights::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ip2_mov_b_) -
    reinterpret_cast<char*>(&input_)) + sizeof(ip2_mov_b_));
}

Weights::~Weights() {
  // @@protoc_insertion_point(destructor:pblczero.Weights)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Weights::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete policy_;
  if (this != internal_default_instance()) delete ip_pol_w_;
  if (this != internal_default_instance()) delete ip_pol_b_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete ip1_val_w_;
  if (this != internal_default_instance()) delete ip1_val_b_;
  if (this != internal_default_instance()) delete ip2_val_w_;
  if (this != internal_default_instance()) delete ip2_val_b_;
  if (this != internal_default_instance()) delete policy1_;
  if (this != internal_default_instance()) delete moves_left_;
  if (this != internal_default_instance()) delete ip1_mov_w_;
  if (this != internal_default_instance()) delete ip1_mov_b_;
  if (this != internal_default_instance()) delete ip2_mov_w_;
  if (this != internal_default_instance()) delete ip2_mov_b_;
}

void Weights::ArenaDtor(void* object) {
  Weights* _this = reinterpret_cast< Weights* >(object);
  (void)_this;
}
void Weights::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Weights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Weights::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Weights)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  residual_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(input_ != nullptr);
      input_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(policy_ != nullptr);
      policy_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ip_pol_w_ != nullptr);
      ip_pol_w_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ip_pol_b_ != nullptr);
      ip_pol_b_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(ip1_val_w_ != nullptr);
      ip1_val_w_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(ip1_val_b_ != nullptr);
      ip1_val_b_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(ip2_val_w_ != nullptr);
      ip2_val_w_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(ip2_val_b_ != nullptr);
      ip2_val_b_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(policy1_ != nullptr);
      policy1_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(moves_left_ != nullptr);
      moves_left_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(ip1_mov_w_ != nullptr);
      ip1_mov_w_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(ip1_mov_b_ != nullptr);
      ip1_mov_b_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(ip2_mov_w_ != nullptr);
      ip2_mov_w_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(ip2_mov_b_ != nullptr);
      ip2_mov_b_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Weights::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pblczero.Weights.ConvBlock input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pblczero.Weights.Residual residual = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_residual(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.ConvBlock policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer ip_pol_w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_pol_w(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer ip_pol_b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_pol_b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.ConvBlock value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer ip1_val_w = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip1_val_w(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer ip1_val_b = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip1_val_b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer ip2_val_w = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip2_val_w(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer ip2_val_b = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip2_val_b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.ConvBlock policy1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.ConvBlock moves_left = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_moves_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer ip1_mov_w = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip1_mov_w(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer ip1_mov_b = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip1_mov_b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer ip2_mov_w = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip2_mov_w(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights.Layer ip2_mov_b = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip2_mov_b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Weights::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Weights)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Weights.ConvBlock input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // repeated .pblczero.Weights.Residual residual = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_residual_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_residual(i), target, stream);
  }

  // optional .pblczero.Weights.ConvBlock policy = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::policy(this), target, stream);
  }

  // optional .pblczero.Weights.Layer ip_pol_w = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ip_pol_w(this), target, stream);
  }

  // optional .pblczero.Weights.Layer ip_pol_b = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ip_pol_b(this), target, stream);
  }

  // optional .pblczero.Weights.ConvBlock value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::value(this), target, stream);
  }

  // optional .pblczero.Weights.Layer ip1_val_w = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ip1_val_w(this), target, stream);
  }

  // optional .pblczero.Weights.Layer ip1_val_b = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ip1_val_b(this), target, stream);
  }

  // optional .pblczero.Weights.Layer ip2_val_w = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::ip2_val_w(this), target, stream);
  }

  // optional .pblczero.Weights.Layer ip2_val_b = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ip2_val_b(this), target, stream);
  }

  // optional .pblczero.Weights.ConvBlock policy1 = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::policy1(this), target, stream);
  }

  // optional .pblczero.Weights.ConvBlock moves_left = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::moves_left(this), target, stream);
  }

  // optional .pblczero.Weights.Layer ip1_mov_w = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::ip1_mov_w(this), target, stream);
  }

  // optional .pblczero.Weights.Layer ip1_mov_b = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::ip1_mov_b(this), target, stream);
  }

  // optional .pblczero.Weights.Layer ip2_mov_w = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::ip2_mov_w(this), target, stream);
  }

  // optional .pblczero.Weights.Layer ip2_mov_b = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::ip2_mov_b(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Weights)
  return target;
}

size_t Weights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Weights)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pblczero.Weights.Residual residual = 2;
  total_size += 1UL * this->_internal_residual_size();
  for (const auto& msg : this->residual_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pblczero.Weights.ConvBlock input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_);
    }

    // optional .pblczero.Weights.ConvBlock policy = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_);
    }

    // optional .pblczero.Weights.Layer ip_pol_w = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip_pol_w_);
    }

    // optional .pblczero.Weights.Layer ip_pol_b = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip_pol_b_);
    }

    // optional .pblczero.Weights.ConvBlock value = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional .pblczero.Weights.Layer ip1_val_w = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip1_val_w_);
    }

    // optional .pblczero.Weights.Layer ip1_val_b = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip1_val_b_);
    }

    // optional .pblczero.Weights.Layer ip2_val_w = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip2_val_w_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .pblczero.Weights.Layer ip2_val_b = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip2_val_b_);
    }

    // optional .pblczero.Weights.ConvBlock policy1 = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy1_);
    }

    // optional .pblczero.Weights.ConvBlock moves_left = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *moves_left_);
    }

    // optional .pblczero.Weights.Layer ip1_mov_w = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip1_mov_w_);
    }

    // optional .pblczero.Weights.Layer ip1_mov_b = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip1_mov_b_);
    }

    // optional .pblczero.Weights.Layer ip2_mov_w = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip2_mov_w_);
    }

    // optional .pblczero.Weights.Layer ip2_mov_b = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip2_mov_b_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Weights::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Weights::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Weights::GetClassData() const { return &_class_data_; }

void Weights::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Weights *>(to)->MergeFrom(
      static_cast<const Weights &>(from));
}


void Weights::MergeFrom(const Weights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Weights)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  residual_.MergeFrom(from.residual_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_input()->::pblczero::Weights_ConvBlock::MergeFrom(from._internal_input());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_policy()->::pblczero::Weights_ConvBlock::MergeFrom(from._internal_policy());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ip_pol_w()->::pblczero::Weights_Layer::MergeFrom(from._internal_ip_pol_w());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ip_pol_b()->::pblczero::Weights_Layer::MergeFrom(from._internal_ip_pol_b());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_value()->::pblczero::Weights_ConvBlock::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_ip1_val_w()->::pblczero::Weights_Layer::MergeFrom(from._internal_ip1_val_w());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_ip1_val_b()->::pblczero::Weights_Layer::MergeFrom(from._internal_ip1_val_b());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_ip2_val_w()->::pblczero::Weights_Layer::MergeFrom(from._internal_ip2_val_w());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_ip2_val_b()->::pblczero::Weights_Layer::MergeFrom(from._internal_ip2_val_b());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_policy1()->::pblczero::Weights_ConvBlock::MergeFrom(from._internal_policy1());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_moves_left()->::pblczero::Weights_ConvBlock::MergeFrom(from._internal_moves_left());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_ip1_mov_w()->::pblczero::Weights_Layer::MergeFrom(from._internal_ip1_mov_w());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_ip1_mov_b()->::pblczero::Weights_Layer::MergeFrom(from._internal_ip1_mov_b());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_ip2_mov_w()->::pblczero::Weights_Layer::MergeFrom(from._internal_ip2_mov_w());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_ip2_mov_b()->::pblczero::Weights_Layer::MergeFrom(from._internal_ip2_mov_b());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Weights::CopyFrom(const Weights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Weights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weights::IsInitialized() const {
  return true;
}

void Weights::InternalSwap(Weights* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  residual_.InternalSwap(&other->residual_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Weights, ip2_mov_b_)
      + sizeof(Weights::ip2_mov_b_)
      - PROTOBUF_FIELD_OFFSET(Weights, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Weights::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[5]);
}

// ===================================================================

class TrainingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainingParams>()._has_bits_);
  static void set_has_training_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mse_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_policy_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lc0_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrainingParams::TrainingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.TrainingParams)
}
TrainingParams::TrainingParams(const TrainingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lc0_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    lc0_params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lc0_params()) {
    lc0_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lc0_params(), 
      GetArenaForAllocation());
  }
  ::memcpy(&training_steps_, &from.training_steps_,
    static_cast<size_t>(reinterpret_cast<char*>(&accuracy_) -
    reinterpret_cast<char*>(&training_steps_)) + sizeof(accuracy_));
  // @@protoc_insertion_point(copy_constructor:pblczero.TrainingParams)
}

inline void TrainingParams::SharedCtor() {
lc0_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  lc0_params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&training_steps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accuracy_) -
    reinterpret_cast<char*>(&training_steps_)) + sizeof(accuracy_));
}

TrainingParams::~TrainingParams() {
  // @@protoc_insertion_point(destructor:pblczero.TrainingParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrainingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lc0_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrainingParams::ArenaDtor(void* object) {
  TrainingParams* _this = reinterpret_cast< TrainingParams* >(object);
  (void)_this;
}
void TrainingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrainingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.TrainingParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lc0_params_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&training_steps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accuracy_) -
        reinterpret_cast<char*>(&training_steps_)) + sizeof(accuracy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 training_steps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_training_steps(&has_bits);
          training_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float learning_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_learning_rate(&has_bits);
          learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mse_loss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_mse_loss(&has_bits);
          mse_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float policy_loss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_policy_loss(&has_bits);
          policy_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float accuracy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_accuracy(&has_bits);
          accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string lc0_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_lc0_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pblczero.TrainingParams.lc0_params");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrainingParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.TrainingParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 training_steps = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_training_steps(), target);
  }

  // optional float learning_rate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_learning_rate(), target);
  }

  // optional float mse_loss = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_mse_loss(), target);
  }

  // optional float policy_loss = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_policy_loss(), target);
  }

  // optional float accuracy = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_accuracy(), target);
  }

  // optional string lc0_params = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lc0_params().data(), static_cast<int>(this->_internal_lc0_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pblczero.TrainingParams.lc0_params");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_lc0_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.TrainingParams)
  return target;
}

size_t TrainingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.TrainingParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string lc0_params = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lc0_params());
    }

    // optional uint32 training_steps = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_training_steps());
    }

    // optional float learning_rate = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float mse_loss = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float policy_loss = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float accuracy = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrainingParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrainingParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrainingParams::GetClassData() const { return &_class_data_; }

void TrainingParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrainingParams *>(to)->MergeFrom(
      static_cast<const TrainingParams &>(from));
}


void TrainingParams::MergeFrom(const TrainingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.TrainingParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lc0_params(from._internal_lc0_params());
    }
    if (cached_has_bits & 0x00000002u) {
      training_steps_ = from.training_steps_;
    }
    if (cached_has_bits & 0x00000004u) {
      learning_rate_ = from.learning_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      mse_loss_ = from.mse_loss_;
    }
    if (cached_has_bits & 0x00000010u) {
      policy_loss_ = from.policy_loss_;
    }
    if (cached_has_bits & 0x00000020u) {
      accuracy_ = from.accuracy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrainingParams::CopyFrom(const TrainingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.TrainingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingParams::IsInitialized() const {
  return true;
}

void TrainingParams::InternalSwap(TrainingParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lc0_params_, lhs_arena,
      &other->lc0_params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainingParams, accuracy_)
      + sizeof(TrainingParams::accuracy_)
      - PROTOBUF_FIELD_OFFSET(TrainingParams, training_steps_)>(
          reinterpret_cast<char*>(&training_steps_),
          reinterpret_cast<char*>(&other->training_steps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainingParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[6]);
}

// ===================================================================

class NetworkFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkFormat>()._has_bits_);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_network(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_moves_left(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

NetworkFormat::NetworkFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.NetworkFormat)
}
NetworkFormat::NetworkFormat(const NetworkFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&input_, &from.input_,
    static_cast<size_t>(reinterpret_cast<char*>(&moves_left_) -
    reinterpret_cast<char*>(&input_)) + sizeof(moves_left_));
  // @@protoc_insertion_point(copy_constructor:pblczero.NetworkFormat)
}

inline void NetworkFormat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&moves_left_) -
    reinterpret_cast<char*>(&input_)) + sizeof(moves_left_));
}

NetworkFormat::~NetworkFormat() {
  // @@protoc_insertion_point(destructor:pblczero.NetworkFormat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetworkFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetworkFormat::ArenaDtor(void* object) {
  NetworkFormat* _this = reinterpret_cast< NetworkFormat* >(object);
  (void)_this;
}
void NetworkFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.NetworkFormat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moves_left_) -
        reinterpret_cast<char*>(&input_)) + sizeof(moves_left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pblczero.NetworkFormat.InputFormat input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pblczero::NetworkFormat_InputFormat_IsValid(val))) {
            _internal_set_input(static_cast<::pblczero::NetworkFormat_InputFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.NetworkFormat.OutputFormat output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pblczero::NetworkFormat_OutputFormat_IsValid(val))) {
            _internal_set_output(static_cast<::pblczero::NetworkFormat_OutputFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.NetworkFormat.NetworkStructure network = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pblczero::NetworkFormat_NetworkStructure_IsValid(val))) {
            _internal_set_network(static_cast<::pblczero::NetworkFormat_NetworkStructure>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.NetworkFormat.PolicyFormat policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pblczero::NetworkFormat_PolicyFormat_IsValid(val))) {
            _internal_set_policy(static_cast<::pblczero::NetworkFormat_PolicyFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.NetworkFormat.ValueFormat value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pblczero::NetworkFormat_ValueFormat_IsValid(val))) {
            _internal_set_value(static_cast<::pblczero::NetworkFormat_ValueFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.NetworkFormat.MovesLeftFormat moves_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pblczero::NetworkFormat_MovesLeftFormat_IsValid(val))) {
            _internal_set_moves_left(static_cast<::pblczero::NetworkFormat_MovesLeftFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkFormat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.NetworkFormat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.NetworkFormat.InputFormat input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_input(), target);
  }

  // optional .pblczero.NetworkFormat.OutputFormat output = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_output(), target);
  }

  // optional .pblczero.NetworkFormat.NetworkStructure network = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_network(), target);
  }

  // optional .pblczero.NetworkFormat.PolicyFormat policy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_policy(), target);
  }

  // optional .pblczero.NetworkFormat.ValueFormat value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_value(), target);
  }

  // optional .pblczero.NetworkFormat.MovesLeftFormat moves_left = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_moves_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.NetworkFormat)
  return target;
}

size_t NetworkFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.NetworkFormat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .pblczero.NetworkFormat.InputFormat input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input());
    }

    // optional .pblczero.NetworkFormat.OutputFormat output = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output());
    }

    // optional .pblczero.NetworkFormat.NetworkStructure network = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network());
    }

    // optional .pblczero.NetworkFormat.PolicyFormat policy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_policy());
    }

    // optional .pblczero.NetworkFormat.ValueFormat value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
    }

    // optional .pblczero.NetworkFormat.MovesLeftFormat moves_left = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_moves_left());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkFormat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetworkFormat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkFormat::GetClassData() const { return &_class_data_; }

void NetworkFormat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetworkFormat *>(to)->MergeFrom(
      static_cast<const NetworkFormat &>(from));
}


void NetworkFormat::MergeFrom(const NetworkFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.NetworkFormat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      input_ = from.input_;
    }
    if (cached_has_bits & 0x00000002u) {
      output_ = from.output_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_ = from.network_;
    }
    if (cached_has_bits & 0x00000008u) {
      policy_ = from.policy_;
    }
    if (cached_has_bits & 0x00000010u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000020u) {
      moves_left_ = from.moves_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkFormat::CopyFrom(const NetworkFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.NetworkFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkFormat::IsInitialized() const {
  return true;
}

void NetworkFormat::InternalSwap(NetworkFormat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkFormat, moves_left_)
      + sizeof(NetworkFormat::moves_left_)
      - PROTOBUF_FIELD_OFFSET(NetworkFormat, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkFormat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[7]);
}

// ===================================================================

class Format::_Internal {
 public:
  using HasBits = decltype(std::declval<Format>()._has_bits_);
  static void set_has_weights_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pblczero::NetworkFormat& network_format(const Format* msg);
  static void set_has_network_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pblczero::NetworkFormat&
Format::_Internal::network_format(const Format* msg) {
  return *msg->network_format_;
}
Format::Format(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.Format)
}
Format::Format(const Format& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_network_format()) {
    network_format_ = new ::pblczero::NetworkFormat(*from.network_format_);
  } else {
    network_format_ = nullptr;
  }
  weights_encoding_ = from.weights_encoding_;
  // @@protoc_insertion_point(copy_constructor:pblczero.Format)
}

inline void Format::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&network_format_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weights_encoding_) -
    reinterpret_cast<char*>(&network_format_)) + sizeof(weights_encoding_));
}

Format::~Format() {
  // @@protoc_insertion_point(destructor:pblczero.Format)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Format::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete network_format_;
}

void Format::ArenaDtor(void* object) {
  Format* _this = reinterpret_cast< Format* >(object);
  (void)_this;
}
void Format::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Format::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Format::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Format)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(network_format_ != nullptr);
    network_format_->Clear();
  }
  weights_encoding_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Format::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pblczero.Format.Encoding weights_encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pblczero::Format_Encoding_IsValid(val))) {
            _internal_set_weights_encoding(static_cast<::pblczero::Format_Encoding>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.NetworkFormat network_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Format::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Format)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Format.Encoding weights_encoding = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_weights_encoding(), target);
  }

  // optional .pblczero.NetworkFormat network_format = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::network_format(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Format)
  return target;
}

size_t Format::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Format)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pblczero.NetworkFormat network_format = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_format_);
    }

    // optional .pblczero.Format.Encoding weights_encoding = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_weights_encoding());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Format::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Format::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Format::GetClassData() const { return &_class_data_; }

void Format::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Format *>(to)->MergeFrom(
      static_cast<const Format &>(from));
}


void Format::MergeFrom(const Format& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Format)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_network_format()->::pblczero::NetworkFormat::MergeFrom(from._internal_network_format());
    }
    if (cached_has_bits & 0x00000002u) {
      weights_encoding_ = from.weights_encoding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Format::CopyFrom(const Format& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Format)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Format::IsInitialized() const {
  return true;
}

void Format::InternalSwap(Format* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Format, weights_encoding_)
      + sizeof(Format::weights_encoding_)
      - PROTOBUF_FIELD_OFFSET(Format, network_format_)>(
          reinterpret_cast<char*>(&network_format_),
          reinterpret_cast<char*>(&other->network_format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Format::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[8]);
}

// ===================================================================

class OnnxModel::_Internal {
 public:
  using HasBits = decltype(std::declval<OnnxModel>()._has_bits_);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_input_planes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_wdl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_output_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_output_mlh(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

OnnxModel::OnnxModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.OnnxModel)
}
OnnxModel::OnnxModel(const OnnxModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  input_planes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_planes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_input_planes()) {
    input_planes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_planes(), 
      GetArenaForAllocation());
  }
  output_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    output_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_value()) {
    output_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_value(), 
      GetArenaForAllocation());
  }
  output_wdl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    output_wdl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_wdl()) {
    output_wdl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_wdl(), 
      GetArenaForAllocation());
  }
  output_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    output_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_policy()) {
    output_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_policy(), 
      GetArenaForAllocation());
  }
  output_mlh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    output_mlh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_mlh()) {
    output_mlh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_mlh(), 
      GetArenaForAllocation());
  }
  data_type_ = from.data_type_;
  // @@protoc_insertion_point(copy_constructor:pblczero.OnnxModel)
}

inline void OnnxModel::SharedCtor() {
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
input_planes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_planes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
output_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
output_wdl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_wdl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
output_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
output_mlh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_mlh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_type_ = 0;
}

OnnxModel::~OnnxModel() {
  // @@protoc_insertion_point(destructor:pblczero.OnnxModel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OnnxModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_planes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_wdl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_mlh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OnnxModel::ArenaDtor(void* object) {
  OnnxModel* _this = reinterpret_cast< OnnxModel* >(object);
  (void)_this;
}
void OnnxModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnnxModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnnxModel::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.OnnxModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      input_planes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      output_wdl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      output_policy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      output_mlh_.ClearNonDefaultToEmpty();
    }
  }
  data_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnnxModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.OnnxModel.DataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pblczero::OnnxModel_DataType_IsValid(val))) {
            _internal_set_data_type(static_cast<::pblczero::OnnxModel_DataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string input_planes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_input_planes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pblczero.OnnxModel.input_planes");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_output_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pblczero.OnnxModel.output_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_wdl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_output_wdl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pblczero.OnnxModel.output_wdl");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_policy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_output_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pblczero.OnnxModel.output_policy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_mlh = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_output_mlh();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pblczero.OnnxModel.output_mlh");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnnxModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.OnnxModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes model = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_model(), target);
  }

  // optional .pblczero.OnnxModel.DataType data_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_type(), target);
  }

  // optional string input_planes = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_planes().data(), static_cast<int>(this->_internal_input_planes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pblczero.OnnxModel.input_planes");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_planes(), target);
  }

  // optional string output_value = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_value().data(), static_cast<int>(this->_internal_output_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pblczero.OnnxModel.output_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output_value(), target);
  }

  // optional string output_wdl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_wdl().data(), static_cast<int>(this->_internal_output_wdl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pblczero.OnnxModel.output_wdl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_output_wdl(), target);
  }

  // optional string output_policy = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_policy().data(), static_cast<int>(this->_internal_output_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pblczero.OnnxModel.output_policy");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_output_policy(), target);
  }

  // optional string output_mlh = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_mlh().data(), static_cast<int>(this->_internal_output_mlh().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pblczero.OnnxModel.output_mlh");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_output_mlh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.OnnxModel)
  return target;
}

size_t OnnxModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.OnnxModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes model = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_model());
    }

    // optional string input_planes = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_planes());
    }

    // optional string output_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_value());
    }

    // optional string output_wdl = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_wdl());
    }

    // optional string output_policy = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_policy());
    }

    // optional string output_mlh = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_mlh());
    }

    // optional .pblczero.OnnxModel.DataType data_type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnnxModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OnnxModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnnxModel::GetClassData() const { return &_class_data_; }

void OnnxModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OnnxModel *>(to)->MergeFrom(
      static_cast<const OnnxModel &>(from));
}


void OnnxModel::MergeFrom(const OnnxModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.OnnxModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_input_planes(from._internal_input_planes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_output_value(from._internal_output_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_output_wdl(from._internal_output_wdl());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_output_policy(from._internal_output_policy());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_output_mlh(from._internal_output_mlh());
    }
    if (cached_has_bits & 0x00000040u) {
      data_type_ = from.data_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnnxModel::CopyFrom(const OnnxModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.OnnxModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnnxModel::IsInitialized() const {
  return true;
}

void OnnxModel::InternalSwap(OnnxModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &input_planes_, lhs_arena,
      &other->input_planes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_value_, lhs_arena,
      &other->output_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_wdl_, lhs_arena,
      &other->output_wdl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_policy_, lhs_arena,
      &other->output_policy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_mlh_, lhs_arena,
      &other->output_mlh_, rhs_arena
  );
  swap(data_type_, other->data_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnnxModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[9]);
}

// ===================================================================

class Net::_Internal {
 public:
  using HasBits = decltype(std::declval<Net>()._has_bits_);
  static void set_has_magic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_license(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pblczero::EngineVersion& min_version(const Net* msg);
  static void set_has_min_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pblczero::Format& format(const Net* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pblczero::TrainingParams& training_params(const Net* msg);
  static void set_has_training_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pblczero::Weights& weights(const Net* msg);
  static void set_has_weights(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pblczero::OnnxModel& onnx_model(const Net* msg);
  static void set_has_onnx_model(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::pblczero::EngineVersion&
Net::_Internal::min_version(const Net* msg) {
  return *msg->min_version_;
}
const ::pblczero::Format&
Net::_Internal::format(const Net* msg) {
  return *msg->format_;
}
const ::pblczero::TrainingParams&
Net::_Internal::training_params(const Net* msg) {
  return *msg->training_params_;
}
const ::pblczero::Weights&
Net::_Internal::weights(const Net* msg) {
  return *msg->weights_;
}
const ::pblczero::OnnxModel&
Net::_Internal::onnx_model(const Net* msg) {
  return *msg->onnx_model_;
}
Net::Net(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pblczero.Net)
}
Net::Net(const Net& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_license()) {
    license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_license(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_min_version()) {
    min_version_ = new ::pblczero::EngineVersion(*from.min_version_);
  } else {
    min_version_ = nullptr;
  }
  if (from._internal_has_format()) {
    format_ = new ::pblczero::Format(*from.format_);
  } else {
    format_ = nullptr;
  }
  if (from._internal_has_training_params()) {
    training_params_ = new ::pblczero::TrainingParams(*from.training_params_);
  } else {
    training_params_ = nullptr;
  }
  if (from._internal_has_weights()) {
    weights_ = new ::pblczero::Weights(*from.weights_);
  } else {
    weights_ = nullptr;
  }
  if (from._internal_has_onnx_model()) {
    onnx_model_ = new ::pblczero::OnnxModel(*from.onnx_model_);
  } else {
    onnx_model_ = nullptr;
  }
  magic_ = from.magic_;
  // @@protoc_insertion_point(copy_constructor:pblczero.Net)
}

inline void Net::SharedCtor() {
license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&magic_) -
    reinterpret_cast<char*>(&min_version_)) + sizeof(magic_));
}

Net::~Net() {
  // @@protoc_insertion_point(destructor:pblczero.Net)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Net::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  license_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete min_version_;
  if (this != internal_default_instance()) delete format_;
  if (this != internal_default_instance()) delete training_params_;
  if (this != internal_default_instance()) delete weights_;
  if (this != internal_default_instance()) delete onnx_model_;
}

void Net::ArenaDtor(void* object) {
  Net* _this = reinterpret_cast< Net* >(object);
  (void)_this;
}
void Net::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Net::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Net::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Net)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      license_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(min_version_ != nullptr);
      min_version_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(format_ != nullptr);
      format_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(training_params_ != nullptr);
      training_params_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(weights_ != nullptr);
      weights_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(onnx_model_ != nullptr);
      onnx_model_->Clear();
    }
  }
  magic_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Net::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_magic(&has_bits);
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string license = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_license();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pblczero.Net.license");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.EngineVersion min_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Format format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.TrainingParams training_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_training_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.Weights weights = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pblczero.OnnxModel onnx_model = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_onnx_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Net::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Net)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 magic = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_magic(), target);
  }

  // optional string license = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pblczero.Net.license");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_license(), target);
  }

  // optional .pblczero.EngineVersion min_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::min_version(this), target, stream);
  }

  // optional .pblczero.Format format = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::format(this), target, stream);
  }

  // optional .pblczero.TrainingParams training_params = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::training_params(this), target, stream);
  }

  // optional .pblczero.Weights weights = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::weights(this), target, stream);
  }

  // optional .pblczero.OnnxModel onnx_model = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::onnx_model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Net)
  return target;
}

size_t Net::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Net)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string license = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_license());
    }

    // optional .pblczero.EngineVersion min_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *min_version_);
    }

    // optional .pblczero.Format format = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *format_);
    }

    // optional .pblczero.TrainingParams training_params = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *training_params_);
    }

    // optional .pblczero.Weights weights = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weights_);
    }

    // optional .pblczero.OnnxModel onnx_model = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *onnx_model_);
    }

    // optional fixed32 magic = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Net::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Net::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Net::GetClassData() const { return &_class_data_; }

void Net::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Net *>(to)->MergeFrom(
      static_cast<const Net &>(from));
}


void Net::MergeFrom(const Net& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Net)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_license(from._internal_license());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_min_version()->::pblczero::EngineVersion::MergeFrom(from._internal_min_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_format()->::pblczero::Format::MergeFrom(from._internal_format());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_training_params()->::pblczero::TrainingParams::MergeFrom(from._internal_training_params());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_weights()->::pblczero::Weights::MergeFrom(from._internal_weights());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_onnx_model()->::pblczero::OnnxModel::MergeFrom(from._internal_onnx_model());
    }
    if (cached_has_bits & 0x00000040u) {
      magic_ = from.magic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Net::CopyFrom(const Net& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Net)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Net::IsInitialized() const {
  return true;
}

void Net::InternalSwap(Net* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &license_, lhs_arena,
      &other->license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Net, magic_)
      + sizeof(Net::magic_)
      - PROTOBUF_FIELD_OFFSET(Net, min_version_)>(
          reinterpret_cast<char*>(&min_version_),
          reinterpret_cast<char*>(&other->min_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Net::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pblczero
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pblczero::EngineVersion* Arena::CreateMaybeMessage< ::pblczero::EngineVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::EngineVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::pblczero::Weights_Layer* Arena::CreateMaybeMessage< ::pblczero::Weights_Layer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::Weights_Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::pblczero::Weights_ConvBlock* Arena::CreateMaybeMessage< ::pblczero::Weights_ConvBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::Weights_ConvBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::pblczero::Weights_SEunit* Arena::CreateMaybeMessage< ::pblczero::Weights_SEunit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::Weights_SEunit >(arena);
}
template<> PROTOBUF_NOINLINE ::pblczero::Weights_Residual* Arena::CreateMaybeMessage< ::pblczero::Weights_Residual >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::Weights_Residual >(arena);
}
template<> PROTOBUF_NOINLINE ::pblczero::Weights* Arena::CreateMaybeMessage< ::pblczero::Weights >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::Weights >(arena);
}
template<> PROTOBUF_NOINLINE ::pblczero::TrainingParams* Arena::CreateMaybeMessage< ::pblczero::TrainingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::TrainingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::pblczero::NetworkFormat* Arena::CreateMaybeMessage< ::pblczero::NetworkFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::NetworkFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::pblczero::Format* Arena::CreateMaybeMessage< ::pblczero::Format >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::Format >(arena);
}
template<> PROTOBUF_NOINLINE ::pblczero::OnnxModel* Arena::CreateMaybeMessage< ::pblczero::OnnxModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::OnnxModel >(arena);
}
template<> PROTOBUF_NOINLINE ::pblczero::Net* Arena::CreateMaybeMessage< ::pblczero::Net >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pblczero::Net >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
